@use '../config' as *;

/* 참고자료
https://d2.naver.com/helloworld/8540176#ch2
https://heropy.blog/2018/11/24/css-flexible-box/
https://www.youtube.com/watch?v=qm0IfG1GyZU
*/

/*
layout 1. 웹페이지 내 동적 좌우 여백 설정
layout 2. 모바일에서 손가락 제스처로 외부 여백을 확인할 수 없도록 고정
          Issue with layout 3:
          overflow 속성을 사용하면 sticky가 작동하지 않는다. 따라서 fixed를
          사용한다.
layout 3. Header를 visual viewport 상단에 고정
          Issue with layout 2:
          상단 고정을 위해 fixed를 사용하면 flex-basis 속성이 작동하지 않는다.
          따라서 height 속성을 사용한다.
layout 4. footer를 페이지 하단에 고정
layout 5. contents가 container 영역 밖으로 탈출하는 것을 방지
layout 6. contents의 좌측 균일 정렬
          repeat, auto, minmax(any, 1fr) 디자인을 합쳐서 RAM 디자인이라고 부른다.

          중앙 균일 정렬을 원한다면 flex container에 {flex-flow : column wrap;
          justify-content: space-evenly} 속성을 지정하면 된다.

          flex로도 좌측 균일 정렬을 만들 수 있지만, 화면 너비 변화에 따른 column
          수까지는 바뀌지 않는다.
          방법: flex container {display: flex; flex-wrap: wrap},
          flex item { flex: 0, 1, calc(100% / n)}
layout 7. 컨텐츠의 화면비(aspect ratio) 고정
          현재 디자인은 aspect-ratio 속성이 정식으로 지원되기 전까지 사용하는 임시 
          디자인이다.
          이 디자인은 컨텐츠가 wrapper의 크기를 넘어가면 nowrap된다. (2021.01.04)
          즉, wrapper의 size가 컨턴츠 size와 별개로 동작한다.

          따라서 컨텐츠 내의 요소들의 사이즈를 적절히 관리해주어야 하며, 빠져나오는
          부분은 {overflow: hidden}으로 마감처리한다.
layout 8. 디자인 공간의 배경화면 설정 가능
layout 9. pc 화면의 스크롤바 디자인
*/

html,
body {
  // overflow-x: hidden;  /* layout 2 */
  word-break: break-all;
}

.layout {
  /*flex-flow: column nowrap;*/
  align-items: center; /* layout 1 */
  width: 100%;
  min-height: 100vh; /* layout 4 */

  &-main {
    display: inline-flex;
    margin: $header-height + 10px 10px 0 10px; /* layout 3 */
    flex: 1 0 100%; /* layout 8 */
    @media (max-width: 768px) {
      display: block;
    }

    /*display: flex;*/
    /*flex-flow: column wrap;*/
    /* max-width: $pc-max-width; layout 1 */
    /*background: $layout-main-background; /* layout 8 */
  }
}
