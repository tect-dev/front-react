[{"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\index.js":"1","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\App.js":"2","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\HomePage.js":"4","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionListPage.js":"5","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\AboutPage.js":"6","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\NotFoundPage.js":"7","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\LoginPage.js":"8","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionDetailPage.js":"9","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\user\\ProfilePage.js":"10","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionWritePage.js":"11","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MainLayout.js":"12","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\ForceGraph.js":"13","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\dummyTechtree.js":"14","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Navbar.js":"15","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Button.js":"16"},{"size":613,"mtime":1609222632282,"results":"17","hashOfConfig":"18"},{"size":1468,"mtime":1609222632271,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1609222612964,"results":"20","hashOfConfig":"18"},{"size":2684,"mtime":1609222632283,"results":"21","hashOfConfig":"18"},{"size":242,"mtime":1609222632285,"results":"22","hashOfConfig":"18"},{"size":197,"mtime":1609222632283,"results":"23","hashOfConfig":"18"},{"size":202,"mtime":1609222632284,"results":"24","hashOfConfig":"18"},{"size":202,"mtime":1609222632284,"results":"25","hashOfConfig":"18"},{"size":401,"mtime":1609222632285,"results":"26","hashOfConfig":"18"},{"size":291,"mtime":1609222632286,"results":"27","hashOfConfig":"18"},{"size":402,"mtime":1609222632285,"results":"28","hashOfConfig":"18"},{"size":236,"mtime":1609243309630,"results":"29","hashOfConfig":"18"},{"size":10272,"mtime":1609222632281,"results":"30","hashOfConfig":"18"},{"size":11549,"mtime":1609222632282,"results":"31","hashOfConfig":"18"},{"size":2315,"mtime":1609245927881,"results":"32","hashOfConfig":"18"},{"size":633,"mtime":1609245747608,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"a3abpd",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\index.js",[],["69","70"],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\App.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\HomePage.js",["71","72","73","74","75","76","77","78"],"import React from 'react';\r\nimport MainLayout from '../components/MainLayout';\r\n//import '../styles/Home.module.css';\r\n\r\nimport { ForceGraph } from '../components/home/ForceGraph';\r\nimport { dummyTechtree } from '../lib/dummyTechtree';\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <>\r\n      <MainLayout>\r\n        <div className=\"container\">\r\n          <main>\r\n            <ForceGraph techtreeData={dummyTechtree.cs} category={'cs'} />\r\n          </main>\r\n          <aside className=\"sidebar\">\r\n            <div\r\n              onClick={() => {\r\n                console.log('physics clicked');\r\n              }}\r\n              className=\"block\"\r\n            >\r\n              <img\r\n                src=\"/icons/physics.svg\"\r\n                alt=\"physics\"\r\n                height=\"70\"\r\n                width=\"70\"\r\n              />\r\n              <br />\r\n              Physics\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/math.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Mathematics\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/economics.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              economics\r\n            </div>\r\n\r\n            <div\r\n              onClick={() => {\r\n                console.log('cs clicked');\r\n              }}\r\n              className=\"block\"\r\n            >\r\n              <img src=\"/icons/computer.svg\" height=\"50\" width=\"50\" />\r\n              <br />\r\n              Computer Science\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/chemistry.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Chemistry\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/biochemistry.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Biochemistry\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/russia.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Russia\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/electricity.svg\" height=\"50\" width=\"50\" />\r\n              <br />\r\n              Electrical Engineering\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/earth.svg\" height=\"50\" width=\"50\" />\r\n              <br />\r\n              Earth System\r\n            </div>\r\n          </aside>\r\n        </div>\r\n      </MainLayout>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionListPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\AboutPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\NotFoundPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\LoginPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionDetailPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\user\\ProfilePage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionWritePage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MainLayout.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\ForceGraph.js",["79","80","81","82","83","84"],"import React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport function ForceGraph({ techtreeData, category }) {\r\n  const containerRef = React.useRef(null);\r\n\r\n  const nodeHoverTooltip = (node) => {\r\n    return `<div>     \r\n      <p><b>${node.name}</b></p>\r\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\r\n    </div>`;\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let destroyFn;\r\n\r\n    if (containerRef.current) {\r\n      const { destroy } = runForceGraph(\r\n        containerRef.current,\r\n        techtreeData,\r\n        category,\r\n        nodeHoverTooltip\r\n      );\r\n      destroyFn = destroy;\r\n    }\r\n\r\n    return destroyFn;\r\n  }, []);\r\n\r\n  return <div ref={containerRef} />;\r\n}\r\n\r\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\r\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\r\n  const links = techtreeData.links.map((d) => Object.assign({}, d));\r\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d));\r\n\r\n  const containerRect = container.getBoundingClientRect();\r\n  const height = 1000; //containerRect.height;\r\n  const width = 900; //containerRect.width;\r\n\r\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width]);\r\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height]);\r\n\r\n  //const circleColor = () => { return \"#fff\"; };\r\n  //const circleFill = \"#fff\"\r\n  const circleSelctedFill = '#00bebe';\r\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\r\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\r\n  function getRandom00BEBE() {\r\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe'];\r\n    const colorSet2 = [\r\n      '#66b7ce',\r\n      '#00bebe',\r\n      'rgb(0, 170, 170)',\r\n      'rgb(0, 140, 190)',\r\n      'rgb(0, 190, 170)',\r\n    ];\r\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001);\r\n    return colorSet2[randomFactor];\r\n    //return linear-gradient(135deg, orange 60%, cyan)\r\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\r\n  }\r\n  const circleStrokeColor1 = getRandom00BEBE(); //\"#94D7FF\"\r\n  const circleStrokeColor2 = getRandom00BEBE(); //\"#5DE87C\"\r\n  const circleStrokeColor3 = getRandom00BEBE(); //\"#FFF872\"\r\n  const circleStrokeColor4 = getRandom00BEBE(); //\"#FF669A\"\r\n\r\n  const drag = (simulation) => {\r\n    const dragstarted = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    };\r\n\r\n    const dragged = (d) => {\r\n      d.fx = d3.event.x;\r\n      d.fy = d3.event.y;\r\n    };\r\n\r\n    const dragended = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    };\r\n\r\n    return d3\r\n      .drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended);\r\n  };\r\n\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      'link',\r\n      d3.forceLink(links).id((d) => d.id)\r\n    )\r\n    .force('charge', d3.forceManyBody().strength(-1050))\r\n    .force('link', d3.forceLink(links).distance(200))\r\n    .force('x', d3.forceX())\r\n    .force('y', d3.forceY());\r\n\r\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed);\r\n\r\n  const svg = d3\r\n    .select(container)\r\n    .call(zoom)\r\n    .append('svg')\r\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75]);\r\n\r\n  var x2 = xScale.copy(); // reference.\r\n  var y2 = yScale.copy();\r\n\r\n  function zoomed() {\r\n    xScale = d3.event.transform.rescaleX(x2);\r\n    yScale = d3.event.transform.rescaleY(y2);\r\n    tick();\r\n  }\r\n\r\n  svg\r\n    .append('defs')\r\n    .append('marker')\r\n    .attr('id', 'arrowhead')\r\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\r\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\r\n    .attr('refY', 0)\r\n    .attr('orient', 'auto')\r\n    .attr('markerWidth', 10)\r\n    .attr('markerHeight', 10)\r\n    .attr('xoverflow', 'visible')\r\n    .append('svg:path')\r\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\r\n    .attr('fill', '#999')\r\n    .style('stroke', 'none')\r\n    .attr('stroke-width', 1)\r\n    .attr('id', 'vis');\r\n\r\n  const link = svg\r\n    .append('g')\r\n    .attr('stroke', '#999')\r\n    .attr('stroke-opacity', 0.6)\r\n    .selectAll('line')\r\n    .data(links)\r\n    .join('line')\r\n    .attr('class', (d) => {\r\n      return `link${d.index}`;\r\n    })\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', 'url(#arrowhead)');\r\n\r\n  const node = svg\r\n    .append('g')\r\n    .attr('stroke-width', 2)\r\n    .selectAll('circle')\r\n    .data(nodes)\r\n    .join('circle')\r\n    //.attr('class',(d)=>{return `${d.name}`})\r\n    .attr('class', (d) => {\r\n      return `node${d.index}`;\r\n    })\r\n    .attr('r', 30)\r\n    .style('fill', function (d) {\r\n      return getRandom00BEBE();\r\n    })\r\n    .style('stroke', '#fff')\r\n    .call(drag(simulation));\r\n\r\n  function matchColorForGroup(d) {\r\n    switch (d.group) {\r\n      case 1:\r\n        return circleStrokeColor1;\r\n      case 2:\r\n        return circleStrokeColor2;\r\n      case 3:\r\n        return circleStrokeColor3;\r\n      case 4:\r\n        return circleStrokeColor4;\r\n      default:\r\n        return '#00bebe';\r\n    }\r\n  }\r\n\r\n  const label = svg\r\n    .append('g')\r\n    .attr('class', 'labels')\r\n    .selectAll('text')\r\n    .data(nodes)\r\n    .enter()\r\n    .append('text')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('dominant-baseline', 'central')\r\n    .attr('class', (d) => {\r\n      return d.index;\r\n    })\r\n    //.attr(\"class\", )\r\n    .text((d) => {\r\n      return d.label;\r\n    })\r\n    .style('font-weight', 'bold')\r\n    .style('fill', '#fff')\r\n    .call(drag(simulation));\r\n\r\n  // Add the tooltip element to the graph\r\n  const tooltip = d3.select(container).append('div');\r\n\r\n  const addTooltip = (hoverTooltip, node, x, y) => {\r\n    //  tooltip // tooltip is just div. how add transition?\r\n    //  .transition()\r\n    //    .duration(200)\r\n    tooltip\r\n      .html(hoverTooltip(node))\r\n      .attr('class', 'tooltip')\r\n      .style('left', `${x + 40}px`)\r\n      .style('top', `${y - 120}px`)\r\n      .style('opacity', 0.99);\r\n  };\r\n\r\n  const removeTooltip = () => {\r\n    tooltip\r\n      //  .transition()\r\n      //  .duration(200)\r\n      .style('opacity', 0);\r\n  };\r\n\r\n  node\r\n    .on('mouseover', (d) => {\r\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\r\n      fadeExceptSelected(d);\r\n      node.style('cursor', 'pointer');\r\n    })\r\n    .on('mouseout', (d) => {\r\n      removeTooltip();\r\n      node.style('opacity', '1');\r\n      link.style('opacity', '1');\r\n      //  container.querySelectorAll('circle').forEach((element)=>{\r\n      //  element.style.fill=matchColorForGroup(element)\r\n      //  })\r\n    })\r\n    .on('click', () => {\r\n      window.location.href = `/subjects/${category}`;\r\n    });\r\n\r\n  label\r\n    .on('mouseover', (d) => {\r\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\r\n      fadeExceptSelected(d);\r\n      label.style('cursor', 'pointer');\r\n    })\r\n    .on('mouseout', () => {\r\n      removeTooltip();\r\n      node.style('opacity', '1');\r\n      link.style('opacity', '1');\r\n    })\r\n    .on('click', () => {\r\n      window.location.href = `/subjects/${category}`;\r\n    });\r\n\r\n  function fadeExceptSelected(selectedNode) {\r\n    node.style('opacity', '0.2');\r\n    link.style('opacity', '0.1');\r\n    //const displayedNodes = []\r\n    //const displayedLinks = []\r\n\r\n    links.map((linkElement) => {\r\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\r\n      if (linkElement.source.id === selectedNode.id) {\r\n        //selectedNode.style(\"opacity\" ,\"0.1\")\r\n        container.querySelector(\r\n          `circle.node${linkElement.target.id}`\r\n        ).style.opacity = '1';\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1';\r\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\r\n          '1';\r\n        //displayedLinks.push(linkElement)\r\n        //displayedNodes.push(nodes[linkElement.target.id])\r\n        //console.log(\"to: \",nodes[linkElement.target.id])\r\n      } else if (linkElement.target.id === selectedNode.id) {\r\n        container.querySelector(\r\n          `circle.node${linkElement.source.id}`\r\n        ).style.opacity = '1';\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1';\r\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\r\n          '1';\r\n        //displayedLinks.push(linkElement)\r\n        //displayedNodes.push(nodes[linkElement.source.id])\r\n        //console.log(\"from: \",nodes[linkElement.source.id])\r\n      } else {\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1';\r\n      }\r\n      //console.log(displayedNodes)\r\n      //displayedNodes.map((element)=>{\r\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\r\n      //node.select(element).style('opacity',\"1\")\r\n      //})\r\n\r\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\r\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\r\n      // dom 트리상의 문제가 없음.\r\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\r\n    });\r\n  }\r\n\r\n  function tick() {\r\n    //update link positions\r\n    link\r\n      .attr('x1', function (d) {\r\n        return xScale(d.source.x);\r\n      })\r\n      .attr('y1', function (d) {\r\n        return yScale(d.source.y);\r\n      })\r\n      .attr('x2', function (d) {\r\n        return xScale(d.target.x);\r\n      })\r\n      .attr('y2', function (d) {\r\n        return yScale(d.target.y);\r\n      });\r\n\r\n    // update node positions\r\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y));\r\n\r\n    // update label positions\r\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y));\r\n  }\r\n\r\n  simulation.on('tick', tick);\r\n\r\n  return {\r\n    destroy: () => {\r\n      simulation.stop();\r\n    },\r\n    nodes: () => {\r\n      return svg.node();\r\n    },\r\n  };\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\dummyTechtree.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Navbar.js",["85"],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Button.js",["86"],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":34,"column":15,"nodeType":"93","endLine":34,"endColumn":67},{"ruleId":"91","severity":1,"message":"92","line":40,"column":15,"nodeType":"93","endLine":40,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":51,"column":15,"nodeType":"93","endLine":51,"endColumn":71},{"ruleId":"91","severity":1,"message":"92","line":57,"column":15,"nodeType":"93","endLine":57,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":63,"column":15,"nodeType":"93","endLine":63,"endColumn":75},{"ruleId":"91","severity":1,"message":"92","line":69,"column":15,"nodeType":"93","endLine":69,"endColumn":69},{"ruleId":"91","severity":1,"message":"92","line":75,"column":15,"nodeType":"93","endLine":75,"endColumn":74},{"ruleId":"91","severity":1,"message":"92","line":81,"column":15,"nodeType":"93","endLine":81,"endColumn":68},{"ruleId":"94","severity":1,"message":"95","line":28,"column":6,"nodeType":"96","endLine":28,"endColumn":8,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":38,"column":9,"nodeType":"100","messageId":"101","endLine":38,"endColumn":22},{"ruleId":"98","severity":1,"message":"102","line":47,"column":9,"nodeType":"100","messageId":"101","endLine":47,"endColumn":26},{"ruleId":"98","severity":1,"message":"103","line":51,"column":11,"nodeType":"100","messageId":"101","endLine":51,"endColumn":20},{"ruleId":"98","severity":1,"message":"104","line":170,"column":12,"nodeType":"100","messageId":"101","endLine":170,"endColumn":30},{"ruleId":"105","severity":1,"message":"106","line":266,"column":29,"nodeType":"107","messageId":"108","endLine":266,"endColumn":31},{"ruleId":"98","severity":1,"message":"109","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"110","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":14},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'category' and 'techtreeData'. Either include them or remove the dependency array.","ArrayExpression",["113"],"no-unused-vars","'containerRect' is assigned a value but never used.","Identifier","unusedVar","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [category, techtreeData]",{"range":"116","text":"117"},[641,643],"[category, techtreeData]"]