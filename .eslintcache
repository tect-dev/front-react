[{"/Users/zowan/Documents/web/tect-react/src/index.js":"1","/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js":"2","/Users/zowan/Documents/web/tect-react/src/App.js":"3","/Users/zowan/Documents/web/tect-react/src/components/Navbar.js":"4","/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js":"5","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js":"6","/Users/zowan/Documents/web/tect-react/src/components/MainLayout.js":"7","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js":"8","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js":"9","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js":"10","/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js":"11","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js":"12","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js":"13","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js":"14","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js":"15"},{"size":593,"mtime":1609077007084,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1609067299109,"results":"18","hashOfConfig":"17"},{"size":1429,"mtime":1609129968226,"results":"19","hashOfConfig":"17"},{"size":389,"mtime":1609129320467,"results":"20","hashOfConfig":"17"},{"size":10992,"mtime":1609077007084,"results":"21","hashOfConfig":"17"},{"size":9931,"mtime":1609077007084,"results":"22","hashOfConfig":"17"},{"size":223,"mtime":1609077007083,"results":"23","hashOfConfig":"17"},{"size":192,"mtime":1609128889778,"results":"24","hashOfConfig":"17"},{"size":2594,"mtime":1609128837855,"results":"25","hashOfConfig":"17"},{"size":230,"mtime":1609128813173,"results":"26","hashOfConfig":"17"},{"size":187,"mtime":1609128830553,"results":"27","hashOfConfig":"17"},{"size":379,"mtime":1609128804381,"results":"28","hashOfConfig":"17"},{"size":384,"mtime":1609128822521,"results":"29","hashOfConfig":"17"},{"size":277,"mtime":1609129861739,"results":"30","hashOfConfig":"17"},{"size":192,"mtime":1609129954217,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xgtey9",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zowan/Documents/web/tect-react/src/index.js",[],"/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js",[],["64","65"],"/Users/zowan/Documents/web/tect-react/src/App.js",[],"/Users/zowan/Documents/web/tect-react/src/components/Navbar.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js",["66","67","68","69","70","71"],"import React from 'react';\nimport * as d3 from 'd3';\n\nexport function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null);\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`;\n  };\n\n  React.useEffect(() => {\n    let destroyFn;\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      );\n      destroyFn = destroy;\n    }\n\n    return destroyFn;\n  }, []);\n\n  return <div ref={containerRef} />;\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n  const links = techtreeData.links.map((d) => Object.assign({}, d));\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d));\n\n  const containerRect = container.getBoundingClientRect();\n  const height = 1000; //containerRect.height;\n  const width = 900; //containerRect.width;\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width]);\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height]);\n\n  //const circleColor = () => { return \"#fff\"; };\n  //const circleFill = \"#fff\"\n  const circleSelctedFill = '#00bebe';\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\n  function getRandom00BEBE() {\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe'];\n    const colorSet2 = [\n      '#66b7ce',\n      '#00bebe',\n      'rgb(0, 170, 170)',\n      'rgb(0, 140, 190)',\n      'rgb(0, 190, 170)',\n    ];\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001);\n    return colorSet2[randomFactor];\n    //return linear-gradient(135deg, orange 60%, cyan)\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\n  }\n  const circleStrokeColor1 = getRandom00BEBE(); //\"#94D7FF\"\n  const circleStrokeColor2 = getRandom00BEBE(); //\"#5DE87C\"\n  const circleStrokeColor3 = getRandom00BEBE(); //\"#FFF872\"\n  const circleStrokeColor4 = getRandom00BEBE(); //\"#FF669A\"\n\n  const drag = (simulation) => {\n    const dragstarted = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (d) => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    };\n\n    const dragended = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      'link',\n      d3.forceLink(links).id((d) => d.id)\n    )\n    .force('charge', d3.forceManyBody().strength(-1050))\n    .force('link', d3.forceLink(links).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY());\n\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed);\n\n  const svg = d3\n    .select(container)\n    .call(zoom)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75]);\n\n  var x2 = xScale.copy(); // reference.\n  var y2 = yScale.copy();\n\n  function zoomed() {\n    xScale = d3.event.transform.rescaleX(x2);\n    yScale = d3.event.transform.rescaleY(y2);\n    tick();\n  }\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', '#999')\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis');\n\n  const link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d) => {\n      return `link${d.index}`;\n    })\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)');\n\n  const node = svg\n    .append('g')\n    .attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    //.attr('class',(d)=>{return `${d.name}`})\n    .attr('class', (d) => {\n      return `node${d.index}`;\n    })\n    .attr('r', 30)\n    .style('fill', function (d) {\n      return getRandom00BEBE();\n    })\n    .style('stroke', '#fff')\n    .call(drag(simulation));\n\n  function matchColorForGroup(d) {\n    switch (d.group) {\n      case 1:\n        return circleStrokeColor1;\n      case 2:\n        return circleStrokeColor2;\n      case 3:\n        return circleStrokeColor3;\n      case 4:\n        return circleStrokeColor4;\n      default:\n        return '#00bebe';\n    }\n  }\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.index;\n    })\n    //.attr(\"class\", )\n    .text((d) => {\n      return d.label;\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(drag(simulation));\n\n  // Add the tooltip element to the graph\n  const tooltip = d3.select(container).append('div');\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    //  tooltip // tooltip is just div. how add transition?\n    //  .transition()\n    //    .duration(200)\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x + 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', 0.99);\n  };\n\n  const removeTooltip = () => {\n    tooltip\n      //  .transition()\n      //  .duration(200)\n      .style('opacity', 0);\n  };\n\n  node\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      node.style('cursor', 'pointer');\n    })\n    .on('mouseout', (d) => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n      //  container.querySelectorAll('circle').forEach((element)=>{\n      //  element.style.fill=matchColorForGroup(element)\n      //  })\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  label\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      label.style('cursor', 'pointer');\n    })\n    .on('mouseout', () => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2');\n    link.style('opacity', '0.1');\n    //const displayedNodes = []\n    //const displayedLinks = []\n\n    links.map((linkElement) => {\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\n      if (linkElement.source.id === selectedNode.id) {\n        //selectedNode.style(\"opacity\" ,\"0.1\")\n        container.querySelector(\n          `circle.node${linkElement.target.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.target.id])\n        //console.log(\"to: \",nodes[linkElement.target.id])\n      } else if (linkElement.target.id === selectedNode.id) {\n        container.querySelector(\n          `circle.node${linkElement.source.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.source.id])\n        //console.log(\"from: \",nodes[linkElement.source.id])\n      } else {\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n      }\n      //console.log(displayedNodes)\n      //displayedNodes.map((element)=>{\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\n      //node.select(element).style('opacity',\"1\")\n      //})\n\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\n      // dom 트리상의 문제가 없음.\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\n    });\n  }\n\n  function tick() {\n    //update link positions\n    link\n      .attr('x1', function (d) {\n        return xScale(d.source.x);\n      })\n      .attr('y1', function (d) {\n        return yScale(d.source.y);\n      })\n      .attr('x2', function (d) {\n        return xScale(d.target.x);\n      })\n      .attr('y2', function (d) {\n        return yScale(d.target.y);\n      });\n\n    // update node positions\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y));\n\n    // update label positions\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y));\n  }\n\n  simulation.on('tick', tick);\n\n  return {\n    destroy: () => {\n      simulation.stop();\n    },\n    nodes: () => {\n      return svg.node();\n    },\n  };\n}\n","/Users/zowan/Documents/web/tect-react/src/components/MainLayout.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js",["72","73","74","75","76","77","78","79"],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":28,"column":6,"nodeType":"86","endLine":28,"endColumn":8,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":38,"column":9,"nodeType":"90","messageId":"91","endLine":38,"endColumn":22},{"ruleId":"88","severity":1,"message":"92","line":47,"column":9,"nodeType":"90","messageId":"91","endLine":47,"endColumn":26},{"ruleId":"88","severity":1,"message":"93","line":51,"column":11,"nodeType":"90","messageId":"91","endLine":51,"endColumn":20},{"ruleId":"88","severity":1,"message":"94","line":170,"column":12,"nodeType":"90","messageId":"91","endLine":170,"endColumn":30},{"ruleId":"95","severity":1,"message":"96","line":266,"column":29,"nodeType":"97","messageId":"98","endLine":266,"endColumn":31},{"ruleId":"99","severity":1,"message":"100","line":34,"column":15,"nodeType":"101","endLine":34,"endColumn":67},{"ruleId":"99","severity":1,"message":"100","line":40,"column":15,"nodeType":"101","endLine":40,"endColumn":72},{"ruleId":"99","severity":1,"message":"100","line":51,"column":15,"nodeType":"101","endLine":51,"endColumn":71},{"ruleId":"99","severity":1,"message":"100","line":57,"column":15,"nodeType":"101","endLine":57,"endColumn":72},{"ruleId":"99","severity":1,"message":"100","line":63,"column":15,"nodeType":"101","endLine":63,"endColumn":75},{"ruleId":"99","severity":1,"message":"100","line":69,"column":15,"nodeType":"101","endLine":69,"endColumn":69},{"ruleId":"99","severity":1,"message":"100","line":75,"column":15,"nodeType":"101","endLine":75,"endColumn":74},{"ruleId":"99","severity":1,"message":"100","line":81,"column":15,"nodeType":"101","endLine":81,"endColumn":68},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'category' and 'techtreeData'. Either include them or remove the dependency array.","ArrayExpression",["104"],"no-unused-vars","'containerRect' is assigned a value but never used.","Identifier","unusedVar","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},"Update the dependencies array to be: [category, techtreeData]",{"range":"107","text":"108"},[614,616],"[category, techtreeData]"]