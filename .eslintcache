[{"/Users/zowan/Documents/web/tect-react/src/index.js":"1","/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js":"2","/Users/zowan/Documents/web/tect-react/src/App.js":"3","/Users/zowan/Documents/web/tect-react/src/redux/index.js":"4","/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js":"5","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js":"6","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js":"7","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js":"8","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js":"9","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js":"10","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js":"11","/Users/zowan/Documents/web/tect-react/src/redux/auth.js":"12","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js":"13","/Users/zowan/Documents/web/tect-react/src/redux/post.js":"14","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js":"15","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js":"16","/Users/zowan/Documents/web/tect-react/src/redux/createPost.js":"17","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js":"18","/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js":"19","/Users/zowan/Documents/web/tect-react/src/components/Button.js":"20","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js":"21","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js":"22","/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js":"23","/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js":"24","/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js":"25","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js":"26","/Users/zowan/Documents/web/tect-react/src/components/layout/Header.js":"27","/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js":"28","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js":"29","/Users/zowan/Documents/web/tect-react/src/lib/functions.js":"30","/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js":"31","/Users/zowan/Documents/web/tect-react/src/lib/katexWhiteList.js":"32","/Users/zowan/Documents/web/tect-react/src/lib/prismPlugin.js":"33","/Users/zowan/Documents/web/tect-react/src/lib/prismThemes.js":"34","/Users/zowan/Documents/web/tect-react/src/components/MarkdownRenderingBlock.js":"35","/Users/zowan/Documents/web/tect-react/src/components/MarkdownEditorBlock.js":"36","/Users/zowan/Documents/web/tect-react/src/redux/write.js":"37","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionSection.js":"38","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerSection.js":"39","/Users/zowan/Documents/web/tect-react/src/components/CommentListBlock.js":"40","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteSection.js":"41","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionEditPage.js":"42"},{"size":1003,"mtime":1609738809560,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1609067299109,"results":"45","hashOfConfig":"44"},{"size":1714,"mtime":1610530042026,"results":"46","hashOfConfig":"44"},{"size":475,"mtime":1610525292746,"results":"47","hashOfConfig":"44"},{"size":194,"mtime":1610459759726,"results":"48","hashOfConfig":"44"},{"size":199,"mtime":1610459759727,"results":"49","hashOfConfig":"44"},{"size":199,"mtime":1610459759727,"results":"50","hashOfConfig":"44"},{"size":770,"mtime":1610540750000,"results":"51","hashOfConfig":"44"},{"size":2986,"mtime":1610459759728,"results":"52","hashOfConfig":"44"},{"size":1193,"mtime":1610459759728,"results":"53","hashOfConfig":"44"},{"size":1424,"mtime":1610529289229,"results":"54","hashOfConfig":"44"},{"size":1192,"mtime":1609738809562,"results":"55","hashOfConfig":"44"},{"size":5370,"mtime":1609738809564,"results":"56","hashOfConfig":"44"},{"size":2829,"mtime":1609738809564,"results":"57","hashOfConfig":"44"},{"size":157,"mtime":1609738809564,"results":"58","hashOfConfig":"44"},{"size":4165,"mtime":1610528875212,"results":"59","hashOfConfig":"44"},{"size":5663,"mtime":1610546966974,"results":"60","hashOfConfig":"44"},{"size":2844,"mtime":1610459759727,"results":"61","hashOfConfig":"44"},{"size":348,"mtime":1610459759724,"results":"62","hashOfConfig":"44"},{"size":617,"mtime":1610459759720,"results":"63","hashOfConfig":"44"},{"size":1208,"mtime":1610503269212,"results":"64","hashOfConfig":"44"},{"size":1998,"mtime":1610517837915,"results":"65","hashOfConfig":"44"},{"size":1180,"mtime":1609738809560,"results":"66","hashOfConfig":"44"},{"size":10351,"mtime":1610245309618,"results":"67","hashOfConfig":"44"},{"size":308,"mtime":1609738809558,"results":"68","hashOfConfig":"44"},{"size":10023,"mtime":1610008978677,"results":"69","hashOfConfig":"44"},{"size":5565,"mtime":1610459759723,"results":"70","hashOfConfig":"44"},{"size":1040,"mtime":1610459759721,"results":"71","hashOfConfig":"44"},{"size":250,"mtime":1609249874876,"results":"72","hashOfConfig":"44"},{"size":1394,"mtime":1610459759725,"results":"73","hashOfConfig":"44"},{"size":1905,"mtime":1610459759723,"results":"74","hashOfConfig":"44"},{"size":987,"mtime":1610459759726,"results":"75","hashOfConfig":"44"},{"size":2471,"mtime":1610459759726,"results":"76","hashOfConfig":"44"},{"size":15036,"mtime":1610459759726,"results":"77","hashOfConfig":"44"},{"size":4046,"mtime":1610540314439,"results":"78","hashOfConfig":"44"},{"size":523,"mtime":1610540437610,"results":"79","hashOfConfig":"44"},{"size":633,"mtime":1610522438799,"results":"80","hashOfConfig":"44"},{"size":2678,"mtime":1610532265743,"results":"81","hashOfConfig":"44"},{"size":1743,"mtime":1610533049375,"results":"82","hashOfConfig":"44"},{"size":398,"mtime":1610502963667,"results":"83","hashOfConfig":"44"},{"size":4110,"mtime":1610546849422,"results":"84","hashOfConfig":"44"},{"size":3462,"mtime":1610531744282,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"xgtey9",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},"/Users/zowan/Documents/web/tect-react/src/index.js",[],["186","187"],"/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js",[],"/Users/zowan/Documents/web/tect-react/src/App.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/index.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js",["188","189","190","191","192","193","194","195","196"],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js",["197","198"],"import { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MainLayout from '../../components/layout/MainLayout';\nimport { readQuestionList } from '../../redux/readPost';\nimport { Link } from 'react-router-dom';\nimport QuestionBlock from '../../components/question/QuestionBlock';\n\nimport { Button } from '../../components/Button';\n\nimport '../../styles/page/question/QuestionListPage.scss';\n\nexport default function QuestionListPage() {\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.questionList;\n  });\n\n  const dispatch = useDispatch();\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n  const getQuestionListAsync = useCallback(() => {\n    dispatch(readQuestionList());\n  }, [dispatch]);\n\n  useEffect(async () => {\n    getQuestionListAsync();\n  }, [dispatch]);\n\n  if (loading)\n    return (\n      <MainLayout>\n        <div>로딩중...</div>\n      </MainLayout>\n    );\n  if (error)\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    );\n\n  if (!data)\n    return (\n      <MainLayout>\n        <div>no data</div>\n      </MainLayout>\n    );\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"questionList-container\">\n          <section>\n            <div className=\"questionList-left\">\n              <div className=\"questionList-left-top\">\n                <div className=\"questionList-title-container\">\n                  <div className=\"questionList-Latest\">최신</div>\n                  {/*인기순 정렬은 나중에 추가하자*/}\n                  {/*<div className=\"questionList-popular\">인기</div>*/}\n                </div>\n                <Link to={'/question/write'} className=\"ask-btn-container\">\n                  <Button className=\"ask-btn\" buttonStyle=\"btn--outline\">\n                    질문하기\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"questionList\">\n                {data\n                  ? data.map((element) => {\n                      return (\n                        <QuestionBlock\n                          key={\n                            element.questionBody.postID\n                              ? element.questionBody.postID\n                              : element.questionBody.questionID\n                          }\n                          question={element}\n                        />\n                      );\n                    })\n                  : ''}\n              </div>\n            </div>\n          </section>\n          <section>\n            <div className=\"questionList-right\">\n              <div className=\"questionList-right-title\">Trending Tags</div>\n            </div>\n          </section>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js",["199"],"import React from 'react';\nimport MainLayout from '../../components/layout/MainLayout';\nimport \"../../styles/page/user/ProfilePage.scss\"\n\nexport default function ProfilePage({ match }) {\n  const { userUID } = match.params;\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"profile-container\">\n          <div className=\"profile-upside\">\n            <div className=\"profile-photo\">\n              <img src=\"https://media.vlpt.us/images/ghkdwltjq98/profile/b7b493c6-69ef-4886-aec6-16d03800306e/social.png?w=120\"/> \n            </div>\n            <div className=\"intro-container\">\n              <div>{userUID} 닉네임</div>\n              <div>이메일</div>\n              <div>연락처</div>\n              <div>가입일시</div>\n              <div>마지막 접속일</div>\n              <div>인증 연동</div>\n              <div>포인트</div>\n            </div>\n          </div>\n          <div className=\"profile-downside\">\n            <div className=\"profile-card\">Questions (0)</div>\n            <div className=\"profile-card\">Answers (0)</div>\n            <div className=\"profile-card\">Free Posts (0)</div>\n          </div>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js",["200","201"],"import { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { readQuestionByUID } from '../../redux/readPost';\nimport MainLayout from '../../components/layout/MainLayout';\nimport QuestionSection from '../../components/question/QuestionSection';\nimport AnswerSection from '../../components/question/AnswerSection';\n\n//import WriteBlock from '../../components/WriteBlock';\n\nexport default function QuestionDetailPage({ match }) {\n  const questionID = match.params.questionID;\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.question;\n  });\n\n  const dispatch = useDispatch();\n\n  const getQuestionAsync = useCallback(() => {\n    dispatch(readQuestionByUID(questionID));\n  }, [dispatch]);\n\n  useEffect(() => {\n    getQuestionAsync();\n  }, [dispatch]);\n\n  if (loading)\n    return (\n      <MainLayout>\n        <div>로딩중...</div>\n      </MainLayout>\n    );\n\n  if (error) {\n    console.log(error);\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    );\n  }\n  if (!data)\n    return (\n      <>\n        <MainLayout>no data</MainLayout>\n      </>\n    );\n  return (\n    <>\n      <MainLayout>\n        <div>params: {questionID}</div>\n        <div>authorID: {data.question.questionBody.authorID}</div>\n        <QuestionSection data={data} />\n        <AnswerSection data={data} />\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/auth.js",["202","203"],"// define ACTION type\n\nconst LOG_IN_TRY = 'auth/LOG_IN_TRY';\nconst LOG_IN_SUCCESS = 'auth/LOG_IN_SUCCESS';\nconst LOG_IN_FAIL = 'auth/LOG_IN_FAIL';\nconst CREATE_USER_SUCCESS = 'auth/CREATE_USER_SUCCESS';\n\nconst initialState = { loginState: false, userInfo: {} };\n\n// 액션타입을 redux 파일 안에 정의하고, 정의한 액션타입을 다른 파일에서 사용하기 위해\n// 액션 생성함수를 정의하고, 생성함수를 export 할 것이다.\nexport const loginSuccess = () => {\n  return { type: LOG_IN_SUCCESS };\n};\n\n// 1초 뒤에 loginSuccess() 를 디스패치 한다. 딜레이된 로그인석세스를 디스패치->다시한번 로그인석세스를 1초뒤 디스패치.\nexport const loginSuccessDelayed = () => (dispatch) => {\n  setTimeout(() => {\n    dispatch(loginSuccess());\n  }, 1000);\n};\n\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case LOG_IN_SUCCESS:\n      return {\n        userInfo: { userNickname: 'testname', userUID: 'qwerasdfzxcvnmvclkjh' },\n        loginState: true,\n      };\n    case LOG_IN_FAIL:\n      return {\n        ...state,\n        loginState: false,\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/post.js",["204"],"// postingAPI.함수이름 으로 사용하게 모든 함수를 임포트(import * as postingAPI)\nimport * as dummyAPI from '../lib/dummyAPI';\nimport axios from 'axios';\n\nconst initialState = {\n  posts: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n  post: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n};\n\n// action types\nconst GET_POSTS_TRY = 'post/GET_POSTS_TRY';\nconst GET_POSTS_SUCCESS = 'post/GET_POSTS_SUCCESS';\nconst GET_POSTS_FAIL = 'post/GET_POSTS_FAIL';\n\nconst GET_POST_TRY = 'post/GET_POST_TRY';\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nconst GET_POST_FAIL = 'post/GET_POST_FAIL';\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\nexport const getPosts = () => async (dispatch) => {\n  dispatch({ type: GET_POSTS_TRY }); // 요청이 시작됨\n  try {\n    const res = await axios.get('/posts'); //api 요청을 보내고, 성공하면 성공에 대한 타입을 dispatch. 에러가 발생하면 에러에 대한 dispatch\n    // 디버깅을 위해 setTimeout 을 설정해뒀다.\n    setTimeout(() => {\n      dispatch({ type: GET_POSTS_SUCCESS, posts: res.data });\n    }, 500);\n  } catch (e) {\n    dispatch({ type: GET_POSTS_FAIL, error: e });\n  }\n};\n\nexport const getPostById = (id) => async (dispatch) => {\n  dispatch({ type: GET_POST_TRY });\n  try {\n    const res = await axios.get(`/posts/${id}`);\n    console.log('res.data: ', res.data);\n    setTimeout(() => {\n      dispatch({ type: GET_POST_SUCCESS, post: res.data });\n    }, 500);\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: GET_POST_FAIL, error: e });\n  }\n};\n\nexport default function post(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS_TRY:\n      return {\n        ...state,\n        posts: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: action.posts,\n          error: null,\n        },\n      };\n    case GET_POSTS_FAIL:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n\n    case GET_POST_TRY:\n      return {\n        ...state,\n        post: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POST_SUCCESS:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: action.post,\n          error: null,\n        },\n      };\n    case GET_POST_FAIL:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n",["205","206"],"/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/createPost.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js",["207","208","209","210","211","212"],"import React from 'react';\nimport MainLayout from '../components/layout/MainLayout';\nimport '../styles/page/HomePage.scss'\n\nimport ForceGraph from '../components/home/ForceGraph';\nimport SubjectBlock from '../components/home/SubjectBlock';\nimport { dummyTechtree } from '../lib/dummyTechtree';\n\nexport default function HomePage() {\n  return (\n    <>\n      <MainLayout>\n        <div className=\"homepage-container\">\n          <main className=\"techtree-container\">\n            <ForceGraph techtreeData={dummyTechtree.cs} category={'cs'} />\n          </main>\n          <aside className=\"subjects-sidebar\">\n            <div\n              onClick={() => {\n                console.log('physics clicked');\n              }}\n              className=\"block\"\n            >\n              <SubjectBlock\n                iconSize=\"70\"\n                url=\"physics\"\n                displayedName=\"physics\"\n              />\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/math.svg\"\n                alt=\"mathematicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              Mathematics\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/economics.svg\"\n                alt=\"economicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              economics\n            </div>\n\n            <div\n              onClick={() => {\n                console.log('cs clicked');\n              }}\n              className=\"block\"\n            >\n              <img src=\"/icons/computer.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Computer Science\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/chemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Chemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/biochemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Biochemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/russia.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Russia\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/electricity.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Electrical Engineering\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/earth.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Earth System\n            </div>\n          </aside>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js",[],"/Users/zowan/Documents/web/tect-react/src/components/Button.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js",["213","214","215","216"],"import React, { useEffect, useCallback } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createAnswer } from '../../redux/createPost';\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock';\n\nexport default function AnswerWriteBlock({ questionUID }) {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  const [content, onChangeContent] = useInput();\n\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n\n      formData.append('contentType', 'answer');\n      formData.append('postID', questionUID);\n      formData.append('answerID', uid24);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createAnswer(formData));\n    },\n    [content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label for=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <MarkdownRenderingBlock content={content} />\n        </div>\n        <div class=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n",["217","218"],"/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js",["219","220","221","222","223","224"],"import React from 'react';\nimport * as d3 from 'd3';\nimport styles from '../../styles/Techtree.module.css';\n\nexport default function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null);\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`;\n  };\n\n  React.useEffect(() => {\n    let destroyFn;\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      );\n      destroyFn = destroy;\n    }\n\n    return destroyFn;\n  }, []);\n\n  return <div ref={containerRef} className={styles.container} />;\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n  const links = techtreeData.links.map((d) => Object.assign({}, d));\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d));\n\n  const containerRect = container.getBoundingClientRect();\n  const height = 1000; //containerRect.height;\n  const width = 900; //containerRect.width;\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width]);\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height]);\n\n  //const circleColor = () => { return \"#fff\"; };\n  //const circleFill = \"#fff\"\n  const circleSelctedFill = '#00bebe';\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\n  function getRandom00BEBE() {\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe'];\n    const colorSet2 = [\n      '#66b7ce',\n      '#00bebe',\n      'rgb(0, 170, 170)',\n      'rgb(0, 140, 190)',\n      'rgb(0, 190, 170)',\n    ];\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001);\n    return colorSet2[randomFactor];\n    //return linear-gradient(135deg, orange 60%, cyan)\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\n  }\n  const circleStrokeColor1 = getRandom00BEBE(); //\"#94D7FF\"\n  const circleStrokeColor2 = getRandom00BEBE(); //\"#5DE87C\"\n  const circleStrokeColor3 = getRandom00BEBE(); //\"#FFF872\"\n  const circleStrokeColor4 = getRandom00BEBE(); //\"#FF669A\"\n\n  const drag = (simulation) => {\n    const dragstarted = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (d) => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    };\n\n    const dragended = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      'link',\n      d3.forceLink(links).id((d) => d.id)\n    )\n    .force('charge', d3.forceManyBody().strength(-1050))\n    .force('link', d3.forceLink(links).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY());\n\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed);\n\n  const svg = d3\n    .select(container)\n    .call(zoom)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75]);\n\n  var x2 = xScale.copy(); // reference.\n  var y2 = yScale.copy();\n\n  function zoomed() {\n    xScale = d3.event.transform.rescaleX(x2);\n    yScale = d3.event.transform.rescaleY(y2);\n    tick();\n  }\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', '#999')\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis');\n\n  const link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d) => {\n      return `link${d.index}`;\n    })\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)');\n\n  const node = svg\n    .append('g')\n    .attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    //.attr('class',(d)=>{return `${d.name}`})\n    .attr('class', (d) => {\n      return `node${d.index}`;\n    })\n    .attr('r', 30)\n    .style('fill', function (d) {\n      return getRandom00BEBE();\n    })\n    .style('stroke', '#fff')\n    .call(drag(simulation));\n\n  function matchColorForGroup(d) {\n    switch (d.group) {\n      case 1:\n        return circleStrokeColor1;\n      case 2:\n        return circleStrokeColor2;\n      case 3:\n        return circleStrokeColor3;\n      case 4:\n        return circleStrokeColor4;\n      default:\n        return '#00bebe';\n    }\n  }\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.index;\n    })\n    //.attr(\"class\", )\n    .text((d) => {\n      return d.label;\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(drag(simulation));\n\n  // Add the tooltip element to the graph\n  const tooltip = d3.select(container).append('div');\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    //  tooltip // tooltip is just div. how add transition?\n    //  .transition()\n    //    .duration(200)\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x + 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', 0.99);\n  };\n\n  const removeTooltip = () => {\n    tooltip\n      //  .transition()\n      //  .duration(200)\n      .style('opacity', 0);\n  };\n\n  node\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      node.style('cursor', 'pointer');\n    })\n    .on('mouseout', (d) => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n      //  container.querySelectorAll('circle').forEach((element)=>{\n      //  element.style.fill=matchColorForGroup(element)\n      //  })\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  label\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      label.style('cursor', 'pointer');\n    })\n    .on('mouseout', () => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2');\n    link.style('opacity', '0.1');\n    //const displayedNodes = []\n    //const displayedLinks = []\n\n    links.map((linkElement) => {\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\n      if (linkElement.source.id === selectedNode.id) {\n        //selectedNode.style(\"opacity\" ,\"0.1\")\n        container.querySelector(\n          `circle.node${linkElement.target.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.target.id])\n        //console.log(\"to: \",nodes[linkElement.target.id])\n      } else if (linkElement.target.id === selectedNode.id) {\n        container.querySelector(\n          `circle.node${linkElement.source.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.source.id])\n        //console.log(\"from: \",nodes[linkElement.source.id])\n      } else {\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n      }\n      //console.log(displayedNodes)\n      //displayedNodes.map((element)=>{\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\n      //node.select(element).style('opacity',\"1\")\n      //})\n\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\n      // dom 트리상의 문제가 없음.\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\n    });\n  }\n\n  function tick() {\n    //update link positions\n    link\n      .attr('x1', function (d) {\n        return xScale(d.source.x);\n      })\n      .attr('y1', function (d) {\n        return yScale(d.source.y);\n      })\n      .attr('x2', function (d) {\n        return xScale(d.target.x);\n      })\n      .attr('y2', function (d) {\n        return yScale(d.target.y);\n      });\n\n    // update node positions\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y));\n\n    // update label positions\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y));\n  }\n\n  simulation.on('tick', tick);\n\n  return {\n    destroy: () => {\n      simulation.stop();\n    },\n    nodes: () => {\n      return svg.node();\n    },\n  };\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/Header.js",["225","226","227","228","229","230","231"],"import React, { useState, useCallback } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loginSuccess, loginSuccessDelayed } from '../../redux/auth';\nimport '../../styles/layout/Header.scss';\nimport { FaTimes, FaBars } from 'react-icons/fa';\n\nimport { LoginModal } from './LoginModal';\n\nexport default function Header() {\n  // useSelector: 리덕스 스토어의 상태를 조회하는 hooks.\n  // state 의 값은 리덕스 스토에다가 getState() 를 호출했을때 나오는 값과 같음.\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.user };\n  });\n\n  // useDispatch : 리덕스 스토어의 dispatch 를 함수에서 쓸 수 있게 해주는 hooks.\n  const dispatch = useDispatch();\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n  const onLogin = useCallback(() => {\n    dispatch(loginSuccessDelayed());\n  }, [dispatch]);\n\n  const [menuClick, setMenuClick] = useState(false);\n\n  const handleMenuClick = () => setMenuClick(!menuClick);\n  const closeMobileMenu = () => setMenuClick(false);\n\n  const [isAuth, setIsAuth] = useState(true);\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <div className=\"logo-container\">\n          <NavLink to=\"/\" className=\"logo\">\n            Tect.dev\n          </NavLink>\n        </div>\n        <div className=\"menu-icon\" onClick={handleMenuClick}>\n          {menuClick ? <FaTimes /> : <FaBars />}\n        </div>\n        <nav className=\"navbar\">\n          <ul\n            className={\n              menuClick ? 'navbar-container clicked' : 'navbar-container'\n            }\n          >\n            <li className=\"navbar-item\">\n              <NavLink to=\"/question\" className=\"navbar-item-link\">\n                Q {`\\&`} A\n              </NavLink>\n            </li>\n            <li className=\"navbar-item\">\n              <NavLink to=\"/article\" className=\"navbar-item-link\">\n                Article\n              </NavLink>\n            </li>\n            <li className=\"navbar-item\">\n              <NavLink to=\"/freeboard\" className=\"navbar-item-link\">\n                Freeboard\n              </NavLink>\n            </li>\n            <div className=\"header-search\">\n              <input className=\"header-search-input\" placeholder=\"Search...\" />\n            </div>\n            <div className=\"auth-container\">\n              {loginState ? (\n                <div className=\"mypage-container\">\n                  <NavLink to=\"/mypage\" className=\"navbar-item-link\">\n                    MyPage\n                  </NavLink>\n                </div>\n              ) : (\n                <div className=\"login-container\">\n                  <input\n                    className=\"login-modal-input\"\n                    type=\"checkbox\"\n                    id=\"login-popup\"\n                  />\n                  <label htmlFor=\"login-popup\" className=\"login-modal-btn\">\n                    Login\n                  </label>\n                  <LoginModal labelFor=\"login-popup\" />\n                </div>\n              )}\n            </div>\n          </ul>\n        </nav>\n      </div>\n    </header>\n    // <>\n    //   <nav className=\"navbar\">\n    //     <div className=\"nav-container\">\n    //       <Link to=\"/\" className=\"navbar-logo\">\n    //         Tect.dev\n    //       </Link>\n    //       <div className=\"menu-icon\" onClick={handleMenuClick}>\n    //         {menuClick ? <FaTimes /> : <FaBars />}\n    //       </div>\n    //       <ul className={menuClick ? 'nav-menu active' : 'nav-menu'}>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/question\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             QnA\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/article\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             Article\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/freeboard\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             Freeboard\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\" id=\"input-container\">\n    //           <div className=\"input-container\">\n    //             <input />\n    //           </div>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           {loginState ? (\n    //             <Link\n    //               to=\"/user/userID\"\n    //               className=\"nav-links\"\n    //               onClick={closeMobileMenu}\n    //             >\n    //               MyPage\n    //             </Link>\n    //           ) : (\n    //             <div className=\"nav-btns\">\n    //               <Button buttonStyle=\"btn--outline\">Login</Button>\n    //             </div>\n    //           )}\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <button onClick={onLogin}>임시 로그인 테스트용 버튼</button>\n    //         </li>\n    //       </ul>\n    //     </div>\n    //   </nav>\n    // </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js",["232"],"import { Link } from 'react-router-dom';\nimport '../../styles/layout/Footer.scss';\n\nexport default function Footer() {\n  return (\n    <>\n      <footer className=\"footer\">\n        <div className=\"footer-container\">\n          {/* <div>기업 푸터</div>\n          <div>일반: 전화번호, 이메일, 계좌정보 </div>\n          <div>고객센터 : 전화, 팩스, 이메일, 카카오톡ID(혹은 링크) 상담가능 일시</div>\n          <div>법인 : 상호, 대표, 주소, 개인정보관리 책임자, 사업자 등록번호, 통신판매업 신고</div>\n          <div> 계좌번호 목록</div>\n          <div>회사소개, 개인정보보호정책/처리방침, 이용약관, 사이트맵</div>\n          <div>SNS 링크</div>\n          <div>별도의 Contact us도 필요한가</div> */}\n          footer\n        </div>\n      </footer>\n      {/* <ul>\n        <li className=\"nav-item\">\n          <Link to=\"/about\" className=\"nav-links\">\n            About Tect.dev\n          </Link>\n        </li>\n      </ul> */}\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/functions.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/katexWhiteList.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/prismPlugin.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/prismThemes.js",[],"/Users/zowan/Documents/web/tect-react/src/components/MarkdownRenderingBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/MarkdownEditorBlock.js",["233","234","235","236","237","238"],"/Users/zowan/Documents/web/tect-react/src/redux/write.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionSection.js",["239","240","241","242","243","244","245"],"import { useState, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock';\nimport CommentListBlock from '../CommentListBlock';\nimport MarkdownEditorBlock from '../MarkdownEditorBlock';\nimport { uid } from 'uid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  deleteQuestion,\n  deleteAnswer,\n  deleteComment,\n} from '../../redux/deletePost';\nexport default function QuestionSection({ data }) {\n  const [content, setContent] = useState('');\n\n  function onChangeContent(e) {\n    setContent(e.target.value);\n  }\n\n  const dispatch = useDispatch();\n\n  const deleteQuestion = useCallback(() => {\n    //alert('정말 삭제합니까?');\n    dispatch(deleteQuestion(data.question._id));\n    window.location.href = `/question/`;\n  }, [dispatch]);\n  function deleteComment() {\n    alert('정말 삭제합니까?');\n  }\n\n  const onSubmitComment = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (!content) {\n        return;\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'question');\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n\n      //dispatch(createQuestion(formData));\n    },\n    [content]\n  );\n\n  return (\n    <>\n      <div className=\"title\">Title: {data.question.questionBody.title}</div>\n      <div className=\"content\">\n        <MarkdownRenderingBlock content={data.question.questionBody.content} />\n      </div>\n      <div className=\"hashtags\">\n        {data.question.questionBody.hashtags.map((tag, index) => {\n          return (\n            <div key={index}>\n              해시태그{index}: {tag}\n            </div>\n          );\n        })}\n      </div>\n      <button>\n        <Link to={`/question/edit/${data.question._id}`}>\n          question 수정하기\n        </Link>\n      </button>\n      <button onClick={deleteQuestion}>question 삭제하기</button>\n      {/*<CommentListBlock commentList={question.comments} />*/}\n\n      <MarkdownEditorBlock\n        initialContent={''}\n        onChangeContentProps={onChangeContent}\n      />\n      <button onClick={onSubmitComment}>question 에 댓글달기</button>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerSection.js",["246"],"import { useState } from 'react';\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock';\nimport CommentListBlock from '../CommentListBlock';\nimport MarkdownEditorBlock from '../MarkdownEditorBlock';\nimport { createAnswer } from '../../redux/createPost';\nimport { useDispatch } from 'react-redux';\nimport { uid } from 'uid';\n\nexport default function AnswerSection({ data }) {\n  const [content, setContent] = useState('');\n  const dispatch = useDispatch();\n\n  function onChangeContent(e) {\n    setContent(e.target.value);\n  }\n\n  function addAnswer(e) {\n    e.preventDefault();\n    if (!content) {\n      return alert('게시글을 작성하세요.');\n    }\n    const formData = new FormData();\n    const uid24 = uid(24);\n    formData.append('contentType', 'answer');\n    formData.append('postID', data.question._id);\n    formData.append('answerID', uid24);\n    formData.append('content', content);\n    formData.append('authorNickname', '임시닉네임');\n    formData.append('authorID', '123456789012345678901234');\n\n    dispatch(createAnswer(formData));\n  }\n\n  return (\n    <>\n      {data.answers.map((element, index) => {\n        return (\n          <div key={index}>\n            <div className=\"content\">\n              answer{index}\n              <MarkdownRenderingBlock content={element.answerBody.content} />\n            </div>\n\n            {/* <CommentListBlock commentList={element.answerBody.comments} /> */}\n            <MarkdownEditorBlock />\n            <button>answer에 댓글달기</button>\n          </div>\n        );\n      })}\n\n      <MarkdownEditorBlock\n        className=\"answerWrite\"\n        onChangeContentProps={onChangeContent}\n      />\n      <button onClick={addAnswer}>answer 추가하기</button>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/CommentListBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteSection.js",["247","248","249","250","251"],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionEditPage.js",["252","253","254","255","256","257","258","259"],"import React, { useEffect, useCallback, useState } from 'react';\nimport { useInput } from '../../hooks/hooks';\nimport MainLayout from '../../components/layout/MainLayout';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MarkdownRenderingBlock from '../../components/MarkdownRenderingBlock';\nimport QuestionWriteSection from '../../components/question/QuestionWriteSection';\nimport { uid } from 'uid';\n\nexport default function QuestionWritePage({ history }) {\n  const { data, content } = useSelector((state) => {\n    return {\n      data: state.readPost.question.data,\n      content: state.createPost.content,\n    };\n  });\n  //useEffect(() => {\n  //  return () => {\n  //    history.block('페이지를 떠나시는건가요?');\n  //  };\n  //}, [history]);\n\n  const [title, onChangeTitle] = useInput(data.question.questionBody.title);\n\n  const [hashtagText, setHashtagText] = useState('');\n  const [hashtagList, setHashtagList] = useState([]);\n\n  const splitPoint = /\\,/g;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (hashtagList.length > 10) {\n      setHashtagText(hashtagText.substr(0, hashtagText.length - 1));\n      hashtagList.pop();\n      alert('태그의 갯수가 너무 많아요!');\n    }\n  }, [hashtagList]);\n  const onChangeHashtagText = useCallback(\n    (e) => {\n      setHashtagText(e.target.value);\n      let splitedArray = e.target.value.split(splitPoint);\n      const editedArray = splitedArray\n        .map((element) => {\n          return element.replace(/[^가-힣|a-z|A-Z|0-9]/g, '');\n        })\n        .filter((string) => string.length > 0);\n\n      setHashtagList(editedArray);\n    },\n    [hashtagText]\n  );\n\n  const onSubmitForm = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (!title || !content) {\n        return alert('제목과 본문을 작성해 주세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'question');\n      formData.append('title', title);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      // 해시태그는 띄어쓰기 없이, 전부 소문자로, 특수문자없이 서버단으로 보낸다.\n      // 클라이언트에서 사용자의 입력은 자유롭게 받되, 서버로 보낼때 문자열을 다듬어서 보내준다.\n      formData.append('hashtags', hashtagList);\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n\n      // 여기서 디스패치 하는 함수를, 상위 컴포넌트에서 props 로 받아오게 하자.\n      // 그래야지 question, article 등등 범용성있게 쓸수있음.\n      // props 로 받아온 타입에서, 타입따라 코드가 조금씩 달라지게 해야할듯. 리턴쪽에서.\n    },\n    [title, content]\n  );\n\n  return (\n    <MainLayout>\n      <section>\n        <QuestionWriteSection initialContent={data.question} />\n      </section>\n      <section>\n        <div id=\"preview\">\n          <div>Preview</div>\n          <MarkdownRenderingBlock content={content} />\n        </div>\n      </section>\n    </MainLayout>\n  );\n}\n",{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":26},{"ruleId":"264","severity":1,"message":"268","line":1,"column":28,"nodeType":"266","messageId":"267","endLine":1,"endColumn":39},{"ruleId":"264","severity":1,"message":"269","line":1,"column":41,"nodeType":"266","messageId":"267","endLine":1,"endColumn":49},{"ruleId":"264","severity":1,"message":"270","line":2,"column":10,"nodeType":"266","messageId":"267","endLine":2,"endColumn":16},{"ruleId":"264","severity":1,"message":"271","line":3,"column":10,"nodeType":"266","messageId":"267","endLine":3,"endColumn":18},{"ruleId":"264","severity":1,"message":"272","line":5,"column":10,"nodeType":"266","messageId":"267","endLine":5,"endColumn":21},{"ruleId":"264","severity":1,"message":"273","line":5,"column":23,"nodeType":"266","messageId":"267","endLine":5,"endColumn":34},{"ruleId":"264","severity":1,"message":"274","line":6,"column":8,"nodeType":"266","messageId":"267","endLine":6,"endColumn":30},{"ruleId":"264","severity":1,"message":"275","line":8,"column":10,"nodeType":"266","messageId":"267","endLine":8,"endColumn":13},{"ruleId":"276","severity":1,"message":"277","line":25,"column":13,"nodeType":"278","endLine":27,"endColumn":4},{"ruleId":"276","severity":1,"message":"279","line":27,"column":6,"nodeType":"280","endLine":27,"endColumn":16,"suggestions":"281"},{"ruleId":"282","severity":1,"message":"283","line":14,"column":15,"nodeType":"284","endLine":14,"endColumn":130},{"ruleId":"276","severity":1,"message":"285","line":20,"column":6,"nodeType":"280","endLine":20,"endColumn":16,"suggestions":"286"},{"ruleId":"276","severity":1,"message":"287","line":24,"column":6,"nodeType":"280","endLine":24,"endColumn":16,"suggestions":"288"},{"ruleId":"264","severity":1,"message":"289","line":3,"column":7,"nodeType":"266","messageId":"267","endLine":3,"endColumn":17},{"ruleId":"264","severity":1,"message":"290","line":6,"column":7,"nodeType":"266","messageId":"267","endLine":6,"endColumn":26},{"ruleId":"264","severity":1,"message":"291","line":2,"column":13,"nodeType":"266","messageId":"267","endLine":2,"endColumn":21},{"ruleId":"260","replacedBy":"292"},{"ruleId":"262","replacedBy":"293"},{"ruleId":"282","severity":1,"message":"283","line":59,"column":15,"nodeType":"284","endLine":59,"endColumn":71},{"ruleId":"282","severity":1,"message":"283","line":65,"column":15,"nodeType":"284","endLine":65,"endColumn":72},{"ruleId":"282","severity":1,"message":"283","line":71,"column":15,"nodeType":"284","endLine":71,"endColumn":75},{"ruleId":"282","severity":1,"message":"283","line":77,"column":15,"nodeType":"284","endLine":77,"endColumn":69},{"ruleId":"282","severity":1,"message":"283","line":83,"column":15,"nodeType":"284","endLine":83,"endColumn":74},{"ruleId":"282","severity":1,"message":"283","line":89,"column":15,"nodeType":"284","endLine":89,"endColumn":68},{"ruleId":"264","severity":1,"message":"265","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":26},{"ruleId":"264","severity":1,"message":"294","line":10,"column":11,"nodeType":"266","messageId":"267","endLine":10,"endColumn":21},{"ruleId":"264","severity":1,"message":"295","line":10,"column":23,"nodeType":"266","messageId":"267","endLine":10,"endColumn":31},{"ruleId":"276","severity":1,"message":"296","line":43,"column":5,"nodeType":"280","endLine":43,"endColumn":14,"suggestions":"297"},{"ruleId":"260","replacedBy":"298"},{"ruleId":"262","replacedBy":"299"},{"ruleId":"276","severity":1,"message":"300","line":29,"column":6,"nodeType":"280","endLine":29,"endColumn":8,"suggestions":"301"},{"ruleId":"264","severity":1,"message":"302","line":39,"column":9,"nodeType":"266","messageId":"267","endLine":39,"endColumn":22},{"ruleId":"264","severity":1,"message":"303","line":48,"column":9,"nodeType":"266","messageId":"267","endLine":48,"endColumn":26},{"ruleId":"264","severity":1,"message":"304","line":52,"column":11,"nodeType":"266","messageId":"267","endLine":52,"endColumn":20},{"ruleId":"264","severity":1,"message":"305","line":171,"column":12,"nodeType":"266","messageId":"267","endLine":171,"endColumn":30},{"ruleId":"306","severity":1,"message":"307","line":267,"column":29,"nodeType":"278","messageId":"308","endLine":267,"endColumn":31},{"ruleId":"264","severity":1,"message":"309","line":4,"column":10,"nodeType":"266","messageId":"267","endLine":4,"endColumn":22},{"ruleId":"264","severity":1,"message":"295","line":13,"column":23,"nodeType":"266","messageId":"267","endLine":13,"endColumn":31},{"ruleId":"264","severity":1,"message":"310","line":22,"column":9,"nodeType":"266","messageId":"267","endLine":22,"endColumn":16},{"ruleId":"264","severity":1,"message":"311","line":29,"column":9,"nodeType":"266","messageId":"267","endLine":29,"endColumn":24},{"ruleId":"264","severity":1,"message":"312","line":31,"column":10,"nodeType":"266","messageId":"267","endLine":31,"endColumn":16},{"ruleId":"264","severity":1,"message":"313","line":31,"column":18,"nodeType":"266","messageId":"267","endLine":31,"endColumn":27},{"ruleId":"314","severity":1,"message":"315","line":52,"column":21,"nodeType":"316","messageId":"317","endLine":52,"endColumn":22,"suggestions":"318"},{"ruleId":"264","severity":1,"message":"319","line":1,"column":10,"nodeType":"266","messageId":"267","endLine":1,"endColumn":14},{"ruleId":"264","severity":1,"message":"268","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":28},{"ruleId":"264","severity":1,"message":"265","line":1,"column":30,"nodeType":"266","messageId":"267","endLine":1,"endColumn":39},{"ruleId":"264","severity":1,"message":"269","line":1,"column":41,"nodeType":"266","messageId":"267","endLine":1,"endColumn":49},{"ruleId":"264","severity":1,"message":"272","line":2,"column":10,"nodeType":"266","messageId":"267","endLine":2,"endColumn":21},{"ruleId":"264","severity":1,"message":"273","line":2,"column":23,"nodeType":"266","messageId":"267","endLine":2,"endColumn":34},{"ruleId":"264","severity":1,"message":"320","line":3,"column":10,"nodeType":"266","messageId":"267","endLine":3,"endColumn":22},{"ruleId":"264","severity":1,"message":"321","line":4,"column":8,"nodeType":"266","messageId":"267","endLine":4,"endColumn":24},{"ruleId":"264","severity":1,"message":"272","line":7,"column":10,"nodeType":"266","messageId":"267","endLine":7,"endColumn":21},{"ruleId":"264","severity":1,"message":"322","line":9,"column":3,"nodeType":"266","messageId":"267","endLine":9,"endColumn":17},{"ruleId":"264","severity":1,"message":"323","line":10,"column":3,"nodeType":"266","messageId":"267","endLine":10,"endColumn":15},{"ruleId":"264","severity":1,"message":"324","line":11,"column":3,"nodeType":"266","messageId":"267","endLine":11,"endColumn":16},{"ruleId":"276","severity":1,"message":"325","line":26,"column":6,"nodeType":"280","endLine":26,"endColumn":16,"suggestions":"326"},{"ruleId":"264","severity":1,"message":"324","line":27,"column":12,"nodeType":"266","messageId":"267","endLine":27,"endColumn":25},{"ruleId":"264","severity":1,"message":"321","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":24},{"ruleId":"264","severity":1,"message":"272","line":4,"column":10,"nodeType":"266","messageId":"267","endLine":4,"endColumn":21},{"ruleId":"314","severity":1,"message":"327","line":16,"column":23,"nodeType":"328","messageId":"317","endLine":16,"endColumn":24,"suggestions":"329"},{"ruleId":"276","severity":1,"message":"330","line":29,"column":6,"nodeType":"280","endLine":29,"endColumn":19,"suggestions":"331"},{"ruleId":"276","severity":1,"message":"332","line":44,"column":5,"nodeType":"280","endLine":44,"endColumn":18,"suggestions":"333"},{"ruleId":"276","severity":1,"message":"334","line":81,"column":5,"nodeType":"280","endLine":81,"endColumn":34,"suggestions":"335"},{"ruleId":"264","severity":1,"message":"336","line":22,"column":17,"nodeType":"266","messageId":"267","endLine":22,"endColumn":30},{"ruleId":"314","severity":1,"message":"327","line":27,"column":23,"nodeType":"328","messageId":"317","endLine":27,"endColumn":24,"suggestions":"337"},{"ruleId":"264","severity":1,"message":"338","line":29,"column":9,"nodeType":"266","messageId":"267","endLine":29,"endColumn":17},{"ruleId":"276","severity":1,"message":"330","line":37,"column":6,"nodeType":"280","endLine":37,"endColumn":19,"suggestions":"339"},{"ruleId":"264","severity":1,"message":"340","line":38,"column":9,"nodeType":"266","messageId":"267","endLine":38,"endColumn":28},{"ruleId":"276","severity":1,"message":"341","line":50,"column":5,"nodeType":"280","endLine":50,"endColumn":18,"suggestions":"342"},{"ruleId":"264","severity":1,"message":"343","line":53,"column":9,"nodeType":"266","messageId":"267","endLine":53,"endColumn":21},{"ruleId":"276","severity":1,"message":"344","line":83,"column":5,"nodeType":"280","endLine":83,"endColumn":21,"suggestions":"345"},"no-native-reassign",["346"],"no-negated-in-lhs",["347"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'useState' is defined but never used.","'Prompt' is defined but never used.","'useInput' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'MarkdownRenderingBlock' is defined but never used.","'uid' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'getQuestionListAsync'. Either include it or remove the dependency array.","ArrayExpression",["348"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useCallback has a missing dependency: 'questionID'. Either include it or remove the dependency array.",["349"],"React Hook useEffect has a missing dependency: 'getQuestionAsync'. Either include it or remove the dependency array.",["350"],"'LOG_IN_TRY' is assigned a value but never used.","'CREATE_USER_SUCCESS' is assigned a value but never used.","'dummyAPI' is defined but never used.",["346"],["347"],"'loginState' is assigned a value but never used.","'userInfo' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'questionUID'. Either include them or remove the dependency array.",["351"],["346"],["347"],"React Hook React.useEffect has missing dependencies: 'category' and 'techtreeData'. Either include them or remove the dependency array.",["352"],"'containerRect' is assigned a value but never used.","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'loginSuccess' is defined but never used.","'onLogin' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","'isAuth' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\&.","TemplateElement","unnecessaryEscape",["353","354"],"'Link' is defined but never used.","'writeContent' is defined but never used.","'CommentListBlock' is defined but never used.","'deleteQuestion' is defined but never used.","'deleteAnswer' is defined but never used.","'deleteComment' is defined but never used.","React Hook useCallback has a missing dependency: 'data.question._id'. Either include it or remove the dependency array.",["355"],"Unnecessary escape character: \\,.","Literal",["356","357"],"React Hook useEffect has a missing dependency: 'hashtagText'. Either include it or remove the dependency array. You can also do a functional update 'setHashtagText(h => ...)' if you only need 'hashtagText' in the 'setHashtagText' call.",["358"],"React Hook useCallback has missing dependencies: 'hashtagList' and 'splitPoint'. Either include them or remove the dependency array.",["359"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["360"],"'onChangeTitle' is assigned a value but never used.",["361","362"],"'dispatch' is assigned a value but never used.",["363"],"'onChangeHashtagText' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'splitPoint'. Either include it or remove the dependency array.",["364"],"'onSubmitForm' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'hashtagList'. Either include it or remove the dependency array.",["365"],"no-global-assign","no-unsafe-negation",{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"messageId":"376","fix":"377","desc":"378"},{"messageId":"379","fix":"380","desc":"381"},{"desc":"382","fix":"383"},{"messageId":"376","fix":"384","desc":"378"},{"messageId":"379","fix":"385","desc":"381"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"messageId":"376","fix":"392","desc":"378"},{"messageId":"379","fix":"393","desc":"381"},{"desc":"386","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},"Update the dependencies array to be: [dispatch, getQuestionListAsync]",{"range":"399","text":"400"},"Update the dependencies array to be: [dispatch, questionID]",{"range":"401","text":"402"},"Update the dependencies array to be: [dispatch, getQuestionAsync]",{"range":"403","text":"404"},"Update the dependencies array to be: [content, dispatch, questionUID]",{"range":"405","text":"406"},"Update the dependencies array to be: [category, techtreeData]",{"range":"407","text":"408"},"removeEscape",{"range":"409","text":"410"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"411","text":"412"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [data.question._id, dispatch]",{"range":"413","text":"414"},{"range":"415","text":"410"},{"range":"416","text":"412"},"Update the dependencies array to be: [hashtagList, hashtagText]",{"range":"417","text":"418"},"Update the dependencies array to be: [hashtagList, splitPoint]",{"range":"419","text":"420"},"Update the dependencies array to be: [title, content, hashtagList, dispatch]",{"range":"421","text":"422"},{"range":"423","text":"410"},{"range":"424","text":"412"},{"range":"425","text":"418"},"Update the dependencies array to be: [splitPoint]",{"range":"426","text":"427"},"Update the dependencies array to be: [title, content, hashtagList]",{"range":"428","text":"429"},[916,926],"[dispatch, getQuestionListAsync]",[760,770],"[dispatch, questionID]",[823,833],"[dispatch, getQuestionAsync]",[1436,1445],"[content, dispatch, questionUID]",[677,679],"[category, techtreeData]",[1817,1818],"",[1817,1817],"\\",[807,817],"[data.question._id, dispatch]",[701,702],[701,701],[1003,1016],"[hashtagList, hashtagText]",[1508,1521],"[hashtagList, splitPoint]",[2674,2703],"[title, content, hashtagList, dispatch]",[957,958],[957,957],[1191,1204],[1594,1607],"[splitPoint]",[2742,2758],"[title, content, hashtagList]"]