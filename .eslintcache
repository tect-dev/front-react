[{"/Users/zowan/Documents/web/tect-react/src/index.js":"1","/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js":"2","/Users/zowan/Documents/web/tect-react/src/redux/index.js":"3","/Users/zowan/Documents/web/tect-react/src/App.js":"4","/Users/zowan/Documents/web/tect-react/src/redux/createPost.js":"5","/Users/zowan/Documents/web/tect-react/src/redux/post.js":"6","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js":"7","/Users/zowan/Documents/web/tect-react/src/redux/auth.js":"8","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js":"9","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js":"10","/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js":"11","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js":"12","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js":"13","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js":"14","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js":"15","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js":"16","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js":"17","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js":"18","/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js":"19","/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js":"20","/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js":"21","/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js":"22","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js":"23","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js":"24","/Users/zowan/Documents/web/tect-react/src/components/Button.js":"25","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteBlock.js":"26","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js":"27","/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js":"28","/Users/zowan/Documents/web/tect-react/src/components/question/MarkdownPreviewBlock.js":"29","/Users/zowan/Documents/web/tect-react/src/components/layout/Header.js":"30","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js":"31","/Users/zowan/Documents/web/tect-react/src/lib/functions.js":"32","/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js":"33"},{"size":1003,"mtime":1609738809560,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1609067299109,"results":"36","hashOfConfig":"35"},{"size":510,"mtime":1609738809563,"results":"37","hashOfConfig":"35"},{"size":1452,"mtime":1610095542615,"results":"38","hashOfConfig":"35"},{"size":3755,"mtime":1610095530864,"results":"39","hashOfConfig":"35"},{"size":2829,"mtime":1609738809564,"results":"40","hashOfConfig":"35"},{"size":157,"mtime":1609738809564,"results":"41","hashOfConfig":"35"},{"size":1192,"mtime":1609738809562,"results":"42","hashOfConfig":"35"},{"size":157,"mtime":1609738809563,"results":"43","hashOfConfig":"35"},{"size":5370,"mtime":1609738809564,"results":"44","hashOfConfig":"35"},{"size":194,"mtime":1610095530860,"results":"45","hashOfConfig":"35"},{"size":199,"mtime":1610095530861,"results":"46","hashOfConfig":"35"},{"size":199,"mtime":1610095530861,"results":"47","hashOfConfig":"35"},{"size":2795,"mtime":1610095530861,"results":"48","hashOfConfig":"35"},{"size":1193,"mtime":1610095530863,"results":"49","hashOfConfig":"35"},{"size":667,"mtime":1610095530863,"results":"50","hashOfConfig":"35"},{"size":2767,"mtime":1610097044942,"results":"51","hashOfConfig":"35"},{"size":1445,"mtime":1610095927514,"results":"52","hashOfConfig":"35"},{"size":1180,"mtime":1609738809560,"results":"53","hashOfConfig":"35"},{"size":10351,"mtime":1610095530860,"results":"54","hashOfConfig":"35"},{"size":348,"mtime":1610095530859,"results":"55","hashOfConfig":"35"},{"size":308,"mtime":1609738809558,"results":"56","hashOfConfig":"35"},{"size":10023,"mtime":1610008978677,"results":"57","hashOfConfig":"35"},{"size":2033,"mtime":1609815053458,"results":"58","hashOfConfig":"35"},{"size":617,"mtime":1610095542615,"results":"59","hashOfConfig":"35"},{"size":2763,"mtime":1610095542616,"results":"60","hashOfConfig":"35"},{"size":1259,"mtime":1610097047635,"results":"61","hashOfConfig":"35"},{"size":1040,"mtime":1610097637793,"results":"62","hashOfConfig":"35"},{"size":1312,"mtime":1609738809559,"results":"63","hashOfConfig":"35"},{"size":5565,"mtime":1610097726270,"results":"64","hashOfConfig":"35"},{"size":250,"mtime":1609249874876,"results":"65","hashOfConfig":"35"},{"size":1349,"mtime":1609738809561,"results":"66","hashOfConfig":"35"},{"size":1905,"mtime":1610095530859,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"xgtey9",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/zowan/Documents/web/tect-react/src/index.js",[],["144","145"],"/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/index.js",[],"/Users/zowan/Documents/web/tect-react/src/App.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/createPost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/post.js",["146"],"// postingAPI.함수이름 으로 사용하게 모든 함수를 임포트(import * as postingAPI)\nimport * as dummyAPI from '../lib/dummyAPI';\nimport axios from 'axios';\n\nconst initialState = {\n  posts: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n  post: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n};\n\n// action types\nconst GET_POSTS_TRY = 'post/GET_POSTS_TRY';\nconst GET_POSTS_SUCCESS = 'post/GET_POSTS_SUCCESS';\nconst GET_POSTS_FAIL = 'post/GET_POSTS_FAIL';\n\nconst GET_POST_TRY = 'post/GET_POST_TRY';\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nconst GET_POST_FAIL = 'post/GET_POST_FAIL';\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\nexport const getPosts = () => async (dispatch) => {\n  dispatch({ type: GET_POSTS_TRY }); // 요청이 시작됨\n  try {\n    const res = await axios.get('/posts'); //api 요청을 보내고, 성공하면 성공에 대한 타입을 dispatch. 에러가 발생하면 에러에 대한 dispatch\n    // 디버깅을 위해 setTimeout 을 설정해뒀다.\n    setTimeout(() => {\n      dispatch({ type: GET_POSTS_SUCCESS, posts: res.data });\n    }, 500);\n  } catch (e) {\n    dispatch({ type: GET_POSTS_FAIL, error: e });\n  }\n};\n\nexport const getPostById = (id) => async (dispatch) => {\n  dispatch({ type: GET_POST_TRY });\n  try {\n    const res = await axios.get(`/posts/${id}`);\n    console.log('res.data: ', res.data);\n    setTimeout(() => {\n      dispatch({ type: GET_POST_SUCCESS, post: res.data });\n    }, 500);\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: GET_POST_FAIL, error: e });\n  }\n};\n\nexport default function post(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS_TRY:\n      return {\n        ...state,\n        posts: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: action.posts,\n          error: null,\n        },\n      };\n    case GET_POSTS_FAIL:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n\n    case GET_POST_TRY:\n      return {\n        ...state,\n        post: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POST_SUCCESS:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: action.post,\n          error: null,\n        },\n      };\n    case GET_POST_FAIL:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/auth.js",["147","148"],"// define ACTION type\n\nconst LOG_IN_TRY = 'auth/LOG_IN_TRY';\nconst LOG_IN_SUCCESS = 'auth/LOG_IN_SUCCESS';\nconst LOG_IN_FAIL = 'auth/LOG_IN_FAIL';\nconst CREATE_USER_SUCCESS = 'auth/CREATE_USER_SUCCESS';\n\nconst initialState = { loginState: false, userInfo: {} };\n\n// 액션타입을 redux 파일 안에 정의하고, 정의한 액션타입을 다른 파일에서 사용하기 위해\n// 액션 생성함수를 정의하고, 생성함수를 export 할 것이다.\nexport const loginSuccess = () => {\n  return { type: LOG_IN_SUCCESS };\n};\n\n// 1초 뒤에 loginSuccess() 를 디스패치 한다. 딜레이된 로그인석세스를 디스패치->다시한번 로그인석세스를 1초뒤 디스패치.\nexport const loginSuccessDelayed = () => (dispatch) => {\n  setTimeout(() => {\n    dispatch(loginSuccess());\n  }, 1000);\n};\n\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case LOG_IN_SUCCESS:\n      return {\n        userInfo: { userNickname: 'testname', userUID: 'qwerasdfzxcvnmvclkjh' },\n        loginState: true,\n      };\n    case LOG_IN_FAIL:\n      return {\n        ...state,\n        loginState: false,\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/readPost.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js",["149","150","151","152","153","154"],"import React from 'react';\nimport MainLayout from '../components/layout/MainLayout';\n//import '../styles/Home.module.css';\n\nimport ForceGraph from '../components/home/ForceGraph';\nimport SubjectBlock from '../components/home/SubjectBlock';\nimport { dummyTechtree } from '../lib/dummyTechtree';\n\nexport default function HomePage() {\n  return (\n    <>\n      <MainLayout>\n        <div className=\"container\">\n          <main>\n            <ForceGraph techtreeData={dummyTechtree.cs} category={'cs'} />\n          </main>\n          <aside className=\"sidebar\">\n            <div\n              onClick={() => {\n                console.log('physics clicked');\n              }}\n              className=\"block\"\n            >\n              <SubjectBlock\n                iconSize=\"70\"\n                url=\"physics\"\n                displayedName=\"physics\"\n              />\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/math.svg\"\n                alt=\"mathematicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              Mathematics\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/economics.svg\"\n                alt=\"economicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              economics\n            </div>\n\n            <div\n              onClick={() => {\n                console.log('cs clicked');\n              }}\n              className=\"block\"\n            >\n              <img src=\"/icons/computer.svg\" height=\"50\" width=\"50\" />\n              <br />\n              Computer Science\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/chemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Chemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/biochemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Biochemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/russia.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Russia\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/electricity.svg\" height=\"50\" width=\"50\" />\n              <br />\n              Electrical Engineering\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/earth.svg\" height=\"50\" width=\"50\" />\n              <br />\n              Earth System\n            </div>\n          </aside>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js",["155"],"import React from 'react';\nimport MainLayout from '../../components/layout/MainLayout';\nimport \"../../styles/page/user/ProfilePage.scss\"\n\nexport default function ProfilePage({ match }) {\n  const { userUID } = match.params;\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"profile-container\">\n          <div className=\"profile-upside\">\n            <div className=\"profile-photo\">\n              <img src=\"https://media.vlpt.us/images/ghkdwltjq98/profile/b7b493c6-69ef-4886-aec6-16d03800306e/social.png?w=120\"/> \n            </div>\n            <div className=\"intro-container\">\n              <div>{userUID} 닉네임</div>\n              <div>이메일</div>\n              <div>연락처</div>\n              <div>가입일시</div>\n              <div>마지막 접속일</div>\n              <div>인증 연동</div>\n              <div>포인트</div>\n            </div>\n          </div>\n          <div className=\"profile-downside\">\n            <div className=\"profile-card\">Questions (0)</div>\n            <div className=\"profile-card\">Answers (0)</div>\n            <div className=\"profile-card\">Free Posts (0)</div>\n          </div>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js",["156","157","158"],"import React, { useEffect } from 'react';\nimport MainLayout from '../../components/layout/MainLayout';\nimport { useSelector } from 'react-redux';\nimport QuestionWriteBlock from '../../components/question/QuestionWriteBlock';\n\nexport default function QuestionWritePage({ history }) {\n  //useEffect(() => {\n  //  return () => {\n  //    history.block('페이지를 떠나시는건가요?');\n  //  };\n  //}, [history]);\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  return (\n    <>\n      <MainLayout>\n        <QuestionWriteBlock />\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js",["159","160"],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js",["161","162"],"/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js",["163","164","165","166","167","168"],"import React from 'react';\nimport * as d3 from 'd3';\nimport styles from '../../styles/Techtree.module.css';\n\nexport default function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null);\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`;\n  };\n\n  React.useEffect(() => {\n    let destroyFn;\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      );\n      destroyFn = destroy;\n    }\n\n    return destroyFn;\n  }, []);\n\n  return <div ref={containerRef} className={styles.container} />;\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n  const links = techtreeData.links.map((d) => Object.assign({}, d));\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d));\n\n  const containerRect = container.getBoundingClientRect();\n  const height = 1000; //containerRect.height;\n  const width = 900; //containerRect.width;\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width]);\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height]);\n\n  //const circleColor = () => { return \"#fff\"; };\n  //const circleFill = \"#fff\"\n  const circleSelctedFill = '#00bebe';\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\n  function getRandom00BEBE() {\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe'];\n    const colorSet2 = [\n      '#66b7ce',\n      '#00bebe',\n      'rgb(0, 170, 170)',\n      'rgb(0, 140, 190)',\n      'rgb(0, 190, 170)',\n    ];\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001);\n    return colorSet2[randomFactor];\n    //return linear-gradient(135deg, orange 60%, cyan)\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\n  }\n  const circleStrokeColor1 = getRandom00BEBE(); //\"#94D7FF\"\n  const circleStrokeColor2 = getRandom00BEBE(); //\"#5DE87C\"\n  const circleStrokeColor3 = getRandom00BEBE(); //\"#FFF872\"\n  const circleStrokeColor4 = getRandom00BEBE(); //\"#FF669A\"\n\n  const drag = (simulation) => {\n    const dragstarted = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (d) => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    };\n\n    const dragended = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      'link',\n      d3.forceLink(links).id((d) => d.id)\n    )\n    .force('charge', d3.forceManyBody().strength(-1050))\n    .force('link', d3.forceLink(links).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY());\n\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed);\n\n  const svg = d3\n    .select(container)\n    .call(zoom)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75]);\n\n  var x2 = xScale.copy(); // reference.\n  var y2 = yScale.copy();\n\n  function zoomed() {\n    xScale = d3.event.transform.rescaleX(x2);\n    yScale = d3.event.transform.rescaleY(y2);\n    tick();\n  }\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', '#999')\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis');\n\n  const link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d) => {\n      return `link${d.index}`;\n    })\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)');\n\n  const node = svg\n    .append('g')\n    .attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    //.attr('class',(d)=>{return `${d.name}`})\n    .attr('class', (d) => {\n      return `node${d.index}`;\n    })\n    .attr('r', 30)\n    .style('fill', function (d) {\n      return getRandom00BEBE();\n    })\n    .style('stroke', '#fff')\n    .call(drag(simulation));\n\n  function matchColorForGroup(d) {\n    switch (d.group) {\n      case 1:\n        return circleStrokeColor1;\n      case 2:\n        return circleStrokeColor2;\n      case 3:\n        return circleStrokeColor3;\n      case 4:\n        return circleStrokeColor4;\n      default:\n        return '#00bebe';\n    }\n  }\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.index;\n    })\n    //.attr(\"class\", )\n    .text((d) => {\n      return d.label;\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(drag(simulation));\n\n  // Add the tooltip element to the graph\n  const tooltip = d3.select(container).append('div');\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    //  tooltip // tooltip is just div. how add transition?\n    //  .transition()\n    //    .duration(200)\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x + 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', 0.99);\n  };\n\n  const removeTooltip = () => {\n    tooltip\n      //  .transition()\n      //  .duration(200)\n      .style('opacity', 0);\n  };\n\n  node\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      node.style('cursor', 'pointer');\n    })\n    .on('mouseout', (d) => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n      //  container.querySelectorAll('circle').forEach((element)=>{\n      //  element.style.fill=matchColorForGroup(element)\n      //  })\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  label\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      label.style('cursor', 'pointer');\n    })\n    .on('mouseout', () => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2');\n    link.style('opacity', '0.1');\n    //const displayedNodes = []\n    //const displayedLinks = []\n\n    links.map((linkElement) => {\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\n      if (linkElement.source.id === selectedNode.id) {\n        //selectedNode.style(\"opacity\" ,\"0.1\")\n        container.querySelector(\n          `circle.node${linkElement.target.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.target.id])\n        //console.log(\"to: \",nodes[linkElement.target.id])\n      } else if (linkElement.target.id === selectedNode.id) {\n        container.querySelector(\n          `circle.node${linkElement.source.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.source.id])\n        //console.log(\"from: \",nodes[linkElement.source.id])\n      } else {\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n      }\n      //console.log(displayedNodes)\n      //displayedNodes.map((element)=>{\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\n      //node.select(element).style('opacity',\"1\")\n      //})\n\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\n      // dom 트리상의 문제가 없음.\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\n    });\n  }\n\n  function tick() {\n    //update link positions\n    link\n      .attr('x1', function (d) {\n        return xScale(d.source.x);\n      })\n      .attr('y1', function (d) {\n        return yScale(d.source.y);\n      })\n      .attr('x2', function (d) {\n        return xScale(d.target.x);\n      })\n      .attr('y2', function (d) {\n        return yScale(d.target.y);\n      });\n\n    // update node positions\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y));\n\n    // update label positions\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y));\n  }\n\n  simulation.on('tick', tick);\n\n  return {\n    destroy: () => {\n      simulation.stop();\n    },\n    nodes: () => {\n      return svg.node();\n    },\n  };\n}\n","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js",["169","170","171","172"],"import React, { useEffect, useCallback } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createAnswer } from '../../redux/createPost';\nimport MarkdownPreviewBlock from './MarkdownPreviewBlock';\n\nexport default function AnswerWriteBlock({ questionUID }) {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  const [content, onChangeContent] = useInput();\n\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'answer');\n      formData.append('itIsAnswerOf', questionUID);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      formData.append('hashtags', []);\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createAnswer(formData));\n    },\n    [content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label for=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <MarkdownPreviewBlock content={content} />\n        </div>\n        <div class=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/Button.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteBlock.js",["173","174","175"],"import React, { useCallback, useState } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createQuestion } from '../../redux/createPost';\nimport MarkdownPreviewBlock from './MarkdownPreviewBlock';\n\nexport default function QuestionWriteBlock() {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n  const [title, onChangeTitle] = useInput();\n  //const [content, onChangeContent] = useInput('$\\\\frac{v^{2}}{2}$');\n  const [content, setContent] = useState();\n\n  const dispatch = useDispatch();\n\n  const onChangeContent = useCallback((e) => {\n    setContent(e.target.value);\n  }, []);\n\n  const onSubmitForm = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (!title || !content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'question');\n      formData.append('title', title);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      formData.append('hashtags', []);\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createQuestion(formData));\n    },\n    [title, content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label htmlFor=\"title\">title:</label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={title}\n            onChange={onChangeTitle}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <div>{content} : content in write block</div>\n          <MarkdownPreviewBlock content={content} />\n          {\n            //unified()\n            //  .use(parse)\n            //  .use(math)\n            //  .use(remark2rehype)\n            //  .use(katex)\n            //  .use(remark2react)\n            //  .processSync(content).result\n          }\n        </div>\n        <div className=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js",["176"],"/Users/zowan/Documents/web/tect-react/src/components/question/MarkdownPreviewBlock.js",["177"],"import { useState, useEffect } from 'react';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport breaks from 'remark-breaks';\nimport math from 'remark-math';\nimport remark2rehype from 'remark-rehype';\nimport katex from 'rehype-katex';\nimport stringify from 'rehype-stringify';\nimport raw from 'rehype-raw';\nimport slug from 'remark-slug';\nimport { htmlFilter } from '../../lib/functions';\n\nexport default function MarkdownPreviewBlock({ content }) {\n  const [html, setHtml] = useState(content);\n\n  useEffect(() => {\n    setHtml(\n      // html 필터를 쓰면 latex 렌더링이 이상하게 된다!\n      // 근데 html 필터를 안써도 * 이나 블록인용문 같은건 제대로 렌더링 안됨.\n      //htmlFilter(\n      unified()\n        .use(breaks)\n        .use(parse)\n        .use(slug)\n        .use(remark2rehype)\n        .use(raw)\n        .use(math)\n        .use(katex)\n        .use(stringify)\n        .processSync(content)\n        .toString()\n      //)\n    );\n  }, [content]);\n\n  //unified()\n  //  .use(parse)\n  //  .use(math)\n  //  .use(remark2rehype)\n  //  .use(katex)\n  //  .use(remark2react)\n  //  .processSync(content).result\n\n  return (\n    <>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n      {/*<div>{content} : content in Preview</div>*/}\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/Header.js",["178","179","180","181","182","183","184"],"/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/functions.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":2,"column":13,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"193","line":3,"column":7,"nodeType":"191","messageId":"192","endLine":3,"endColumn":17},{"ruleId":"189","severity":1,"message":"194","line":6,"column":7,"nodeType":"191","messageId":"192","endLine":6,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":59,"column":15,"nodeType":"197","endLine":59,"endColumn":71},{"ruleId":"195","severity":1,"message":"196","line":65,"column":15,"nodeType":"197","endLine":65,"endColumn":72},{"ruleId":"195","severity":1,"message":"196","line":71,"column":15,"nodeType":"197","endLine":71,"endColumn":75},{"ruleId":"195","severity":1,"message":"196","line":77,"column":15,"nodeType":"197","endLine":77,"endColumn":69},{"ruleId":"195","severity":1,"message":"196","line":83,"column":15,"nodeType":"197","endLine":83,"endColumn":74},{"ruleId":"195","severity":1,"message":"196","line":89,"column":15,"nodeType":"197","endLine":89,"endColumn":68},{"ruleId":"195","severity":1,"message":"196","line":14,"column":15,"nodeType":"197","endLine":14,"endColumn":130},{"ruleId":"189","severity":1,"message":"198","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"199","line":12,"column":11,"nodeType":"191","messageId":"192","endLine":12,"endColumn":21},{"ruleId":"189","severity":1,"message":"200","line":12,"column":23,"nodeType":"191","messageId":"192","endLine":12,"endColumn":31},{"ruleId":"201","severity":1,"message":"202","line":25,"column":13,"nodeType":"203","endLine":27,"endColumn":4},{"ruleId":"201","severity":1,"message":"204","line":27,"column":6,"nodeType":"205","endLine":27,"endColumn":16,"suggestions":"206"},{"ruleId":"201","severity":1,"message":"207","line":20,"column":6,"nodeType":"205","endLine":20,"endColumn":16,"suggestions":"208"},{"ruleId":"201","severity":1,"message":"209","line":24,"column":6,"nodeType":"205","endLine":24,"endColumn":16,"suggestions":"210"},{"ruleId":"201","severity":1,"message":"211","line":29,"column":6,"nodeType":"205","endLine":29,"endColumn":8,"suggestions":"212"},{"ruleId":"189","severity":1,"message":"213","line":39,"column":9,"nodeType":"191","messageId":"192","endLine":39,"endColumn":22},{"ruleId":"189","severity":1,"message":"214","line":48,"column":9,"nodeType":"191","messageId":"192","endLine":48,"endColumn":26},{"ruleId":"189","severity":1,"message":"215","line":52,"column":11,"nodeType":"191","messageId":"192","endLine":52,"endColumn":20},{"ruleId":"189","severity":1,"message":"216","line":171,"column":12,"nodeType":"191","messageId":"192","endLine":171,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":267,"column":29,"nodeType":"203","messageId":"219","endLine":267,"endColumn":31},{"ruleId":"189","severity":1,"message":"198","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"199","line":10,"column":11,"nodeType":"191","messageId":"192","endLine":10,"endColumn":21},{"ruleId":"189","severity":1,"message":"200","line":10,"column":23,"nodeType":"191","messageId":"192","endLine":10,"endColumn":31},{"ruleId":"201","severity":1,"message":"220","line":43,"column":5,"nodeType":"205","endLine":43,"endColumn":14,"suggestions":"221"},{"ruleId":"189","severity":1,"message":"199","line":10,"column":11,"nodeType":"191","messageId":"192","endLine":10,"endColumn":21},{"ruleId":"189","severity":1,"message":"200","line":10,"column":23,"nodeType":"191","messageId":"192","endLine":10,"endColumn":31},{"ruleId":"201","severity":1,"message":"222","line":48,"column":5,"nodeType":"205","endLine":48,"endColumn":21,"suggestions":"223"},{"ruleId":"189","severity":1,"message":"224","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":14},{"ruleId":"189","severity":1,"message":"225","line":11,"column":10,"nodeType":"191","messageId":"192","endLine":11,"endColumn":20},{"ruleId":"189","severity":1,"message":"226","line":4,"column":10,"nodeType":"191","messageId":"192","endLine":4,"endColumn":22},{"ruleId":"189","severity":1,"message":"200","line":13,"column":23,"nodeType":"191","messageId":"192","endLine":13,"endColumn":31},{"ruleId":"189","severity":1,"message":"227","line":22,"column":9,"nodeType":"191","messageId":"192","endLine":22,"endColumn":16},{"ruleId":"189","severity":1,"message":"228","line":29,"column":9,"nodeType":"191","messageId":"192","endLine":29,"endColumn":24},{"ruleId":"189","severity":1,"message":"229","line":31,"column":10,"nodeType":"191","messageId":"192","endLine":31,"endColumn":16},{"ruleId":"189","severity":1,"message":"230","line":31,"column":18,"nodeType":"191","messageId":"192","endLine":31,"endColumn":27},{"ruleId":"231","severity":1,"message":"232","line":52,"column":21,"nodeType":"233","messageId":"234","endLine":52,"endColumn":22,"suggestions":"235"},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"no-unused-vars","'dummyAPI' is defined but never used.","Identifier","unusedVar","'LOG_IN_TRY' is assigned a value but never used.","'CREATE_USER_SUCCESS' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'loginState' is assigned a value but never used.","'userInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'getQuestionListAsync'. Either include it or remove the dependency array.","ArrayExpression",["238"],"React Hook useCallback has a missing dependency: 'questionID'. Either include it or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'getQuestionAsync'. Either include it or remove the dependency array.",["240"],"React Hook React.useEffect has missing dependencies: 'category' and 'techtreeData'. Either include them or remove the dependency array.",["241"],"'containerRect' is assigned a value but never used.","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useCallback has missing dependencies: 'dispatch' and 'questionUID'. Either include them or remove the dependency array.",["242"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["243"],"'Link' is defined but never used.","'htmlFilter' is defined but never used.","'loginSuccess' is defined but never used.","'onLogin' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","'isAuth' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\&.","TemplateElement","unnecessaryEscape",["244","245"],"no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"messageId":"258","fix":"259","desc":"260"},{"messageId":"261","fix":"262","desc":"263"},"Update the dependencies array to be: [dispatch, getQuestionListAsync]",{"range":"264","text":"265"},"Update the dependencies array to be: [dispatch, questionID]",{"range":"266","text":"267"},"Update the dependencies array to be: [dispatch, getQuestionAsync]",{"range":"268","text":"269"},"Update the dependencies array to be: [category, techtreeData]",{"range":"270","text":"271"},"Update the dependencies array to be: [content, dispatch, questionUID]",{"range":"272","text":"273"},"Update the dependencies array to be: [title, content, dispatch]",{"range":"274","text":"275"},"removeEscape",{"range":"276","text":"277"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"278","text":"279"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[916,926],"[dispatch, getQuestionListAsync]",[748,758],"[dispatch, questionID]",[811,821],"[dispatch, getQuestionAsync]",[677,679],"[category, techtreeData]",[1473,1482],"[content, dispatch, questionUID]",[1668,1684],"[title, content, dispatch]",[1817,1818],"",[1817,1817],"\\"]