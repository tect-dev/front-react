[{"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\index.js":"1","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\App.js":"2","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\index.js":"4","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\auth.js":"5","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionWritePage.js":"6","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\AboutPage.js":"7","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionSearchResultPage.js":"8","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\NotFoundPage.js":"9","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\LoginPage.js":"10","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionEditPage.js":"11","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\HomePage.js":"12","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionListPage.js":"13","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\firebase.js":"14","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionDetailPage.js":"15","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\readPost.js":"16","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\user\\ProfilePage.js":"17","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\createPost.js":"18","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\updatePost.js":"19","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\deletePost.js":"20","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\dummyTechtree.js":"21","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\functions.js":"22","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Spinner.js":"23","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Pagination.js":"24","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Button.js":"25","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionSection.js":"26","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionBlock.js":"27","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\MainLayout.js":"28","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MarkdownRenderingBlock.js":"29","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\DoublesideLayout.js":"30","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\hooks\\hooks.js":"31","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionWriteSection.js":"32","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\AnswerSection.js":"33","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\HalfWidthContainer.js":"34","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionEditSection.js":"35","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\ForceGraph.js":"36","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\SubjectBlock.js":"37","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\katexWhiteList.js":"38","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\TagBlock.js":"39","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\CommentListBlock.js":"40","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\Navbar.js":"41","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MarkdownEditorBlock.js":"42","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\Footer.js":"43","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\prismPlugin.js":"44","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\prismThemes.js":"45","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\constants.js":"46","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\LoginModal.js":"47"},{"size":1234,"mtime":1610975675695,"results":"48","hashOfConfig":"49"},{"size":2843,"mtime":1611346266703,"results":"50","hashOfConfig":"49"},{"size":375,"mtime":1610975675706,"results":"51","hashOfConfig":"49"},{"size":494,"mtime":1610975675705,"results":"52","hashOfConfig":"49"},{"size":5369,"mtime":1611346266736,"results":"53","hashOfConfig":"49"},{"size":522,"mtime":1611346266732,"results":"54","hashOfConfig":"49"},{"size":204,"mtime":1610975675699,"results":"55","hashOfConfig":"49"},{"size":2908,"mtime":1611346266727,"results":"56","hashOfConfig":"49"},{"size":209,"mtime":1610975675700,"results":"57","hashOfConfig":"49"},{"size":209,"mtime":1610975675700,"results":"58","hashOfConfig":"49"},{"size":1230,"mtime":1611346266722,"results":"59","hashOfConfig":"49"},{"size":2942,"mtime":1610975675699,"results":"60","hashOfConfig":"49"},{"size":2578,"mtime":1611156998877,"results":"61","hashOfConfig":"49"},{"size":702,"mtime":1610976469334,"results":"62","hashOfConfig":"49"},{"size":1824,"mtime":1611156998867,"results":"63","hashOfConfig":"49"},{"size":6939,"mtime":1611053347026,"results":"64","hashOfConfig":"49"},{"size":1776,"mtime":1610975675703,"results":"65","hashOfConfig":"49"},{"size":4572,"mtime":1610975675704,"results":"66","hashOfConfig":"49"},{"size":4104,"mtime":1610975675705,"results":"67","hashOfConfig":"49"},{"size":4391,"mtime":1610975675704,"results":"68","hashOfConfig":"49"},{"size":10913,"mtime":1610975675696,"results":"69","hashOfConfig":"49"},{"size":2310,"mtime":1610975675697,"results":"70","hashOfConfig":"49"},{"size":222,"mtime":1610975675688,"results":"71","hashOfConfig":"49"},{"size":4612,"mtime":1611156998852,"results":"72","hashOfConfig":"49"},{"size":641,"mtime":1610975675686,"results":"73","hashOfConfig":"49"},{"size":3434,"mtime":1611346266717,"results":"74","hashOfConfig":"49"},{"size":1343,"mtime":1610975675693,"results":"75","hashOfConfig":"49"},{"size":340,"mtime":1610983250212,"results":"76","hashOfConfig":"49"},{"size":3507,"mtime":1611156998851,"results":"77","hashOfConfig":"49"},{"size":382,"mtime":1611156998857,"results":"78","hashOfConfig":"49"},{"size":259,"mtime":1610975675694,"results":"79","hashOfConfig":"49"},{"size":4711,"mtime":1610975675694,"results":"80","hashOfConfig":"49"},{"size":7618,"mtime":1610975675692,"results":"81","hashOfConfig":"49"},{"size":430,"mtime":1610975675690,"results":"82","hashOfConfig":"49"},{"size":5199,"mtime":1610975675693,"results":"83","hashOfConfig":"49"},{"size":10282,"mtime":1610975675689,"results":"84","hashOfConfig":"49"},{"size":322,"mtime":1610975675689,"results":"85","hashOfConfig":"49"},{"size":1058,"mtime":1610975675697,"results":"86","hashOfConfig":"49"},{"size":661,"mtime":1610975675688,"results":"87","hashOfConfig":"49"},{"size":414,"mtime":1610975675686,"results":"88","hashOfConfig":"49"},{"size":4159,"mtime":1611346266712,"results":"89","hashOfConfig":"49"},{"size":5624,"mtime":1611388899664,"results":"90","hashOfConfig":"49"},{"size":1069,"mtime":1610975675690,"results":"91","hashOfConfig":"49"},{"size":2550,"mtime":1610975675698,"results":"92","hashOfConfig":"49"},{"size":21380,"mtime":1610975675698,"results":"93","hashOfConfig":"49"},{"size":1528,"mtime":1610975675696,"results":"94","hashOfConfig":"49"},{"size":4389,"mtime":1611346266708,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"a3abpd",{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"98"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"98"},"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\index.js",[],["213","214"],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\App.js",["215","216","217","218"],"import React, { useEffect, useState, useLayoutEffect } from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport HomePage from './pages/HomePage'\r\nimport AboutPage from './pages/AboutPage'\r\nimport QuestionListPage from './pages/question/QuestionListPage'\r\nimport QuestionWritePage from './pages/question/QuestionWritePage'\r\nimport QuestionEditPage from './pages/question/QuestionEditPage'\r\nimport QuestionDetailPage from './pages/question/QuestionDetailPage'\r\nimport QuestionSearchResultPage from './pages/question/QuestionSearchResultPage'\r\nimport ProfilePage from './pages/user/ProfilePage'\r\nimport LoginPage from './pages/LoginPage'\r\nimport NotFoundPage from './pages/NotFoundPage'\r\nimport './App.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { checkAuth } from './redux/auth'\r\nimport { authService } from './lib/firebase'\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      console.log('호출됨: onAuthStateChanged')\r\n      if (user) {\r\n        console.log('user:', user)\r\n        dispatch(checkAuth(user))\r\n      } else {\r\n        console.log('user가 null임')\r\n        dispatch(checkAuth(user))\r\n      }\r\n    })\r\n    const currentUser = authService.currentUser\r\n    console.log('currentUser: ', currentUser)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {/* head 파일을 여기다 적으면, index.html 의 body 태그 하위로 들어가는듯. 그래서 콘솔이 에러를 낸다. react helmet 같은 라이브러리를 써야할듯 */}\r\n      <head>\r\n        <meta name=\"description\" content=\"세상 모든 테크트리, tect.dev\" />\r\n        <link\r\n          href=\"https://myCDN.com/prism@v1.x/themes/prism.css\"\r\n          rel=\"stylesheet\"\r\n        />\r\n      </head>\r\n      {/* 라우트를 Switch 로 감싸면, 매칭되는 첫번째 페이지만 렌더를 해준다. */}\r\n      <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact={true} component={HomePage} />\r\n        <Route path=\"/about\" component={AboutPage} />\r\n        <Route path=\"/user/:userID\" component={ProfilePage} />\r\n\r\n        <Route path=\"/mypage\" component={ProfilePage} />\r\n        <Route path=\"/login\" component={LoginPage} />\r\n        <Route path=\"/question/list/:page\" exact={true} component={QuestionListPage} />\r\n        <Route\r\n          path=\"/question/write\"\r\n          exact={true}\r\n          component={QuestionWritePage}\r\n        />\r\n        <Route path=\"/question/edit/:questionID\" component={QuestionEditPage} />\r\n        <Route path=\"/searched/:searchValue/:page\" component={QuestionSearchResultPage} />\r\n        <Route path=\"/question/:questionID\" component={QuestionDetailPage} />\r\n        <Route component={NotFoundPage} />\r\n      </Switch>\r\n      </BrowserRouter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\index.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\auth.js",["219"],"import { authService, firebaseInstance } from '../lib/firebase'\r\nimport axios from 'axios'\r\n\r\n// define ACTION type\r\nconst LOG_IN_TRY = 'auth/LOG_IN_TRY'\r\nconst LOG_IN_SUCCESS = 'auth/LOG_IN_SUCCESS'\r\nconst LOG_IN_FAIL = 'auth/LOG_IN_FAIL'\r\n\r\nconst LOG_OUT_TRY = 'auth/LOG_OUT_TRY'\r\nconst LOG_OUT_SUCCESS = 'auth/LOG_OUT_SUCCESS'\r\nconst LOG_OUT_FAIL = 'auth/LOG_OUT_FAIL'\r\n\r\nconst CREATE_USER_TRY = 'auth/CREATE_USER_TRY'\r\nconst CREATE_USER_SUCCESS = 'auth/CREATE_USER_SUCCESS'\r\nconst CREATE_USER_FAIL = 'auth/CREATE_USER_FAIL'\r\n\r\nconst CHECK_AUTH = 'auth/CHECK_AUTH'\r\n\r\nconst initialState = {\r\n  loginState: false,\r\n  userID: '000000000000000000000000',\r\n  userNickname: '익명',\r\n  loading: false,\r\n}\r\n\r\nconst session_login = () => {\r\n  authService.currentUser\r\n    .getIdToken(/* forceRefresh */ true)\r\n    .then((idToken) => {\r\n      axios({\r\n        url: '/login/sessionLogin',\r\n        method: 'POST',\r\n        data: {\r\n          firebaseToken: idToken,\r\n          //crsfToken : crsfToekn\r\n        },\r\n        withCredentials: true,\r\n      })\r\n    })\r\n    .catch((e) => {\r\n      console.log('getIdToken 오류', e)\r\n    })\r\n}\r\n\r\nconst session_signup = (userNickname) => {\r\n  authService.currentUser\r\n    .getIdToken(/* forceRefresh */ true)\r\n    .then((idToken) => {\r\n      axios({\r\n        url: '/login/account',\r\n        method: 'POST',\r\n        data: {\r\n          firebaseToken: idToken,\r\n          nickname: userNickname,\r\n          point: 1000,\r\n          //crsfToken : crsfToekn\r\n        },\r\n        withCredentials: true,\r\n      })\r\n    })\r\n    .catch((e) => {\r\n      console.log('getIdToken 오류', e)\r\n    })\r\n}\r\n\r\n// 액션타입을 redux 파일 안에 정의하고, 정의한 액션타입을 다른 파일에서 사용하기 위해\r\n// 액션 생성함수를 정의하고, 생성함수를 export 할 것이다.\r\n// thunk 사용시에는 액션생성함수 따로 안만듬.\r\n\r\nexport const checkAuth = (user) => {\r\n  if (user) {\r\n    console.log('유저:', user)\r\n    const userInfo = {\r\n      userID: user.uid,\r\n      userEmail: user.email,\r\n      userNickname: `${user.displayName}`,\r\n    }\r\n    localStorage.setItem('user', JSON.stringify(userInfo))\r\n    return {\r\n      type: CHECK_AUTH,\r\n      loginState: true,\r\n      userNickname: `${user.displayName}`,\r\n      userID: user.uid,\r\n    }\r\n  } else if (localStorage.getItem('user')) {\r\n    const userInfo = JSON.parse(localStorage.getItem('user'))\r\n    console.log('로컬스토리지 이용한 유저정보 갱신:', userInfo)\r\n    return {\r\n      type: CHECK_AUTH,\r\n      loginState: true,\r\n      userID: userInfo.userID,\r\n      userNickname: userInfo.userNickname,\r\n    }\r\n  } else {\r\n    return {\r\n      type: CHECK_AUTH,\r\n      loginState: false,\r\n      userID: '000000000000000000000000',\r\n      userNickname: '익명',\r\n    }\r\n  }\r\n}\r\n\r\nexport const emailLogin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: LOG_IN_TRY })\r\n  try {\r\n    await authService.signInWithEmailAndPassword(email, password).then(() => {\r\n      session_login()\r\n    })\r\n\r\n    dispatch({ type: LOG_IN_SUCCESS })\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: LOG_IN_FAIL })\r\n  }\r\n}\r\n\r\nexport const emailSignUp = (email, password) => async (dispatch) => {\r\n  dispatch({ type: CREATE_USER_TRY })\r\n  try {\r\n    await authService\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(() => {\r\n        session_signup(email)\r\n      })\r\n\r\n    dispatch({ type: CREATE_USER_SUCCESS })\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: CREATE_USER_FAIL })\r\n  }\r\n}\r\n\r\nexport const logout = () => async (dispatch) => {\r\n  dispatch({ type: LOG_OUT_TRY })\r\n\r\n  try {\r\n    axios({ url: '/login/sessionLogout', method: 'GET' })\r\n    authService.signOut()\r\n    localStorage.removeItem('user')\r\n    dispatch({ type: LOG_OUT_SUCCESS })\r\n  } catch (e) {\r\n    dispatch({ type: LOG_OUT_FAIL })\r\n    console.log('error: ', e)\r\n  }\r\n}\r\n\r\nexport default function auth(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOG_IN_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case LOG_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n\r\n        loginState: true,\r\n      }\r\n    case LOG_IN_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        loginState: false,\r\n      }\r\n    case CREATE_USER_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case CREATE_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        loginState: true,\r\n        userID: 'qwerasdfzxcvnmvclkjh',\r\n        userNickname: 'testname',\r\n      }\r\n    case CREATE_USER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case LOG_OUT_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case LOG_OUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        loginState: false,\r\n        userID: '000000000000000000000000',\r\n        userNickname: '익명',\r\n      }\r\n    case LOG_OUT_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case CHECK_AUTH:\r\n      return {\r\n        ...state,\r\n        loginState: action.loginState,\r\n        userNickname: action.userNickname,\r\n        userID: action.userID,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionWritePage.js",["220","221","222"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport QuestionWriteSection from '../../components/question/QuestionWriteSection'\r\nimport DoublesideLayout from '../../components/layout/DoublesideLayout'\r\n\r\nexport default function QuestionWritePage({ history }) {\r\n  //useEffect(() => {\r\n  //  return () => {\r\n  //    history.block('페이지를 떠나시는건가요?');\r\n  //  };\r\n  //}, [history]);\r\n\r\n  return (\r\n    <DoublesideLayout>\r\n      <QuestionWriteSection />\r\n    </DoublesideLayout>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\AboutPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionSearchResultPage.js",["223","224"],"import React, { useEffect, useCallback } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useLocation, useParams } from 'react-router-dom'\r\nimport { readSearchedResults } from '../../redux/readPost'\r\nimport MainLayout from '../../components/layout/MainLayout'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\n// QuestionListPage의 디자인과 구성을 상속한다.\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from '../../components/Button'\r\nimport '../../styles/page/question/QuestionListPage.scss'\r\nimport { Pagination } from '../../components/Pagination'\r\n\r\nconst QuestionSearchResultPage = () => {\r\n  const { loading, data, error } = useSelector((state) => {\r\n    return state.readPost.searchedResults\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const getSearchResultsAsync = useCallback(\r\n    (params) => {\r\n      dispatch(readSearchedResults(params))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const { searchValue } = useParams()\r\n  useEffect(() => {\r\n    // 기존 쿼리방식 삭제\r\n    // const searchParams = new URLSearchParams(location.search)\r\n    // const querystring = searchParams.get(\"query\")\r\n    // getSearchResultsAsync(querystring)\r\n    getSearchResultsAsync(searchValue)\r\n  }, [dispatch, searchValue])\r\n\r\n  if (loading)\r\n    return (\r\n      <MainLayout>\r\n        <Spinner />\r\n      </MainLayout>\r\n    )\r\n\r\n  if (error) {\r\n    console.log(error)\r\n    return (\r\n      <MainLayout>\r\n        <div>error...</div>\r\n      </MainLayout>\r\n    )\r\n  }\r\n  // if (!data | data.length === 0){\r\n  if (!data | (data?.length === 0)) {\r\n    return (\r\n      <>\r\n        <MainLayout>no data</MainLayout>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainLayout>\r\n        <div className=\"questionList-container\">\r\n          <section>\r\n            <div className=\"questionList-left\">\r\n              <div className=\"questionList-left-top\">\r\n                <div className=\"questionList-title-container\">\r\n                  <div className=\"questionList-Latest\">검색결과</div>\r\n                  {/*인기순 정렬은 나중에 추가하자*/}\r\n                  {/*<div className=\"questionList-popular\">인기</div>*/}\r\n                </div>\r\n                <Link to={'/question/write'} className=\"ask-btn-container\">\r\n                  <Button className=\"ask-btn\" buttonStyle=\"btn--outline\">\r\n                    질문하기\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              <div className=\"questionList\">\r\n                <Pagination data={data} />\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <section>\r\n            <div className=\"questionList-right\">\r\n              <div className=\"questionList-right-title\">Trending Tags</div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </MainLayout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default QuestionSearchResultPage\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\NotFoundPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\LoginPage.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionEditPage.js",["225","226","227","228","229","230","231","232","233"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { useInput } from '../../hooks/hooks'\r\nimport MainLayout from '../../components/layout/MainLayout'\r\nimport DoublesideLayout from '../../components/layout/DoublesideLayout'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport MarkdownRenderingBlock from '../../components/MarkdownRenderingBlock'\r\nimport QuestionEditSection from '../../components/question/QuestionEditSection'\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\n\r\nexport default function QuestionEditPage() {\r\n  const { data, userID } = useSelector((state) => {\r\n    return {\r\n      data: state.readPost.question.data,\r\n      userID: state.auth.userID,\r\n    }\r\n  }) || {\r\n    data: null,\r\n    userID: null,\r\n  }\r\n\r\n  const history = useHistory()\r\n\r\n  //useEffect(() => {\r\n  //  if (data.question.questionBody.authorID !== userID) {\r\n  //    alert('잘못된 접근입니다.')\r\n  //    history.push('/question')\r\n  //  }\r\n  //}, [history])\r\n\r\n  return (\r\n    <DoublesideLayout>\r\n      {data ? (\r\n        <QuestionEditSection initialData={data} />\r\n      ) : (\r\n        <>\r\n          <Redirect to=\"/question/list/1\" />\r\n        </>\r\n      )}\r\n    </DoublesideLayout>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\HomePage.js",["234","235","236","237","238","239"],"import React from 'react';\r\nimport MainLayout from '../components/layout/MainLayout';\r\nimport '../styles/page/HomePage.scss'\r\n\r\nimport ForceGraph from '../components/home/ForceGraph';\r\nimport SubjectBlock from '../components/home/SubjectBlock';\r\nimport { dummyTechtree } from '../lib/dummyTechtree';\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <>\r\n      <MainLayout>\r\n        <div className=\"homepage-container\">\r\n          <main className=\"techtree-container\">\r\n            <ForceGraph techtreeData={dummyTechtree.cs} category={'cs'} />\r\n          </main>\r\n          <aside className=\"subjects-sidebar\">\r\n            <div\r\n              onClick={() => {\r\n                console.log('physics clicked');\r\n              }}\r\n              className=\"block\"\r\n            >\r\n              <SubjectBlock\r\n                iconSize=\"70\"\r\n                url=\"physics\"\r\n                displayedName=\"physics\"\r\n              />\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img\r\n                src=\"/icons/math.svg\"\r\n                alt=\"mathematicsIcon\"\r\n                height=\"70\"\r\n                width=\"70\"\r\n              />\r\n              <br />\r\n              Mathematics\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img\r\n                src=\"/icons/economics.svg\"\r\n                alt=\"economicsIcon\"\r\n                height=\"70\"\r\n                width=\"70\"\r\n              />\r\n              <br />\r\n              economics\r\n            </div>\r\n\r\n            <div\r\n              onClick={() => {\r\n                console.log('cs clicked');\r\n              }}\r\n              className=\"block\"\r\n            >\r\n              <img src=\"/icons/computer.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Computer Science\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/chemistry.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Chemistry\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/biochemistry.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Biochemistry\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/russia.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Russia\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/electricity.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Electrical Engineering\r\n            </div>\r\n\r\n            <div onClick={() => {}} className=\"block\">\r\n              <img src=\"/icons/earth.svg\" height=\"70\" width=\"70\" />\r\n              <br />\r\n              Earth System\r\n            </div>\r\n          </aside>\r\n        </div>\r\n      </MainLayout>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionListPage.js",["240","241","242"],"import { useCallback, useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport MainLayout from '../../components/layout/MainLayout'\r\nimport { readQuestionList } from '../../redux/readPost'\r\nimport { Link } from 'react-router-dom'\r\nimport QuestionBlock from '../../components/question/QuestionBlock'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\nimport { Button } from '../../components/Button'\r\nimport { Pagination } from '../../components/Pagination'\r\n\r\nimport '../../styles/page/question/QuestionListPage.scss'\r\n\r\nexport default function QuestionListPage({ location }) {\r\n  const { loading, data, error } = useSelector((state) => {\r\n    return state.readPost.questionList\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\r\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\r\n\r\n  useEffect(() => {\r\n    dispatch(readQuestionList())\r\n  }, [dispatch])\r\n\r\n  if (loading)\r\n    return (\r\n      <MainLayout>\r\n        <Spinner />\r\n      </MainLayout>\r\n    )\r\n  if (error)\r\n    return (\r\n      <MainLayout>\r\n        <div>error...</div>\r\n      </MainLayout>\r\n    )\r\n\r\n  if (!data)\r\n    return (\r\n      <MainLayout>\r\n        <div>no data</div>\r\n      </MainLayout>\r\n    )\r\n\r\n  return (\r\n    <>\r\n      <MainLayout>\r\n        <div className=\"questionList-container\">\r\n          <section>\r\n            <div className=\"questionList-left\">\r\n              <div className=\"questionList-left-top\">\r\n                <div className=\"questionList-title-container\">\r\n                  <div className=\"questionList-Latest\">최신</div>\r\n                  {/*인기순 정렬은 나중에 추가하자*/}\r\n                  {/*<div className=\"questionList-popular\">인기</div>*/}\r\n                </div>\r\n                <Link to={'/question/write'} className=\"ask-btn-container\">\r\n                  <Button className=\"ask-btn\" buttonStyle=\"btn--outline\">\r\n                    질문하기\r\n                  </Button>\r\n                </Link>\r\n              </div>\r\n              <div className=\"questionList\">\r\n                <Pagination data={data} />\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <section>\r\n            <div className=\"questionList-right\">\r\n              <div className=\"questionList-right-title\">Tags</div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </MainLayout>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\firebase.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\question\\QuestionDetailPage.js",["243"],"import { useEffect, useCallback } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { readQuestionByUID } from '../../redux/readPost'\r\nimport HalfWidthContainer from '../../components/layout/HalfWidthContainer'\r\nimport MainLayout from '../../components/layout/MainLayout'\r\nimport DoublesideLayout from '../../components/layout/DoublesideLayout'\r\n\r\nimport QuestionSection from '../../components/question/QuestionSection'\r\nimport AnswerSection from '../../components/question/AnswerSection'\r\nimport { Spinner } from '../../components/Spinner'\r\n\r\n\r\n// 상속\r\n// import Navbar from '../../components/layout/Navbar'\r\n// import Footer from '../../components/layout/Footer'\r\n// import '../../styles/layout/MainLayout.scss'\r\n\r\nexport default function QuestionDetailPage({ match }) {\r\n  const questionID = match.params.questionID\r\n  const { loading, data, error } = useSelector((state) => {\r\n    return state.readPost.question\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const getQuestionAsync = useCallback(() => {\r\n    dispatch(readQuestionByUID(questionID))\r\n  }, [dispatch, questionID])\r\n\r\n  useEffect(() => {\r\n    getQuestionAsync()\r\n  }, [dispatch])\r\n\r\n  if (loading)\r\n    return (\r\n      <MainLayout>\r\n        <Spinner />\r\n      </MainLayout>\r\n    )\r\n\r\n  if (error) {\r\n    console.log(error)\r\n    return (\r\n      <MainLayout>\r\n        <div>error...</div>\r\n      </MainLayout>\r\n    )\r\n  }\r\n  if (!data)\r\n    return (\r\n      <>\r\n        <MainLayout>no data</MainLayout>\r\n      </>\r\n    )\r\n  return (\r\n    <>\r\n      <DoublesideLayout>\r\n          <HalfWidthContainer>\r\n            <QuestionSection data={data} />\r\n          </HalfWidthContainer>\r\n          <HalfWidthContainer>\r\n            <AnswerSection data={data} />\r\n          </HalfWidthContainer>\r\n      </DoublesideLayout>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\readPost.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\pages\\user\\ProfilePage.js",["244","245","246"],"import React, { useCallback, useDebugValue } from 'react'\r\nimport MainLayout from '../../components/layout/MainLayout'\r\nimport '../../styles/page/user/ProfilePage.scss'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { logout } from '../../redux/auth'\r\n\r\nexport default function ProfilePage({ match }) {\r\n  const { userID } = match.params\r\n  const { myID, myNickname } = useSelector((state) => {\r\n    return { myID: state.auth.userID, myNickname: state.auth.userNickname }\r\n  })\r\n  const dispatch = useDispatch()\r\n\r\n  const onClickLogout = useCallback(() => {\r\n    dispatch(logout())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <MainLayout>\r\n        <div className=\"profile-container\">\r\n          <div className=\"profile-upside\">\r\n            <div className=\"profile-photo\">\r\n              <img src=\"https://media.vlpt.us/images/ghkdwltjq98/profile/b7b493c6-69ef-4886-aec6-16d03800306e/social.png?w=120\" />\r\n            </div>\r\n            <div className=\"intro-container\">\r\n              <div>{userID} 닉네임</div>\r\n              <div>이메일</div>\r\n              <div>연락처</div>\r\n              <div>가입일시</div>\r\n              <div>마지막 접속일</div>\r\n              <div>인증 연동</div>\r\n              <div>포인트</div>\r\n              {myID === userID ? (\r\n                <button onClick={onClickLogout}>Logout</button>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-downside\">\r\n            <div className=\"profile-card\">Questions (0)</div>\r\n            <div className=\"profile-card\">Answers (0)</div>\r\n            <div className=\"profile-card\">Free Posts (0)</div>\r\n          </div>\r\n        </div>\r\n      </MainLayout>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\createPost.js",["247","248","249"],"import axios from 'axios'\r\n\r\nconst initialState = {\r\n  question: {\r\n    loading: false,\r\n    error: null,\r\n    isAdded: false,\r\n  },\r\n  answer: {\r\n    loading: false,\r\n    error: null,\r\n    isAdded: false,\r\n  },\r\n  article: {\r\n    loading: false,\r\n    error: null,\r\n    isAdded: false,\r\n  },\r\n}\r\n\r\n// action types\r\n\r\nconst CREATE_QUESTION_TRY = 'question/CREATE_QUESTION_TRY'\r\nconst CREATE_QUESTION_SUCCESS = 'question/CREATE_QUESTION_SUCCESS'\r\nconst CREATE_QUESTION_FAIL = 'question/CREATE_QUESTION_FAIL'\r\n\r\nconst CREATE_ANSWER_TRY = 'answer/CREATE_ANSWER_TRY'\r\nconst CREATE_ANSWER_SUCCESS = 'answer/CREATE_ANSWER_SUCCESS'\r\nconst CREATE_ANSWER_FAIL = 'answer/CREATE_ANSWER_FAIL'\r\n\r\nconst CREATE_ARTICLE_TRY = 'article/CREATE_ARTICLE_TRY'\r\nconst CREATE_ARTICLE_SUCCESS = 'article/CREATE_ARTICLE_SUCCESS'\r\nconst CREATE_ARTICLE_FAIL = 'article/CREATE_ARTICLE_FAIL'\r\n\r\nconst CREATE_COMMENT_TRY = 'comment/CREATE_COMMENT_TRY'\r\nconst CREATE_COMMENT_SUCCESS = 'comment/CREATE_COMMENT_SUCCESS'\r\nconst CREATE_COMMENT_FAIL = 'comment/CREATE_COMMENT_FAIL'\r\n\r\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\r\n// 3번째 인자를 이용하면 withExtraArgument 에서 넣어준 값을 사용할 수 있다.\r\nexport const createQuestion = (data) => async (\r\n  dispatch,\r\n  getState,\r\n  { history }\r\n) => {\r\n  dispatch({ type: CREATE_QUESTION_TRY })\r\n  try {\r\n    const obj = JSON.stringify(data)\r\n    await axios({\r\n      method: 'post',\r\n      url: `/question`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    await dispatch({ type: CREATE_QUESTION_SUCCESS })\r\n\r\n    history.push(`/question/${data.postID}`)\r\n    // obj 는 스트링으로 만든거라서, data 를 써야함.\r\n  } catch (e) {\r\n    alert('error: ', e)\r\n    dispatch({ type: CREATE_QUESTION_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport const createAnswer = (data) => async (dispatch) => {\r\n  dispatch({ type: CREATE_ANSWER_TRY })\r\n  try {\r\n    const obj = JSON.stringify(data)\r\n    await axios({\r\n      method: 'post',\r\n      url: `/answer`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    dispatch({ type: CREATE_ANSWER_SUCCESS })\r\n    console.log('answer added')\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: CREATE_ANSWER_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport const createArticle = (data) => async (dispatch) => {\r\n  dispatch({ type: CREATE_ARTICLE_TRY })\r\n  try {\r\n    const obj = JSON.stringify(Object.fromEntries(data))\r\n    await axios({\r\n      method: 'post',\r\n      url: `/article`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    setTimeout(() => {\r\n      dispatch({ type: CREATE_ARTICLE_SUCCESS })\r\n    }, 500)\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: CREATE_ARTICLE_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport default function createPost(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CREATE_QUESTION_TRY:\r\n      return {\r\n        ...state,\r\n        question: {\r\n          loading: true,\r\n          error: null,\r\n        },\r\n      }\r\n    case CREATE_QUESTION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        question: {\r\n          loading: false,\r\n          error: null,\r\n          isAdded: true,\r\n        },\r\n      }\r\n    case CREATE_QUESTION_FAIL:\r\n      return {\r\n        ...state,\r\n        question: {\r\n          loading: false,\r\n          error: action.error,\r\n        },\r\n      }\r\n    case CREATE_ANSWER_TRY:\r\n      return {\r\n        ...state,\r\n        answer: {\r\n          loading: true,\r\n          error: null,\r\n        },\r\n      }\r\n    case CREATE_ANSWER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        answer: {\r\n          loading: false,\r\n          error: null,\r\n          isAdded: true,\r\n        },\r\n      }\r\n    case CREATE_ANSWER_FAIL:\r\n      return {\r\n        ...state,\r\n        answer: {\r\n          loading: false,\r\n          error: action.error,\r\n        },\r\n      }\r\n    case CREATE_ARTICLE_TRY:\r\n      return {\r\n        ...state,\r\n        article: {\r\n          loading: true,\r\n          error: null,\r\n        },\r\n      }\r\n    case CREATE_ARTICLE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        article: {\r\n          loading: false,\r\n          error: null,\r\n        },\r\n        content: '',\r\n      }\r\n    case CREATE_ARTICLE_FAIL:\r\n      return {\r\n        ...state,\r\n        article: {\r\n          loading: false,\r\n          error: action.error,\r\n        },\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\updatePost.js",["250","251","252"],"import axios from 'axios'\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: null,\r\n  isUpdated: false,\r\n}\r\n\r\n// action types\r\n\r\nconst UPDATE_QUESTION_TRY = 'question/UPDATE_QUESTION_TRY'\r\nconst UPDATE_QUESTION_SUCCESS = 'question/UPDATE_QUESTION_SUCCESS'\r\nconst UPDATE_QUESTION_FAIL = 'question/UPDATE_QUESTION_FAIL'\r\n\r\nconst UPDATE_ANSWER_TRY = 'answer/UPDATE_ANSWER_TRY'\r\nconst UPDATE_ANSWER_SUCCESS = 'answer/UPDATE_ANSWER_SUCCESS'\r\nconst UPDATE_ANSWER_FAIL = 'answer/UPDATE_ANSWER_FAIL'\r\n\r\nconst UPDATE_ARTICLE_TRY = 'article/UPDATE_ARTICLE_TRY'\r\nconst UPDATE_ARTICLE_SUCCESS = 'article/UPDATE_ARTICLE_SUCCESS'\r\nconst UPDATE_ARTICLE_FAIL = 'article/UPDATE_ARTICLE_FAIL'\r\n\r\nconst UPDATE_COMMENT_TRY = 'comment/UPDATE_COMMENT_TRY'\r\nconst UPDATE_COMMENT_SUCCESS = 'comment/UPDATE_COMMENT_SUCCESS'\r\nconst UPDATE_COMMENT_FAIL = 'comment/UPDATE_COMMENT_FAIL'\r\n\r\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\r\n// 3번째 인자를 이용하면 withExtraArgument 에서 넣어준 값을 사용할 수 있다.\r\nexport const updateQuestion = (data) => async (\r\n  dispatch,\r\n  getState,\r\n  { history }\r\n) => {\r\n  dispatch({ type: UPDATE_QUESTION_TRY })\r\n  try {\r\n    const obj = JSON.stringify(data)\r\n    await axios({\r\n      method: 'put',\r\n      url: `/question/${data.postID}`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    await dispatch({ type: UPDATE_QUESTION_SUCCESS })\r\n\r\n    history.push(`/question/${data.postID}`)\r\n    // obj 는 스트링으로 만든거라서, data 를 써야함.\r\n  } catch (e) {\r\n    alert('error: ', e)\r\n    dispatch({ type: UPDATE_QUESTION_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport const updateAnswer = (answerID, data) => async (dispatch) => {\r\n  dispatch({ type: UPDATE_ANSWER_TRY })\r\n  try {\r\n    const obj = JSON.stringify(data)\r\n    await axios({\r\n      method: 'put',\r\n      url: `/answer/${answerID}`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    dispatch({ type: UPDATE_ANSWER_SUCCESS })\r\n    console.log('answer updated')\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: UPDATE_ANSWER_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport const updateArticle = (data) => async (dispatch) => {\r\n  dispatch({ type: UPDATE_ARTICLE_TRY })\r\n  try {\r\n    const obj = JSON.stringify(Object.fromEntries(data))\r\n    await axios({\r\n      method: 'put',\r\n      url: `/article`,\r\n      headers: { 'Content-Type': 'application/json' },\r\n      data: obj,\r\n    })\r\n    setTimeout(() => {\r\n      dispatch({ type: UPDATE_ARTICLE_SUCCESS })\r\n    }, 500)\r\n  } catch (e) {\r\n    console.log('error: ', e)\r\n    dispatch({ type: UPDATE_ARTICLE_FAIL, error: e })\r\n  }\r\n}\r\n\r\nexport default function updatePost(state = initialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_QUESTION_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      }\r\n    case UPDATE_QUESTION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        isUpdated: true,\r\n      }\r\n    case UPDATE_QUESTION_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      }\r\n    case UPDATE_ANSWER_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      }\r\n    case UPDATE_ANSWER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        isUpdated: true,\r\n      }\r\n    case UPDATE_ANSWER_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      }\r\n    case UPDATE_ARTICLE_TRY:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      }\r\n    case UPDATE_ARTICLE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        isUpdated: true,\r\n      }\r\n    case UPDATE_ARTICLE_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\redux\\deletePost.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\dummyTechtree.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\functions.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Spinner.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Pagination.js",["253","254","255","256","257","258"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\r\nimport '../styles/Pagination.scss'\r\n\r\nimport QuestionBlock from './question/QuestionBlock'\r\n\r\nexport const Pagination = ({ data, total }) => {\r\n  const history = useHistory()\r\n  // total 인자를 백엔드에서 받기 전까지 임시로 사용\r\n  !total ? (total = data.length) : console.log('')\r\n\r\n  const pathname = useLocation().pathname\r\n\r\n  // query 방식 삭제\r\n  const { page } = useParams()\r\n  // const [nowPage, setNowPage] = useState(page)\r\n  let nowPage = typeof(page) === 'number' ? page : parseInt(page)\r\n\r\n  // page당 어느 정도의 게시물을 보여줄 것인가\r\n  const [perPage, setPerPage] = useState(4)\r\n\r\n  // pagination에서 최초와 끝을 제외한 나머지 pageBtn을\r\n  // 얼마나 보여줄 것인가.\r\n  const [btnShowNum, setBtnShowNum] = useState(3)\r\n  const [pageBtns, setPageBtns] = useState([\r\n    ...Array(Math.ceil(total / perPage)).keys(),\r\n  ])\r\n\r\n  useEffect(()=>{\r\n    return\r\n  })\r\n  const PageBtn = ({ element }) => {\r\n    const arr = pathname.split('/')\r\n    arr.pop()\r\n    const basePath = arr.join(\"/\")\r\n    return (\r\n      <li\r\n        key={element}\r\n        className={`page-btn ${element + 1 == nowPage ? 'present' : ''}`}\r\n        onClick={() => {\r\n          history.push({\r\n            pathname: `${basePath}/${element + 1}`\r\n          })\r\n          nowPage = element + 1\r\n          // setNowPage(element + 1)\r\n        }}\r\n      >\r\n        {element + 1}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  const showPageBtns = () => {\r\n    return pageBtns.map((element, index) => {\r\n      return (\r\n        <>\r\n          {nowPage < element + 2 - btnShowNum &&\r\n          element === pageBtns[pageBtns.length - 1]\r\n            ? '...'\r\n            : ''}\r\n\r\n          {(index === pageBtns[0]) |\r\n          (index === pageBtns[pageBtns.length - 1]) ? (\r\n            <PageBtn element={element} key={index} />\r\n          ) : (element >= nowPage - 1 - btnShowNum / 2) &\r\n            (element <= nowPage - 1 + btnShowNum / 2) ? (\r\n            <PageBtn element={element} key={index} />\r\n          ) : null}\r\n\r\n          {nowPage > pageBtns[0] + 2 && index === pageBtns[0] ? '...' : ''}\r\n        </>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data\r\n        ? data.map((element, index) => {\r\n            if (perPage * (nowPage - 1) <= index && index < perPage * nowPage) {\r\n              return (\r\n                <div key={index}>\r\n                  <QuestionBlock question={element} />\r\n                </div>\r\n              )\r\n            } else {\r\n              return null\r\n            }\r\n          })\r\n        : ''}\r\n\r\n      <nav className=\"pagination-nav\">\r\n        <ul className=\"page-list\">\r\n          {\r\n            // n개가 넘어가면 ellipsis로 1에서 마지막까지 표시\r\n            pageBtns.length > btnShowNum ? (\r\n              <>\r\n                {\r\n                  <li\r\n                    key=\"prev-pageBtn\"\r\n                    className=\"page-btn\"\r\n                    onClick={() => {\r\n                      const arr = pathname.split('/')\r\n                      arr.pop()\r\n                      const basePath = arr.join(\"/\")\r\n                      if (nowPage != 1) {\r\n                        nowPage = nowPage - 1\r\n                        // setNowPage(nowPage - 1)\r\n                        history.push({\r\n                          pathname: `${basePath}/${nowPage}`\r\n                        })\r\n                      }\r\n                    }}\r\n                  >\r\n                    {'<'}\r\n                  </li>\r\n                }\r\n\r\n                {showPageBtns()}\r\n\r\n                {\r\n                  <li\r\n                    key=\"next-pageBtn\"\r\n                    className=\"page-btn\"\r\n                    onClick={() => {\r\n                      const arr = pathname.split('/')\r\n                      arr.pop()\r\n                      const basePath = arr.join(\"/\")\r\n                      if (nowPage != Math.ceil(total / perPage)) {\r\n                        \r\n                        nowPage = nowPage + 1\r\n                        \r\n                        // setNowPage(nowPage + 1)\r\n                        history.push({\r\n                          pathname: `${basePath}/${nowPage}`\r\n                        })\r\n                      }\r\n                    }}\r\n                  >\r\n                    {'>'}\r\n                  </li>\r\n                }\r\n              </>\r\n            ) : (\r\n              showPageBtns()\r\n            )\r\n          }\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\Button.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionSection.js",["259","260","261","262","263","264","265","266"],"import React, { useState, useCallback, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\r\nimport CommentListBlock from '../CommentListBlock'\r\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\r\nimport { TagBlock } from '../TagBlock'\r\nimport { Button } from '../Button'\r\nimport { uid } from 'uid'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { deleteQuestion, deleteComment } from '../../redux/deletePost'\r\nimport styled from 'styled-components'\r\n\r\nexport default React.memo(function QuestionSection({ data }) {\r\n  const [content, setContent] = useState('')\r\n  const { userID } = useSelector((state) => {\r\n    return { userID: state.auth.userID }\r\n  })\r\n\r\n  function onChangeContent(value) {\r\n    setContent(value)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onDeleteQuestion = useCallback(() => {\r\n    //alert('정말 삭제합니까?');\r\n    dispatch(deleteQuestion(data.question._id))\r\n  }, [dispatch])\r\n\r\n  function deleteComment() {\r\n    alert('정말 삭제합니까?')\r\n  }\r\n\r\n  const onSubmitComment = useCallback(\r\n    async (e) => {\r\n      e.preventDefault()\r\n      if (!content) {\r\n        return\r\n      }\r\n      const formData = new FormData()\r\n      const uid24 = uid(24)\r\n      formData.append('postID', uid24)\r\n      formData.append('contentType', 'question')\r\n      formData.append('content', content)\r\n      formData.append('authorID', '123456789012345678901234')\r\n      formData.append('authorNickname', '임시닉네임')\r\n    },\r\n    [content]\r\n  )\r\n\r\n  return (\r\n    <QuestionContainer>\r\n      <div className=\"title\">\r\n        <h2>Q. {data.question.questionBody.title}</h2>\r\n        <br />\r\n      </div>\r\n      <div className=\"hashtags\">\r\n        {data.question.questionBody.hashtags.map((tag, index) => {\r\n          return (\r\n            <TagBlock\r\n              key={index}\r\n              text={tag}\r\n              function={() => {\r\n                alert('tag clicked!')\r\n              }}\r\n            />\r\n          )\r\n        })}\r\n        <br />\r\n        <br />\r\n      </div>\r\n      <div className=\"content\">\r\n        <MarkdownRenderingBlock content={data.question.questionBody.content} />\r\n        <br />\r\n        <br />\r\n      </div>\r\n\r\n      <div>\r\n        {data.question.updatedAt.substr(0, 4)}년{' '}\r\n        {data.question.updatedAt.substr(5, 2)}월{' '}\r\n        {data.question.updatedAt.substr(8, 2)}일\r\n      </div>\r\n      <div>\r\n        <Link to={`/user/${data.question.questionBody.authorID}`}>\r\n          {data.question.questionBody.authorNickname}\r\n        </Link>\r\n      </div>\r\n      {data.question.questionBody.authorID === userID &&\r\n      data.answers.length === 0 &&\r\n      userID !== '000000000000000000000000' ? (\r\n        <>\r\n          <Button>\r\n            <Link to={`/question/edit/${data.question._id}`}>\r\n              질문 수정하기\r\n            </Link>\r\n          </Button>\r\n          <Button onClick={onDeleteQuestion}>질문 삭제하기</Button>\r\n        </>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {/*<CommentListBlock commentList={question.comments} />\r\n      <MarkdownEditorBlock\r\n        initialContent={''}\r\n        onChangeContentProps={onChangeContent}\r\n      />\r\n      <Button onClick={onSubmitComment}>question 에 댓글달기</Button>*/}\r\n    </QuestionContainer>\r\n  )\r\n})\r\n\r\nconst QuestionContainer = styled.div`\r\n  padding: 1rem 1.5rem;\r\n`\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionBlock.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\MainLayout.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MarkdownRenderingBlock.js",["267"],"import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport remark from 'remark'\r\nimport remarkParse from 'remark-parse'\r\nimport breaks from 'remark-breaks'\r\nimport math from 'remark-math'\r\nimport remark2rehype from 'remark-rehype'\r\nimport katex from 'rehype-katex'\r\nimport stringify from 'rehype-stringify'\r\nimport raw from 'rehype-raw'\r\nimport slug from 'remark-slug'\r\nimport { htmlFilter } from '../lib/functions'\r\nimport { prismPlugin } from '../lib/prismPlugin'\r\nimport { prismThemes } from '../lib/prismThemes'\r\nimport { colorPalette, mediaQuery, mediaSize } from '../lib/constants'\r\n\r\nconst MarkdownStyledBlock = styled.div`\r\n  &.atom-one-dark {\r\n    ${prismThemes['atom-one-dark']}\r\n  }\r\n  &.atom-one-light {\r\n    ${prismThemes['atom-one-light']}\r\n  }\r\n  &.vscDark {\r\n    ${prismThemes['vscDark']}\r\n  }\r\n  &.github {\r\n    ${prismThemes['github']}\r\n  }\r\n  &.monokai {\r\n    ${prismThemes['monokai']}\r\n  }\r\n  &.dracula {\r\n    ${prismThemes['dracula']}\r\n  }\r\n  &.tomorrow-night {\r\n    ${prismThemes['tomorrow-night']}\r\n  }\r\n  pre {\r\n    font-family: 'Fira Mono', source-code-pro, Menlo, Monaco, Consolas,\r\n      'Courier New', monospace;\r\n    font-size: 0.875rem;\r\n    padding: 1rem;\r\n    border-radius: 4px;\r\n    line-height: 1.5;\r\n    overflow-x: auto;\r\n    letter-spacing: 0px;\r\n    ${mediaSize.small} {\r\n      font-size: 0.75rem;\r\n      padding: 0.75rem;\r\n    }\r\n  }\r\n  img {\r\n    max-width: 100%;\r\n    height: auto;\r\n    display: block;\r\n    margin-top: 1.5rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  iframe {\r\n    width: 768px;\r\n    height: 430px;\r\n    max-width: 100%;\r\n    background: black;\r\n    display: block;\r\n    margin: auto;\r\n    border: none;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n  }\r\n  .twitter-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-left: none;\r\n    background: none;\r\n    padding: none;\r\n  }\r\n  table {\r\n    min-width: 40%;\r\n    max-width: 100%;\r\n    border: 1px solid ${colorPalette.gray7};\r\n    border-collapse: collapse;\r\n    font-size: 0.875rem;\r\n    thead > tr > th {\r\n      /* text-align: left; */\r\n      border-bottom: 4px solid ${colorPalette.gray7};\r\n    }\r\n    th,\r\n    td {\r\n      word-break: break-word;\r\n      padding: 0.5rem;\r\n    }\r\n    td + td,\r\n    th + th {\r\n      border-left: 1px solid ${colorPalette.gray7};\r\n    }\r\n    tr:nth-child(even) {\r\n      background: ${colorPalette.gray1};\r\n    }\r\n    tr:nth-child(odd) {\r\n      background: white;\r\n    }\r\n  }\r\n  .katex-mathml {\r\n    display: none;\r\n  }\r\n  width: 39vw;\r\n  ${mediaSize.small} {\r\n    width: 95vw;\r\n  }\r\n`\r\n\r\nexport default React.memo(function MarkdownRenderingBlock({ content }) {\r\n  const [html, setHtml] = useState(content)\r\n\r\n  useEffect(() => {\r\n    setHtml(\r\n      // html 필터를 쓰면 latex 렌더링이 이상하게 된다!\r\n      // 그래서 html 필터랑 katex whitelist 를 함께 쓰는듯.\r\n      htmlFilter(\r\n        //unified()\r\n        remark()\r\n          .use(breaks)\r\n          .use(remarkParse)\r\n          .use(slug)\r\n          .use(prismPlugin)\r\n          .use(remark2rehype, { allowDangerousHTML: true })\r\n          .use(raw)\r\n          .use(math)\r\n          .use(katex)\r\n          .use(stringify)\r\n          .processSync(content)\r\n          .toString()\r\n      )\r\n    )\r\n  }, [content])\r\n\r\n  return (\r\n    <MarkdownStyledBlock\r\n      className={'dracula'}\r\n      dangerouslySetInnerHTML={{ __html: html.replaceAll(`\\n`, `<br />`) }}\r\n    ></MarkdownStyledBlock>\r\n  )\r\n})\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\DoublesideLayout.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\hooks\\hooks.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionWriteSection.js",["268","269","270","271","272","273"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport { uid } from 'uid'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { createQuestion } from '../../redux/createPost'\r\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\r\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\r\nimport { TagBlock } from '../TagBlock'\r\nimport { Button } from '../Button'\r\nimport styled from 'styled-components'\r\nimport { textTooLongAlert } from '../../lib/functions'\r\nimport HalfWidthContainer from '../../components/layout/HalfWidthContainer'\r\n\r\nexport default React.memo(function QuestionWriteSection() {\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [hashtagText, setHashtagText] = useState('')\r\n  const [hashtagList, setHashtagList] = useState([])\r\n\r\n  const splitPoint = /\\,/g\r\n\r\n  const { userID, userNickname } = useSelector((state) => {\r\n    return {\r\n      userID: state.auth.userID,\r\n      userNickname: state.auth.userNickname,\r\n    }\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeTitle = useCallback(\r\n    (e) => {\r\n      setTitle(textTooLongAlert(e.target.value, 100))\r\n    },\r\n    [title]\r\n  )\r\n\r\n  function onChangeContent(value) {\r\n    textTooLongAlert(value, 50000)\r\n    setContent(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (hashtagList.length > 10) {\r\n      setHashtagText(hashtagText.substr(0, hashtagText.length - 1))\r\n      hashtagList.pop()\r\n      alert('태그의 갯수가 너무 많아요!')\r\n    }\r\n  }, [hashtagList])\r\n\r\n  const onChangeHashtagText = useCallback(\r\n    (e) => {\r\n      setHashtagText(textTooLongAlert(e.target.value, 100))\r\n      let splitedArray = e.target.value.split(splitPoint)\r\n      const editedArray = splitedArray\r\n        .map((element) => {\r\n          return element.replace(/[^가-힣|a-z|A-Z|0-9]/g, '')\r\n        })\r\n        .filter((string) => string.length > 0)\r\n\r\n      setHashtagList(editedArray)\r\n    },\r\n    [hashtagText]\r\n  )\r\n\r\n  const onSubmitForm = useCallback(\r\n    async (e) => {\r\n      e.preventDefault()\r\n      if (!title || !content) {\r\n        return alert('제목과 본문을 작성해 주세요.')\r\n      }\r\n\r\n      const uid24 = uid(24)\r\n      const formData = {\r\n        postID: uid24,\r\n        title: title,\r\n        contentType: 'question',\r\n        content: content,\r\n        authorID: userID,\r\n        authorNickname: userNickname,\r\n        hashtags: hashtagList,\r\n      }\r\n\r\n      dispatch(createQuestion(formData))\r\n    },\r\n    [title, content, hashtagList]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <HalfWidthContainer>\r\n        <form onSubmit={onSubmitForm}>\r\n          <div>\r\n            <StyledTitleInput\r\n              type=\"text\"\r\n              id=\"title\"\r\n              value={title}\r\n              maxLength=\"300\"\r\n              onChange={onChangeTitle}\r\n              placeholder=\"title\"\r\n            />\r\n          </div>\r\n\r\n          <MarkdownEditorBlock\r\n            contentProps={content}\r\n            onChangeContentProps={onChangeContent}\r\n            height=\"400px\"\r\n            width=\"41vw\"\r\n          />\r\n          <div>\r\n            <StyledTagInput\r\n              type=\"text\"\r\n              id=\"hashtag\"\r\n              value={hashtagText}\r\n              onChange={onChangeHashtagText}\r\n              placeholder=\"태그는 쉼표로 구분되며, 10개까지 입력 가능합니다\"\r\n            />\r\n          </div>\r\n          <div>\r\n            {hashtagList.map((element, index) => {\r\n              return (\r\n                <TagBlock\r\n                  key={index}\r\n                  text={element}\r\n                  function={(e) => {\r\n                    e.preventDefault()\r\n                  }}\r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n          <br />\r\n\r\n          <Button className=\"ask-btn\" type=\"submit\" buttonStyle=\"btn--outline\">\r\n            작성 완료\r\n          </Button>\r\n          <br />\r\n        </form>\r\n      </HalfWidthContainer>\r\n      <HalfWidthContainer>\r\n        <PreviewContainer>\r\n          <div>\r\n            <h2>Preview</h2>\r\n            <br />\r\n          </div>\r\n          <MarkdownRenderingBlock content={content} />\r\n        </PreviewContainer>\r\n      </HalfWidthContainer>\r\n    </>\r\n  )\r\n})\r\n\r\nconst EditorContainer = styled.div``\r\n\r\nconst PreviewContainer = styled.div`\r\n  display: block;\r\n`\r\n\r\nconst StyledTitleInput = styled.input`\r\n  height: 60px;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  cursor: text;\r\n  border: none;\r\n  outline: none;\r\n  padding: 0.2rem;\r\n  width: 42vw;\r\n`\r\nconst StyledTagInput = styled.input`\r\n  height: 60px;\r\n  font-size: 15px;\r\n  cursor: text;\r\n  border: none;\r\n  outline: none;\r\n  padding: 0.2rem;\r\n  width: 42vw;\r\n`\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\AnswerSection.js",["274","275","276"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\r\nimport CommentListBlock from '../CommentListBlock'\r\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\r\nimport { createAnswer } from '../../redux/createPost'\r\nimport { updateAnswer } from '../../redux/updatePost'\r\nimport { deleteAnswer } from '../../redux/deletePost'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { uid } from 'uid'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  sortISOByTimeStamp,\r\n  isoStringToNaturalLanguage,\r\n} from '../../lib/functions'\r\nimport { Button } from '../../components/Button'\r\nimport styled from 'styled-components'\r\nimport { userDefaultID, mediaSize } from '../../lib/constants'\r\n\r\nexport default React.memo(function AnswerSection({ data }) {\r\n  const [answers, setAnswers] = useState(\r\n    data.answers.sort((a, b) => {\r\n      sortISOByTimeStamp(a.answerBody.createdAt, b.answerBody.createdAt, -1)\r\n    })\r\n  )\r\n  // 새로운 answer 를 작성할때 사용하는 state: content\r\n  const [content, setContent] = useState('')\r\n  const [isEditingAnswer, setEditingAnswer] = useState(false)\r\n  const [editedAnswerIndex, setEditedAnswerIndex] = useState()\r\n  // 기존 answer 를 수정할때 사용하는 state: editedAnswerContent\r\n  const [editedAnswerContent, setEditedAnswerContent] = useState('')\r\n  const { userID, userNickname } = useSelector((state) => {\r\n    return {\r\n      userID: state.auth.userID,\r\n      userNickname: state.auth.userNickname,\r\n    }\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function startEditAnswer(answer, index) {\r\n    setEditingAnswer(true)\r\n    setEditedAnswerIndex(index)\r\n    setEditedAnswerContent(answer.answerBody.content)\r\n  }\r\n\r\n  function onChangeAnswerContent(value) {\r\n    setEditedAnswerContent(value)\r\n  }\r\n\r\n  // 새로운 answer 를 추가할때 사용된다.\r\n  const onChangeContent = useCallback((value) => {\r\n    setContent(value)\r\n  }, [])\r\n\r\n  const addAnswer = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      if (!content) {\r\n        return alert('게시글을 작성하세요.')\r\n      }\r\n\r\n      const uid24 = uid(24)\r\n      const formData = {\r\n        answerID: uid24,\r\n        postID: data.question._id,\r\n        contentType: 'answer',\r\n        content: content,\r\n        authorID: userID,\r\n        authorNickname: userNickname,\r\n      }\r\n      const tempAnswer = {\r\n        __v: 0,\r\n        _id: uid24,\r\n        answerBody: {\r\n          answerID: uid24,\r\n          authorID: userID,\r\n          authorNickname: userNickname,\r\n          content: content,\r\n          createdAt: '지금', // Date.now() 가 알수없는 오류를 낸다. 생각해보니 걍 이런식으로 써도 될듯.\r\n          lastUpdate: '지금',\r\n          postID: data.question._id,\r\n        },\r\n      }\r\n      dispatch(createAnswer(formData))\r\n      setAnswers([...answers, tempAnswer])\r\n      setContent('')\r\n    },\r\n    [content, answers, data.question._id, dispatch, userID, userNickname]\r\n  )\r\n\r\n  const onUpdateAnswer = useCallback(\r\n    (answerID, index) => {\r\n      if (!editedAnswerContent) {\r\n        alert('본문을 입력해 주세요.')\r\n        return\r\n      }\r\n      const data = { content: editedAnswerContent }\r\n      dispatch(updateAnswer(answerID, data))\r\n      setEditingAnswer(false)\r\n      // immer 를 쓰는것보단 이게 나을지도.\r\n      const tempAnswer = {\r\n        ...answers[index],\r\n        answerBody: {\r\n          ...answers[index].answerBody,\r\n          content: editedAnswerContent,\r\n          lastUpdate: '지금',\r\n        },\r\n      }\r\n\r\n      setAnswers(\r\n        answers.map((answer, answerIndex) => {\r\n          if (answerIndex === index) {\r\n            return tempAnswer\r\n          } else {\r\n            return answer\r\n          }\r\n        })\r\n      )\r\n    },\r\n    [editedAnswerContent, answers, dispatch]\r\n  )\r\n\r\n  const onDeleteAnswer = useCallback(\r\n    (answerID, index) => {\r\n      dispatch(deleteAnswer(answerID))\r\n      answers.splice(index, 1)\r\n      setAnswers([...answers])\r\n    },\r\n    [answers, dispatch]\r\n  )\r\n\r\n  return (\r\n    <AnswerContainer>\r\n      <h3>{answers.length} Answers</h3>\r\n      {answers.map((element, index) => {\r\n        return (\r\n          <AnswerBlock key={index}>\r\n            {isEditingAnswer && editedAnswerIndex === index ? (\r\n              // answer 가 수정중일때\r\n              <div key={index}>\r\n                <MarkdownEditorBlock\r\n                  contentProps={editedAnswerContent}\r\n                  onChangeContentProps={onChangeAnswerContent}\r\n                  height=\"350px\"\r\n                  width=\"41vw\"\r\n                />\r\n                <MarkdownRenderingBlock content={editedAnswerContent} />\r\n                <Button\r\n                  onClick={() => {\r\n                    onUpdateAnswer(element._id, index)\r\n                  }}\r\n                >\r\n                  수정완료\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              // answer 가 수정중이 아닐때\r\n              <div key={index}>\r\n                <div className=\"content\">\r\n                  {element.answerBody ? (\r\n                    <MarkdownRenderingBlock\r\n                      content={element.answerBody.content}\r\n                    />\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                  <br />\r\n                </div>\r\n\r\n                <div>\r\n                  {isoStringToNaturalLanguage(element.answerBody.lastUpdate)}\r\n                </div>\r\n                <div>\r\n                  {element.answerBody.authorID === userDefaultID ? (\r\n                    `${element.answerBody.authorNickname}`\r\n                  ) : (\r\n                    <Link to={`/user/${element.answerBody.authorID}`}>\r\n                      {element.answerBody.authorNickname}\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n\r\n                {userID !== '000000000000000000000000' &&\r\n                userID === element.answerBody.authorID ? (\r\n                  <>\r\n                    <Button\r\n                      onClick={() => {\r\n                        startEditAnswer(element, index)\r\n                      }}\r\n                    >\r\n                      답변 수정\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => {\r\n                        onDeleteAnswer(element._id, index)\r\n                      }}\r\n                    >\r\n                      답변 삭제\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  ''\r\n                )}\r\n\r\n                {/* <CommentListBlock commentList={element.answerBody.comments} /> \r\n                <MarkdownEditorBlock />\r\n                <Button>answer에 댓글달기</Button>*/}\r\n              </div>\r\n            )}\r\n          </AnswerBlock>\r\n        )\r\n      })}\r\n      <MarkdownEditorBlock\r\n        className=\"answerWrite\"\r\n        onChangeContentProps={onChangeContent}\r\n        contentProps={content}\r\n        height=\"250px\"\r\n        width=\"40vw\"\r\n      />\r\n      <br />\r\n      <h3>Answer Preview</h3>\r\n      <br />\r\n      <MarkdownRenderingBlock content={content} />\r\n      <br />\r\n      <Button onClick={addAnswer}>답변 추가하기</Button>\r\n    </AnswerContainer>\r\n  )\r\n})\r\n\r\nconst AnswerContainer = styled.div`\r\n  padding: 1rem 1.5rem;\r\n`\r\n\r\nconst AnswerBlock = styled.div`\r\n  margin-top: 20px;\r\n  margin-bottom: 40px;\r\n  padding: 20px;\r\n  ${mediaSize.small} {\r\n  }\r\n  box-shadow: 4px 2px 6px 0px #d7dbe2, -4px -2px 4px 0px #ffffff;\r\n`\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\HalfWidthContainer.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\question\\QuestionEditSection.js",["277","278","279","280","281"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport { uid } from 'uid'\r\nimport { useInput } from '../../hooks/hooks'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { updateQuestion } from '../../redux/updatePost'\r\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\r\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\r\nimport { TagBlock } from '../TagBlock'\r\nimport { Button } from '../Button'\r\nimport styled from 'styled-components'\r\nimport { textTooLongAlert } from '../../lib/functions'\r\nimport HalfWidthContainer from '../../components/layout/HalfWidthContainer'\r\n\r\nexport default React.memo(function QuestionEditSection({ initialData }) {\r\n  const [title, onChangeTitle] = useInput(\r\n    initialData.question.questionBody.title\r\n  )\r\n  const [content, setContent] = useState(\r\n    initialData.question.questionBody.content\r\n  )\r\n  const [hashtagText, setHashtagText] = useState(\r\n    mergeArray(initialData.question.questionBody.hashtags, `\\,`)\r\n  )\r\n  const [hashtagList, setHashtagList] = useState(\r\n    initialData.question.questionBody.hashtags\r\n  )\r\n  const questionID = initialData.question._id || 'error'\r\n  const splitPoint = /\\,/g\r\n\r\n  function mergeArray(array, splitter) {\r\n    let mergedOne = ''\r\n    for (const element of array) {\r\n      mergedOne = mergedOne + element + splitter\r\n    }\r\n    return mergedOne\r\n  }\r\n\r\n  const { userID, userNickname } = useSelector((state) => {\r\n    return {\r\n      userID: state.auth.userID,\r\n      userNickname: state.auth.userNickname,\r\n    }\r\n  }) || {\r\n    userID: '123456789012345678901234',\r\n    userNickname: '익명',\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function onChangeContent(value) {\r\n    textTooLongAlert(value, 50000)\r\n    setContent(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (hashtagList.length > 10) {\r\n      setHashtagText(hashtagText.substr(0, hashtagText.length - 1))\r\n      hashtagList.pop()\r\n      alert('태그의 갯수가 너무 많아요!')\r\n    }\r\n  }, [hashtagList, hashtagText])\r\n\r\n  const onChangeHashtagText = useCallback(\r\n    (e) => {\r\n      setHashtagText(e.target.value)\r\n      let splitedArray = e.target.value.split(splitPoint)\r\n      const editedArray = splitedArray\r\n        .map((element) => {\r\n          return element.replace(/[^가-힣|a-z|A-Z|0-9]/g, '')\r\n        })\r\n        .filter((string) => string.length > 0)\r\n\r\n      setHashtagList(editedArray)\r\n    },\r\n    [hashtagText, splitPoint]\r\n  )\r\n\r\n  const onSubmitForm = useCallback(\r\n    async (e) => {\r\n      e.preventDefault()\r\n      if (!title || !content) {\r\n        return alert('제목과 본문을 작성해 주세요.')\r\n      }\r\n\r\n      const formData = {\r\n        postID: questionID,\r\n        title: title,\r\n        contentType: 'question',\r\n        content: content,\r\n        authorID: userID,\r\n        authorNickname: userNickname,\r\n        hashtags: hashtagList,\r\n      }\r\n\r\n      dispatch(updateQuestion(formData))\r\n    },\r\n    [title, content, hashtagList, dispatch, questionID, userID, userNickname]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <HalfWidthContainer>\r\n        <form onSubmit={onSubmitForm}>\r\n          <div>\r\n            <StyledTitleInput\r\n              type=\"text\"\r\n              id=\"title\"\r\n              value={title}\r\n              maxLength=\"300\"\r\n              onChange={onChangeTitle}\r\n              placeholder=\"title\"\r\n            />\r\n          </div>\r\n\r\n          <MarkdownEditorBlock\r\n            contentProps={content}\r\n            onChangeContentProps={onChangeContent}\r\n            height=\"400px\"\r\n            width=\"41vw\"\r\n          />\r\n          <div>\r\n            <StyledTagInput\r\n              type=\"text\"\r\n              id=\"hashtag\"\r\n              value={hashtagText}\r\n              onChange={onChangeHashtagText}\r\n              placeholder=\"태그는 쉼표로 구분되며, 10개까지 입력 가능합니다\"\r\n            />\r\n          </div>\r\n          <div>\r\n            {hashtagList.map((element, index) => {\r\n              return (\r\n                <TagBlock\r\n                  key={index}\r\n                  text={element}\r\n                  function={(e) => {\r\n                    e.preventDefault()\r\n                  }}\r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n          <br />\r\n          <Button className=\"ask-btn\" type=\"submit\" buttonStyle=\"btn--outline\">\r\n            작성 완료\r\n          </Button>\r\n          <br />\r\n        </form>\r\n      </HalfWidthContainer>\r\n      <HalfWidthContainer>\r\n        <PreviewContainer>\r\n          <div>\r\n            <h2>Preview</h2>\r\n            <br />\r\n          </div>\r\n          <MarkdownRenderingBlock content={content} />\r\n        </PreviewContainer>\r\n      </HalfWidthContainer>\r\n    </>\r\n  )\r\n})\r\n\r\nconst EditorContainer = styled.div``\r\n\r\nconst PreviewContainer = styled.div`\r\n  display: block;\r\n`\r\n\r\nconst StyledTitleInput = styled.input`\r\n  height: 60px;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  cursor: text;\r\n  border: none;\r\n  outline: none;\r\n  padding: 0.2rem;\r\n  width: 42vw;\r\n`\r\nconst StyledTagInput = styled.input`\r\n  height: 60px;\r\n  font-size: 15px;\r\n  cursor: text;\r\n  border: none;\r\n  outline: none;\r\n  padding: 0.2rem;\r\n  width: 42vw;\r\n`\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\ForceGraph.js",["282","283","284","285","286"],"import React from 'react'\r\nimport * as d3 from 'd3'\r\nimport styles from '../../styles/Techtree.module.css'\r\n\r\nexport default function ForceGraph({ techtreeData, category }) {\r\n  const containerRef = React.useRef(null)\r\n\r\n  const nodeHoverTooltip = (node) => {\r\n    return `<div>     \r\n      <p><b>${node.name}</b></p>\r\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\r\n    </div>`\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    let destroyFn\r\n\r\n    if (containerRef.current) {\r\n      const { destroy } = runForceGraph(\r\n        containerRef.current,\r\n        techtreeData,\r\n        category,\r\n        nodeHoverTooltip\r\n      )\r\n      destroyFn = destroy\r\n    }\r\n\r\n    return destroyFn\r\n  }, [category, techtreeData])\r\n\r\n  return <div ref={containerRef} className={styles.container} />\r\n}\r\n\r\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\r\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\r\n  const links = techtreeData.links.map((d) => Object.assign({}, d))\r\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d))\r\n\r\n  const containerRect = container.getBoundingClientRect()\r\n  const height = 1000 //containerRect.height;\r\n  const width = 900 //containerRect.width;\r\n\r\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width])\r\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height])\r\n\r\n  //const circleColor = () => { return \"#fff\"; };\r\n  //const circleFill = \"#fff\"\r\n  const circleSelctedFill = '#00bebe'\r\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\r\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\r\n  function getRandom00BEBE() {\r\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe']\r\n    const colorSet2 = [\r\n      '#66b7ce',\r\n      '#00bebe',\r\n      'rgb(0, 170, 170)',\r\n      'rgb(0, 140, 190)',\r\n      'rgb(0, 190, 170)',\r\n    ]\r\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001)\r\n    return colorSet2[randomFactor]\r\n    //return linear-gradient(135deg, orange 60%, cyan)\r\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\r\n  }\r\n  const circleStrokeColor1 = getRandom00BEBE() //\"#94D7FF\"\r\n  const circleStrokeColor2 = getRandom00BEBE() //\"#5DE87C\"\r\n  const circleStrokeColor3 = getRandom00BEBE() //\"#FFF872\"\r\n  const circleStrokeColor4 = getRandom00BEBE() //\"#FF669A\"\r\n\r\n  const drag = (simulation) => {\r\n    const dragstarted = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart()\r\n      d.fx = d.x\r\n      d.fy = d.y\r\n    }\r\n\r\n    const dragged = (d) => {\r\n      d.fx = d3.event.x\r\n      d.fy = d3.event.y\r\n    }\r\n\r\n    const dragended = (d) => {\r\n      if (!d3.event.active) simulation.alphaTarget(0)\r\n      d.fx = null\r\n      d.fy = null\r\n    }\r\n\r\n    return d3\r\n      .drag()\r\n      .on('start', dragstarted)\r\n      .on('drag', dragged)\r\n      .on('end', dragended)\r\n  }\r\n\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      'link',\r\n      d3.forceLink(links).id((d) => d.id)\r\n    )\r\n    .force('charge', d3.forceManyBody().strength(-1050))\r\n    .force('link', d3.forceLink(links).distance(200))\r\n    .force('x', d3.forceX())\r\n    .force('y', d3.forceY())\r\n\r\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed)\r\n\r\n  const svg = d3\r\n    .select(container)\r\n    .call(zoom)\r\n    .append('svg')\r\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75])\r\n\r\n  var x2 = xScale.copy() // reference.\r\n  var y2 = yScale.copy()\r\n\r\n  function zoomed() {\r\n    xScale = d3.event.transform.rescaleX(x2)\r\n    yScale = d3.event.transform.rescaleY(y2)\r\n    tick()\r\n  }\r\n\r\n  svg\r\n    .append('defs')\r\n    .append('marker')\r\n    .attr('id', 'arrowhead')\r\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\r\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\r\n    .attr('refY', 0)\r\n    .attr('orient', 'auto')\r\n    .attr('markerWidth', 10)\r\n    .attr('markerHeight', 10)\r\n    .attr('xoverflow', 'visible')\r\n    .append('svg:path')\r\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\r\n    .attr('fill', '#999')\r\n    .style('stroke', 'none')\r\n    .attr('stroke-width', 1)\r\n    .attr('id', 'vis')\r\n\r\n  const link = svg\r\n    .append('g')\r\n    .attr('stroke', '#999')\r\n    .attr('stroke-opacity', 0.6)\r\n    .selectAll('line')\r\n    .data(links)\r\n    .join('line')\r\n    .attr('class', (d) => {\r\n      return `link${d.index}`\r\n    })\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', 'url(#arrowhead)')\r\n\r\n  const node = svg\r\n    .append('g')\r\n    .attr('stroke-width', 2)\r\n    .selectAll('circle')\r\n    .data(nodes)\r\n    .join('circle')\r\n    //.attr('class',(d)=>{return `${d.name}`})\r\n    .attr('class', (d) => {\r\n      return `node${d.index}`\r\n    })\r\n    .attr('r', 30)\r\n    .style('fill', function (d) {\r\n      return getRandom00BEBE()\r\n    })\r\n    .style('stroke', '#fff')\r\n    .call(drag(simulation))\r\n\r\n  function matchColorForGroup(d) {\r\n    switch (d.group) {\r\n      case 1:\r\n        return circleStrokeColor1\r\n      case 2:\r\n        return circleStrokeColor2\r\n      case 3:\r\n        return circleStrokeColor3\r\n      case 4:\r\n        return circleStrokeColor4\r\n      default:\r\n        return '#00bebe'\r\n    }\r\n  }\r\n\r\n  const label = svg\r\n    .append('g')\r\n    .attr('class', 'labels')\r\n    .selectAll('text')\r\n    .data(nodes)\r\n    .enter()\r\n    .append('text')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('dominant-baseline', 'central')\r\n    .attr('class', (d) => {\r\n      return d.index\r\n    })\r\n    //.attr(\"class\", )\r\n    .text((d) => {\r\n      return d.label\r\n    })\r\n    .style('font-weight', 'bold')\r\n    .style('fill', '#fff')\r\n    .call(drag(simulation))\r\n\r\n  // Add the tooltip element to the graph\r\n  const tooltip = d3.select(container).append('div')\r\n\r\n  const addTooltip = (hoverTooltip, node, x, y) => {\r\n    //  tooltip // tooltip is just div. how add transition?\r\n    //  .transition()\r\n    //    .duration(200)\r\n    tooltip\r\n      .html(hoverTooltip(node))\r\n      .attr('class', 'tooltip')\r\n      .style('left', `${x + 40}px`)\r\n      .style('top', `${y - 120}px`)\r\n      .style('opacity', 0.99)\r\n  }\r\n\r\n  const removeTooltip = () => {\r\n    tooltip\r\n      //  .transition()\r\n      //  .duration(200)\r\n      .style('opacity', 0)\r\n  }\r\n\r\n  node\r\n    .on('mouseover', (d) => {\r\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY)\r\n      fadeExceptSelected(d)\r\n      node.style('cursor', 'pointer')\r\n    })\r\n    .on('mouseout', (d) => {\r\n      removeTooltip()\r\n      node.style('opacity', '1')\r\n      link.style('opacity', '1')\r\n      //  container.querySelectorAll('circle').forEach((element)=>{\r\n      //  element.style.fill=matchColorForGroup(element)\r\n      //  })\r\n    })\r\n    .on('click', () => {\r\n      window.location.href = `/subjects/${category}`\r\n    })\r\n\r\n  label\r\n    .on('mouseover', (d) => {\r\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY)\r\n      fadeExceptSelected(d)\r\n      label.style('cursor', 'pointer')\r\n    })\r\n    .on('mouseout', () => {\r\n      removeTooltip()\r\n      node.style('opacity', '1')\r\n      link.style('opacity', '1')\r\n    })\r\n    .on('click', () => {\r\n      window.location.href = `/subjects/${category}`\r\n    })\r\n\r\n  function fadeExceptSelected(selectedNode) {\r\n    node.style('opacity', '0.2')\r\n    link.style('opacity', '0.1')\r\n    //const displayedNodes = []\r\n    //const displayedLinks = []\r\n\r\n    links.map((linkElement) => {\r\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\r\n      if (linkElement.source.id === selectedNode.id) {\r\n        //selectedNode.style(\"opacity\" ,\"0.1\")\r\n        container.querySelector(\r\n          `circle.node${linkElement.target.id}`\r\n        ).style.opacity = '1'\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1'\r\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\r\n          '1'\r\n        //displayedLinks.push(linkElement)\r\n        //displayedNodes.push(nodes[linkElement.target.id])\r\n        //console.log(\"to: \",nodes[linkElement.target.id])\r\n      } else if (linkElement.target.id === selectedNode.id) {\r\n        container.querySelector(\r\n          `circle.node${linkElement.source.id}`\r\n        ).style.opacity = '1'\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1'\r\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\r\n          '1'\r\n        //displayedLinks.push(linkElement)\r\n        //displayedNodes.push(nodes[linkElement.source.id])\r\n        //console.log(\"from: \",nodes[linkElement.source.id])\r\n      } else {\r\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\r\n          '1'\r\n      }\r\n      //console.log(displayedNodes)\r\n      //displayedNodes.map((element)=>{\r\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\r\n      //node.select(element).style('opacity',\"1\")\r\n      //})\r\n\r\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\r\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\r\n      // dom 트리상의 문제가 없음.\r\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\r\n    })\r\n  }\r\n\r\n  function tick() {\r\n    //update link positions\r\n    link\r\n      .attr('x1', function (d) {\r\n        return xScale(d.source.x)\r\n      })\r\n      .attr('y1', function (d) {\r\n        return yScale(d.source.y)\r\n      })\r\n      .attr('x2', function (d) {\r\n        return xScale(d.target.x)\r\n      })\r\n      .attr('y2', function (d) {\r\n        return yScale(d.target.y)\r\n      })\r\n\r\n    // update node positions\r\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y))\r\n\r\n    // update label positions\r\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y))\r\n  }\r\n\r\n  simulation.on('tick', tick)\r\n\r\n  return {\r\n    destroy: () => {\r\n      simulation.stop()\r\n    },\r\n    nodes: () => {\r\n      return svg.node()\r\n    },\r\n  }\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\home\\SubjectBlock.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\katexWhiteList.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\TagBlock.js",["287"],"import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledTagBlock = styled.div`\r\n  display: inline-flex;\r\n  border-radius: 5px;\r\n  background: #00bebe;\r\n  color: #ffffff;\r\n  padding: 2px 2px;\r\n  margin: 2px 2px 0 2px;\r\n  width: inherit;\r\n  opacity: 0.8;\r\n  &:hover {\r\n    background: #00bebe;\r\n    color: #ffffff;\r\n    transition: all ease-in 0.2s;\r\n    opacity: 1;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const TagBlock = React.memo(({ text, functionProps }) => {\r\n  const onClickTag = useCallback((e) => {\r\n    alert('tag is clicked!')\r\n  })\r\n  return <StyledTagBlock onClick={onClickTag}>{text}</StyledTagBlock>\r\n})\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\CommentListBlock.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\Navbar.js",["288","289","290","291","292","293"],"import React, { useState, useCallback } from 'react'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport '../../styles/layout/Header.scss'\r\nimport { FaTimes, FaBars } from 'react-icons/fa'\r\nimport { LoginModal } from './LoginModal'\r\n\r\nexport default function Navbar() {\r\n  const router = useHistory()\r\n  const searchQuestions = (e) => {\r\n    if (e.code === 'Enter' && searchValue !== '') {\r\n      // 시큐어 코딩 필요\r\n      router.push({\r\n        pathname: `/searched/${searchValue}/1`,\r\n        // 기존 쿼리 방식 삭제\r\n        // search: `?query=${searchValue}`,\r\n      })\r\n    }\r\n  }\r\n  const userInfo = JSON.parse(localStorage.getItem('user'))\r\n  // useSelector: 리덕스 스토어의 상태를 조회하는 hooks.\r\n  // state 의 값은 리덕스 스토에다가 getState() 를 호출했을때 나오는 값과 같음.\r\n  const { userID, userNickname, loginState } = useSelector((state) => {\r\n    // console.log('useSelector:')\r\n    return {\r\n      userID: state.auth.userID,\r\n      userNickname: state.auth.userNickname,\r\n    }\r\n  })\r\n\r\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\r\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\r\n\r\n  const [menuClick, setMenuClick] = useState(false)\r\n\r\n  const handleMenuClick = () => setMenuClick(!menuClick)\r\n  const closeMobileMenu = () => setMenuClick(false)\r\n\r\n  const [searchValue, setSearchValue] = useState('')\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-container\">\r\n        <div className=\"logo-container\">\r\n          <NavLink to=\"/\" className=\"logo\">\r\n            Tect.dev\r\n          </NavLink>\r\n        </div>\r\n        <div className=\"menu-icon\" onClick={handleMenuClick}>\r\n          {menuClick ? <FaTimes /> : <FaBars />}\r\n        </div>\r\n        <nav className=\"navbar\">\r\n          <ul\r\n            className={\r\n              menuClick ? 'navbar-container clicked' : 'navbar-container'\r\n            }\r\n          >\r\n            <li className=\"navbar-item\">\r\n              <NavLink\r\n                to={{ pathname: '/question/list/1' }}\r\n                className=\"navbar-item-link\"\r\n              >\r\n                Q {`\\&`} A\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navbar-item\">\r\n              <NavLink to=\"/article\" className=\"navbar-item-link\">\r\n                Article\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navbar-item\">\r\n              <NavLink to=\"/freeboard\" className=\"navbar-item-link\">\r\n                Freeboard\r\n              </NavLink>\r\n            </li>\r\n            <div className=\"header-search\">\r\n              <input\r\n                className=\"header-search-input\"\r\n                placeholder=\"Search...\"\r\n                value={searchValue}\r\n                onKeyPress={(e) => {\r\n                  searchQuestions(e)\r\n                }}\r\n                onChange={(e) => {\r\n                  setSearchValue(e.target.value)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"auth-container\">\r\n              {userInfo ? (\r\n                <div className=\"mypage-container\">\r\n                  <NavLink\r\n                    to={`/user/${userID}`}\r\n                    className=\"navbar-item-link\"\r\n                    onChange={() => {}}\r\n                  >\r\n                    MyPage\r\n                  </NavLink>\r\n                </div>\r\n              ) : (\r\n                <div className=\"login-container\">\r\n                  <input\r\n                    className=\"login-modal-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"login-popup\"\r\n                  />\r\n                  <label htmlFor=\"login-popup\" className=\"login-modal-btn\">\r\n                    Login\r\n                  </label>\r\n                  <LoginModal labelFor=\"login-popup\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\MarkdownEditorBlock.js",["294","295","296","297","298"],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\Footer.js",["299"],"import { Link } from 'react-router-dom';\r\nimport '../../styles/layout/Footer.scss';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <>\r\n      <footer className=\"footer\">\r\n        <div className=\"footer-container\">\r\n          {/* <div>기업 푸터</div>\r\n          <div>일반: 전화번호, 이메일, 계좌정보 </div>\r\n          <div>고객센터 : 전화, 팩스, 이메일, 카카오톡ID(혹은 링크) 상담가능 일시</div>\r\n          <div>법인 : 상호, 대표, 주소, 개인정보관리 책임자, 사업자 등록번호, 통신판매업 신고</div>\r\n          <div> 계좌번호 목록</div>\r\n          <div>회사소개, 개인정보보호정책/처리방침, 이용약관, 사이트맵</div>\r\n          <div>SNS 링크</div>\r\n          <div>별도의 Contact us도 필요한가</div> */}\r\n          footer\r\n        </div>\r\n      </footer>\r\n      {/* <ul>\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/about\" className=\"nav-links\">\r\n            About Tect.dev\r\n          </Link>\r\n        </li>\r\n      </ul> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\prismPlugin.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\prismThemes.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\lib\\constants.js",[],"C:\\Users\\Administrator\\Documents\\GitHub\\front-react\\src\\components\\layout\\LoginModal.js",["300","301","302","303"],"import React, { useCallback, useState } from 'react'\r\nimport '../../styles/layout/LoginModal.scss'\r\nimport { Button } from '../Button'\r\nimport { emailLogin, emailSignUp } from '../../redux/auth'\r\nimport { useDispatch } from 'react-redux'\r\nimport { onClickTag } from '../../lib/functions'\r\n\r\nexport const LoginModal = React.memo(({ labelFor }) => {\r\n  const dispatch = useDispatch()\r\n  const [email, setEmail] = useState()\r\n  const [password, setPassword] = useState()\r\n  const [nickname, setNickname] = useState()\r\n  const [isSignUp, setIsSignUp] = useState(false)\r\n\r\n  // 굉장히 fancy한 방법인데 콘솔창이 경고를 띄운다..\r\n  //const onChange = (e) => {\r\n  //  const {\r\n  //    target: { name, value },\r\n  //  } = e\r\n  //  if (name === 'email') {\r\n  //    setEmail(value)\r\n  //  } else if (name === 'password') {\r\n  //    setPassword(value)\r\n  //  }\r\n  //}\r\n\r\n  const onChangeEmail = useCallback(\r\n    (e) => {\r\n      setEmail(e.target.value)\r\n    },\r\n    [email]\r\n  )\r\n\r\n  const onChangePassword = useCallback(\r\n    (e) => {\r\n      setPassword(e.target.value)\r\n    },\r\n    [password]\r\n  )\r\n\r\n  const onChangeNickname = useCallback(\r\n    (e) => {\r\n      setNickname(e.target.value)\r\n    },\r\n    [nickname]\r\n  )\r\n\r\n  const onEmailLogin = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      dispatch(emailLogin(email, password))\r\n    },\r\n    [dispatch, email, password]\r\n  )\r\n\r\n  const onEmailSignUp = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      dispatch(emailSignUp(email, password, nickname))\r\n    },\r\n    [dispatch, email, password, nickname]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className=\"login-modal\">\r\n        <div className=\"login-modal-display\">\r\n          <label className=\"login-modal-close-btn\" htmlFor={labelFor} />\r\n\r\n          <div className=\"login-modal-display-logo\">Login</div>\r\n          <div className=\"login-modal-display-body\">\r\n            <form name=\"devguru-auth\" className=\"login-form\" autoComplete=\"off\">\r\n              <input\r\n                id=\"login-id-input\"\r\n                className=\"login-input\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Login Email\"\r\n                required\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={onChangeEmail}\r\n              />\r\n              <input\r\n                id=\"login-pw-input\"\r\n                className=\"login-input\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                required\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={onChangePassword}\r\n              />\r\n              {isSignUp ? (\r\n                <input\r\n                  className=\"login-input\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Nickname\"\r\n                  required\r\n                  name=\"nickname\"\r\n                  value={nickname}\r\n                  onChange={onChangeNickname}\r\n                />\r\n              ) : (\r\n                ''\r\n              )}\r\n\r\n              {isSignUp ? (\r\n                <Button className=\"login-submit\" onClick={onEmailSignUp}>\r\n                  Sign Up\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  {' '}\r\n                  <Button className=\"login-submit\" onClick={onEmailLogin}>\r\n                    Login\r\n                  </Button>\r\n                  <Button\r\n                    className=\"login-submit\"\r\n                    onClick={() => {\r\n                      setIsSignUp(true)\r\n                    }}\r\n                  >\r\n                    Sign Up?\r\n                  </Button>\r\n                </>\r\n              )}\r\n\r\n              <div className=\"auth-help\">\r\n                <div className=\"auth-help-element\">\r\n                  <input id=\"rememberUser\" type=\"radio\" name=\"Remember Me\" />\r\n                  <label htmlFor=\"rememberUser\"> Remember Me</label>\r\n                </div>\r\n                <div className=\"auth-help-element\">Forgot ID/PW?</div>\r\n              </div>\r\n              <div className=\"authProviders\">\r\n                <div>Google</div>\r\n                <div>Facebook</div>\r\n                <div>Github</div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <label className=\"login-modal-close-area\" htmlFor={labelFor} />\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n",{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":1,"column":28,"nodeType":"310","messageId":"311","endLine":1,"endColumn":36},{"ruleId":"308","severity":1,"message":"312","line":1,"column":38,"nodeType":"310","messageId":"311","endLine":1,"endColumn":53},{"ruleId":"308","severity":1,"message":"313","line":14,"column":10,"nodeType":"310","messageId":"311","endLine":14,"endColumn":21},{"ruleId":"314","severity":1,"message":"315","line":34,"column":6,"nodeType":"316","endLine":34,"endColumn":8,"suggestions":"317"},{"ruleId":"308","severity":1,"message":"318","line":1,"column":23,"nodeType":"310","messageId":"311","endLine":1,"endColumn":39},{"ruleId":"308","severity":1,"message":"319","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"320","line":1,"column":28,"nodeType":"310","messageId":"311","endLine":1,"endColumn":39},{"ruleId":"308","severity":1,"message":"309","line":1,"column":41,"nodeType":"310","messageId":"311","endLine":1,"endColumn":49},{"ruleId":"308","severity":1,"message":"321","line":3,"column":10,"nodeType":"310","messageId":"311","endLine":3,"endColumn":21},{"ruleId":"314","severity":1,"message":"322","line":35,"column":6,"nodeType":"316","endLine":35,"endColumn":29,"suggestions":"323"},{"ruleId":"308","severity":1,"message":"319","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"320","line":1,"column":28,"nodeType":"310","messageId":"311","endLine":1,"endColumn":39},{"ruleId":"308","severity":1,"message":"309","line":1,"column":41,"nodeType":"310","messageId":"311","endLine":1,"endColumn":49},{"ruleId":"308","severity":1,"message":"324","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":18},{"ruleId":"308","severity":1,"message":"325","line":3,"column":8,"nodeType":"310","messageId":"311","endLine":3,"endColumn":18},{"ruleId":"308","severity":1,"message":"326","line":5,"column":23,"nodeType":"310","messageId":"311","endLine":5,"endColumn":34},{"ruleId":"308","severity":1,"message":"327","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":30},{"ruleId":"308","severity":1,"message":"328","line":11,"column":17,"nodeType":"310","messageId":"311","endLine":11,"endColumn":23},{"ruleId":"308","severity":1,"message":"329","line":21,"column":9,"nodeType":"310","messageId":"311","endLine":21,"endColumn":16},{"ruleId":"330","severity":1,"message":"331","line":59,"column":15,"nodeType":"332","endLine":59,"endColumn":71},{"ruleId":"330","severity":1,"message":"331","line":65,"column":15,"nodeType":"332","endLine":65,"endColumn":72},{"ruleId":"330","severity":1,"message":"331","line":71,"column":15,"nodeType":"332","endLine":71,"endColumn":75},{"ruleId":"330","severity":1,"message":"331","line":77,"column":15,"nodeType":"332","endLine":77,"endColumn":69},{"ruleId":"330","severity":1,"message":"331","line":83,"column":15,"nodeType":"332","endLine":83,"endColumn":74},{"ruleId":"330","severity":1,"message":"331","line":89,"column":15,"nodeType":"332","endLine":89,"endColumn":68},{"ruleId":"308","severity":1,"message":"320","line":1,"column":10,"nodeType":"310","messageId":"311","endLine":1,"endColumn":21},{"ruleId":"308","severity":1,"message":"309","line":1,"column":23,"nodeType":"310","messageId":"311","endLine":1,"endColumn":31},{"ruleId":"308","severity":1,"message":"333","line":6,"column":8,"nodeType":"310","messageId":"311","endLine":6,"endColumn":21},{"ruleId":"314","severity":1,"message":"334","line":32,"column":6,"nodeType":"316","endLine":32,"endColumn":16,"suggestions":"335"},{"ruleId":"308","severity":1,"message":"336","line":1,"column":30,"nodeType":"310","messageId":"311","endLine":1,"endColumn":43},{"ruleId":"308","severity":1,"message":"337","line":9,"column":17,"nodeType":"310","messageId":"311","endLine":9,"endColumn":27},{"ruleId":"330","severity":1,"message":"331","line":24,"column":15,"nodeType":"332","endLine":24,"endColumn":131},{"ruleId":"308","severity":1,"message":"338","line":35,"column":7,"nodeType":"310","messageId":"311","endLine":35,"endColumn":25},{"ruleId":"308","severity":1,"message":"339","line":36,"column":7,"nodeType":"310","messageId":"311","endLine":36,"endColumn":29},{"ruleId":"308","severity":1,"message":"340","line":37,"column":7,"nodeType":"310","messageId":"311","endLine":37,"endColumn":26},{"ruleId":"308","severity":1,"message":"341","line":23,"column":7,"nodeType":"310","messageId":"311","endLine":23,"endColumn":25},{"ruleId":"308","severity":1,"message":"342","line":24,"column":7,"nodeType":"310","messageId":"311","endLine":24,"endColumn":29},{"ruleId":"308","severity":1,"message":"343","line":25,"column":7,"nodeType":"310","messageId":"311","endLine":25,"endColumn":26},{"ruleId":"308","severity":1,"message":"344","line":20,"column":19,"nodeType":"310","messageId":"311","endLine":20,"endColumn":29},{"ruleId":"308","severity":1,"message":"345","line":24,"column":22,"nodeType":"310","messageId":"311","endLine":24,"endColumn":35},{"ruleId":"308","severity":1,"message":"346","line":25,"column":20,"nodeType":"310","messageId":"311","endLine":25,"endColumn":31},{"ruleId":"347","severity":1,"message":"348","line":39,"column":44,"nodeType":"349","messageId":"350","endLine":39,"endColumn":46},{"ruleId":"347","severity":1,"message":"351","line":106,"column":35,"nodeType":"349","messageId":"350","endLine":106,"endColumn":37},{"ruleId":"347","severity":1,"message":"351","line":129,"column":35,"nodeType":"349","messageId":"350","endLine":129,"endColumn":37},{"ruleId":"308","severity":1,"message":"319","line":1,"column":40,"nodeType":"310","messageId":"311","endLine":1,"endColumn":49},{"ruleId":"308","severity":1,"message":"352","line":4,"column":8,"nodeType":"310","messageId":"311","endLine":4,"endColumn":24},{"ruleId":"308","severity":1,"message":"353","line":5,"column":8,"nodeType":"310","messageId":"311","endLine":5,"endColumn":27},{"ruleId":"308","severity":1,"message":"354","line":10,"column":26,"nodeType":"310","messageId":"311","endLine":10,"endColumn":39},{"ruleId":"308","severity":1,"message":"355","line":19,"column":12,"nodeType":"310","messageId":"311","endLine":19,"endColumn":27},{"ruleId":"314","severity":1,"message":"356","line":28,"column":6,"nodeType":"316","endLine":28,"endColumn":16,"suggestions":"357"},{"ruleId":"308","severity":1,"message":"354","line":30,"column":12,"nodeType":"310","messageId":"311","endLine":30,"endColumn":25},{"ruleId":"308","severity":1,"message":"358","line":34,"column":9,"nodeType":"310","messageId":"311","endLine":34,"endColumn":24},{"ruleId":"308","severity":1,"message":"359","line":15,"column":24,"nodeType":"310","messageId":"311","endLine":15,"endColumn":34},{"ruleId":"360","severity":1,"message":"361","line":19,"column":23,"nodeType":"362","messageId":"363","endLine":19,"endColumn":24,"suggestions":"364"},{"ruleId":"314","severity":1,"message":"365","line":34,"column":5,"nodeType":"316","endLine":34,"endColumn":12,"suggestions":"366"},{"ruleId":"314","severity":1,"message":"367","line":48,"column":6,"nodeType":"316","endLine":48,"endColumn":19,"suggestions":"368"},{"ruleId":"314","severity":1,"message":"369","line":62,"column":5,"nodeType":"316","endLine":62,"endColumn":18,"suggestions":"370"},{"ruleId":"314","severity":1,"message":"371","line":85,"column":5,"nodeType":"316","endLine":85,"endColumn":34,"suggestions":"372"},{"ruleId":"308","severity":1,"message":"373","line":152,"column":7,"nodeType":"310","messageId":"311","endLine":152,"endColumn":22},{"ruleId":"308","severity":1,"message":"319","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":26},{"ruleId":"308","severity":1,"message":"352","line":3,"column":8,"nodeType":"310","messageId":"311","endLine":3,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":21,"column":30,"nodeType":"376","messageId":"377","endLine":21,"endColumn":32},{"ruleId":"308","severity":1,"message":"378","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":13},{"ruleId":"360","severity":1,"message":"361","line":22,"column":61,"nodeType":"379","messageId":"363","endLine":22,"endColumn":62,"suggestions":"380"},{"ruleId":"360","severity":1,"message":"361","line":28,"column":23,"nodeType":"362","messageId":"363","endLine":28,"endColumn":24,"suggestions":"381"},{"ruleId":"314","severity":1,"message":"382","line":75,"column":5,"nodeType":"316","endLine":75,"endColumn":30,"suggestions":"383"},{"ruleId":"308","severity":1,"message":"373","line":163,"column":7,"nodeType":"310","messageId":"311","endLine":163,"endColumn":22},{"ruleId":"308","severity":1,"message":"384","line":39,"column":9,"nodeType":"310","messageId":"311","endLine":39,"endColumn":22},{"ruleId":"308","severity":1,"message":"385","line":48,"column":9,"nodeType":"310","messageId":"311","endLine":48,"endColumn":26},{"ruleId":"308","severity":1,"message":"386","line":52,"column":11,"nodeType":"310","messageId":"311","endLine":52,"endColumn":20},{"ruleId":"308","severity":1,"message":"387","line":171,"column":12,"nodeType":"310","messageId":"311","endLine":171,"endColumn":30},{"ruleId":"374","severity":1,"message":"388","line":267,"column":29,"nodeType":"376","messageId":"377","endLine":267,"endColumn":31},{"ruleId":"314","severity":1,"message":"389","line":23,"column":22,"nodeType":"310","endLine":23,"endColumn":33},{"ruleId":"308","severity":1,"message":"320","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":38},{"ruleId":"308","severity":1,"message":"326","line":3,"column":23,"nodeType":"310","messageId":"311","endLine":3,"endColumn":34},{"ruleId":"308","severity":1,"message":"390","line":23,"column":19,"nodeType":"310","messageId":"311","endLine":23,"endColumn":31},{"ruleId":"308","severity":1,"message":"391","line":23,"column":33,"nodeType":"310","messageId":"311","endLine":23,"endColumn":43},{"ruleId":"308","severity":1,"message":"392","line":37,"column":9,"nodeType":"310","messageId":"311","endLine":37,"endColumn":24},{"ruleId":"360","severity":1,"message":"393","line":63,"column":21,"nodeType":"379","messageId":"363","endLine":63,"endColumn":22,"suggestions":"394"},{"ruleId":"308","severity":1,"message":"319","line":1,"column":30,"nodeType":"310","messageId":"311","endLine":1,"endColumn":39},{"ruleId":"308","severity":1,"message":"395","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":16},{"ruleId":"308","severity":1,"message":"359","line":13,"column":10,"nodeType":"310","messageId":"311","endLine":13,"endColumn":20},{"ruleId":"314","severity":1,"message":"389","line":34,"column":18,"nodeType":"310","endLine":34,"endColumn":29},{"ruleId":"308","severity":1,"message":"396","line":112,"column":9,"nodeType":"310","messageId":"311","endLine":112,"endColumn":22},{"ruleId":"308","severity":1,"message":"397","line":1,"column":10,"nodeType":"310","messageId":"311","endLine":1,"endColumn":14},{"ruleId":"308","severity":1,"message":"398","line":6,"column":10,"nodeType":"310","messageId":"311","endLine":6,"endColumn":20},{"ruleId":"314","severity":1,"message":"399","line":31,"column":5,"nodeType":"316","endLine":31,"endColumn":12,"suggestions":"400"},{"ruleId":"314","severity":1,"message":"401","line":38,"column":5,"nodeType":"316","endLine":38,"endColumn":15,"suggestions":"402"},{"ruleId":"314","severity":1,"message":"403","line":45,"column":5,"nodeType":"316","endLine":45,"endColumn":15,"suggestions":"404"},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["407"],"'firebaseInstance' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'getSearchResultsAsync'. Either include it or remove the dependency array.",["408"],"'useInput' is defined but never used.","'MainLayout' is defined but never used.","'useDispatch' is defined but never used.","'MarkdownRenderingBlock' is defined but never used.","'userID' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'QuestionBlock' is defined but never used.","React Hook useEffect has a missing dependency: 'getQuestionAsync'. Either include it or remove the dependency array.",["409"],"'useDebugValue' is defined but never used.","'myNickname' is assigned a value but never used.","'CREATE_COMMENT_TRY' is assigned a value but never used.","'CREATE_COMMENT_SUCCESS' is assigned a value but never used.","'CREATE_COMMENT_FAIL' is assigned a value but never used.","'UPDATE_COMMENT_TRY' is assigned a value but never used.","'UPDATE_COMMENT_SUCCESS' is assigned a value but never used.","'UPDATE_COMMENT_FAIL' is assigned a value but never used.","'setPerPage' is assigned a value but never used.","'setBtnShowNum' is assigned a value but never used.","'setPageBtns' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'CommentListBlock' is defined but never used.","'MarkdownEditorBlock' is defined but never used.","'deleteComment' is defined but never used.","'onChangeContent' is defined but never used.","React Hook useCallback has a missing dependency: 'data.question._id'. Either include it or remove the dependency array.",["410"],"'onSubmitComment' is assigned a value but never used.","'mediaQuery' is defined but never used.","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["411","412"],"React Hook useCallback has an unnecessary dependency: 'title'. Either exclude it or remove the dependency array.",["413"],"React Hook useEffect has a missing dependency: 'hashtagText'. Either include it or remove the dependency array. You can also do a functional update 'setHashtagText(h => ...)' if you only need 'hashtagText' in the 'setHashtagText' call.",["414"],"React Hook useCallback has a missing dependency: 'splitPoint'. Either include it or remove the dependency array.",["415"],"React Hook useCallback has missing dependencies: 'dispatch', 'userID', and 'userNickname'. Either include them or remove the dependency array.",["416"],"'EditorContainer' is assigned a value but never used.","array-callback-return","Array.prototype.sort() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'uid' is defined but never used.","TemplateElement",["417","418"],["419","420"],"React Hook useCallback has an unnecessary dependency: 'hashtagText'. Either exclude it or remove the dependency array.",["421"],"'containerRect' is assigned a value but never used.","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'userNickname' is assigned a value but never used.","'loginState' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","Unnecessary escape character: \\&.",["422","423"],"'Button' is defined but never used.","'addSmallTitle' is assigned a value but never used.","'Link' is defined but never used.","'onClickTag' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'email'. Either exclude it or remove the dependency array.",["424"],"React Hook useCallback has an unnecessary dependency: 'password'. Either exclude it or remove the dependency array.",["425"],"React Hook useCallback has an unnecessary dependency: 'nickname'. Either exclude it or remove the dependency array.",["426"],"no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"messageId":"435","fix":"436","desc":"437"},{"messageId":"438","fix":"439","desc":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"messageId":"435","fix":"449","desc":"437"},{"messageId":"438","fix":"450","desc":"440"},{"messageId":"435","fix":"451","desc":"437"},{"messageId":"438","fix":"452","desc":"440"},{"desc":"445","fix":"453"},{"messageId":"435","fix":"454","desc":"437"},{"messageId":"438","fix":"455","desc":"440"},{"desc":"441","fix":"456"},{"desc":"441","fix":"457"},{"desc":"441","fix":"458"},"Update the dependencies array to be: [dispatch]",{"range":"459","text":"460"},"Update the dependencies array to be: [dispatch, getSearchResultsAsync, searchValue]",{"range":"461","text":"462"},"Update the dependencies array to be: [dispatch, getQuestionAsync]",{"range":"463","text":"464"},"Update the dependencies array to be: [data.question._id, dispatch]",{"range":"465","text":"466"},"removeEscape",{"range":"467","text":"468"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"469","text":"470"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: []",{"range":"471","text":"472"},"Update the dependencies array to be: [hashtagList, hashtagText]",{"range":"473","text":"474"},"Update the dependencies array to be: [splitPoint]",{"range":"475","text":"476"},"Update the dependencies array to be: [title, content, userID, userNickname, hashtagList, dispatch]",{"range":"477","text":"478"},{"range":"479","text":"468"},{"range":"480","text":"470"},{"range":"481","text":"468"},{"range":"482","text":"470"},{"range":"483","text":"476"},{"range":"484","text":"468"},{"range":"485","text":"470"},{"range":"486","text":"472"},{"range":"487","text":"472"},{"range":"488","text":"472"},[1344,1346],"[dispatch]",[1210,1233],"[dispatch, getSearchResultsAsync, searchValue]",[1162,1172],"[dispatch, getQuestionAsync]",[992,1002],"[data.question._id, dispatch]",[859,860],"",[859,859],"\\",[1192,1199],"[]",[1506,1519],"[hashtagList, hashtagText]",[1941,1954],"[splitPoint]",[2458,2487],"[title, content, userID, userNickname, hashtagList, dispatch]",[999,1000],[999,999],[1194,1195],[1194,1194],[2395,2420],[2114,2115],[2114,2114],[937,944],[1055,1065],[1176,1186]]