[{"/Users/zowan/Documents/web/tect-react/src/index.js":"1","/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js":"2","/Users/zowan/Documents/web/tect-react/src/App.js":"3","/Users/zowan/Documents/web/tect-react/src/redux/index.js":"4","/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js":"5","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js":"6","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js":"7","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js":"8","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js":"9","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js":"10","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js":"11","/Users/zowan/Documents/web/tect-react/src/redux/auth.js":"12","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js":"13","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js":"14","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js":"15","/Users/zowan/Documents/web/tect-react/src/redux/createPost.js":"16","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js":"17","/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js":"18","/Users/zowan/Documents/web/tect-react/src/components/Button.js":"19","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js":"20","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js":"21","/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js":"22","/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js":"23","/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js":"24","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js":"25","/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js":"26","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js":"27","/Users/zowan/Documents/web/tect-react/src/lib/functions.js":"28","/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js":"29","/Users/zowan/Documents/web/tect-react/src/lib/katexWhiteList.js":"30","/Users/zowan/Documents/web/tect-react/src/lib/prismPlugin.js":"31","/Users/zowan/Documents/web/tect-react/src/lib/prismThemes.js":"32","/Users/zowan/Documents/web/tect-react/src/components/MarkdownRenderingBlock.js":"33","/Users/zowan/Documents/web/tect-react/src/components/MarkdownEditorBlock.js":"34","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionSection.js":"35","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerSection.js":"36","/Users/zowan/Documents/web/tect-react/src/components/CommentListBlock.js":"37","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteSection.js":"38","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionEditPage.js":"39","/Users/zowan/Documents/web/tect-react/src/components/layout/Navbar.js":"40","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionEditSection.js":"41","/Users/zowan/Documents/web/tect-react/src/components/Spinner.js":"42","/Users/zowan/Documents/web/tect-react/src/components/TagBlock.js":"43","/Users/zowan/Documents/web/tect-react/src/lib/constants.js":"44","/Users/zowan/Documents/web/tect-react/src/components/layout/HalfWidthContainer.js":"45","/Users/zowan/Documents/web/tect-react/src/lib/firebase.js":"46"},{"size":1194,"mtime":1610713053666,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1609067299109,"results":"49","hashOfConfig":"48"},{"size":2715,"mtime":1610851101936,"results":"50","hashOfConfig":"48"},{"size":475,"mtime":1610548690817,"results":"51","hashOfConfig":"48"},{"size":194,"mtime":1610459759726,"results":"52","hashOfConfig":"48"},{"size":199,"mtime":1610459759727,"results":"53","hashOfConfig":"48"},{"size":199,"mtime":1610459759727,"results":"54","hashOfConfig":"48"},{"size":481,"mtime":1610801852695,"results":"55","hashOfConfig":"48"},{"size":2713,"mtime":1610813260900,"results":"56","hashOfConfig":"48"},{"size":1726,"mtime":1610811385054,"results":"57","hashOfConfig":"48"},{"size":1490,"mtime":1610800333799,"results":"58","hashOfConfig":"48"},{"size":5104,"mtime":1610814507601,"results":"59","hashOfConfig":"48"},{"size":5335,"mtime":1610713053668,"results":"60","hashOfConfig":"48"},{"size":3951,"mtime":1610777965350,"results":"61","hashOfConfig":"48"},{"size":4220,"mtime":1610777514890,"results":"62","hashOfConfig":"48"},{"size":4389,"mtime":1610713053668,"results":"63","hashOfConfig":"48"},{"size":2844,"mtime":1610459759727,"results":"64","hashOfConfig":"48"},{"size":326,"mtime":1610800964607,"results":"65","hashOfConfig":"48"},{"size":617,"mtime":1610459759720,"results":"66","hashOfConfig":"48"},{"size":1284,"mtime":1610713053665,"results":"67","hashOfConfig":"48"},{"size":1998,"mtime":1610517837915,"results":"68","hashOfConfig":"48"},{"size":1180,"mtime":1609738809560,"results":"69","hashOfConfig":"48"},{"size":10351,"mtime":1610245309618,"results":"70","hashOfConfig":"48"},{"size":308,"mtime":1609738809558,"results":"71","hashOfConfig":"48"},{"size":9940,"mtime":1610713053663,"results":"72","hashOfConfig":"48"},{"size":1040,"mtime":1610459759721,"results":"73","hashOfConfig":"48"},{"size":250,"mtime":1609249874876,"results":"74","hashOfConfig":"48"},{"size":1960,"mtime":1610798942346,"results":"75","hashOfConfig":"48"},{"size":3279,"mtime":1610812237396,"results":"76","hashOfConfig":"48"},{"size":987,"mtime":1610459759726,"results":"77","hashOfConfig":"48"},{"size":2471,"mtime":1610459759726,"results":"78","hashOfConfig":"48"},{"size":20436,"mtime":1610773516140,"results":"79","hashOfConfig":"48"},{"size":3299,"mtime":1610792417432,"results":"80","hashOfConfig":"48"},{"size":4028,"mtime":1610799749329,"results":"81","hashOfConfig":"48"},{"size":3193,"mtime":1610801475144,"results":"82","hashOfConfig":"48"},{"size":6828,"mtime":1610802924123,"results":"83","hashOfConfig":"48"},{"size":398,"mtime":1610548690811,"results":"84","hashOfConfig":"48"},{"size":4608,"mtime":1610802679839,"results":"85","hashOfConfig":"48"},{"size":1249,"mtime":1610713053667,"results":"86","hashOfConfig":"48"},{"size":5493,"mtime":1610850876377,"results":"87","hashOfConfig":"48"},{"size":4001,"mtime":1610800133499,"results":"88","hashOfConfig":"48"},{"size":211,"mtime":1610716749690,"results":"89","hashOfConfig":"48"},{"size":634,"mtime":1610774628158,"results":"90","hashOfConfig":"48"},{"size":1014,"mtime":1610792336481,"results":"91","hashOfConfig":"48"},{"size":428,"mtime":1610802532909,"results":"92","hashOfConfig":"48"},{"size":682,"mtime":1610851768296,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"xgtey9",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"96"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zowan/Documents/web/tect-react/src/index.js",[],["211","212"],"/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js",[],"/Users/zowan/Documents/web/tect-react/src/App.js",["213","214","215"],"import React, { useEffect, useState, useLayoutEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport HomePage from './pages/HomePage'\nimport AboutPage from './pages/AboutPage'\nimport QuestionListPage from './pages/question/QuestionListPage'\nimport QuestionWritePage from './pages/question/QuestionWritePage'\nimport QuestionEditPage from './pages/question/QuestionEditPage'\nimport QuestionDetailPage from './pages/question/QuestionDetailPage'\nimport ProfilePage from './pages/user/ProfilePage'\nimport LoginPage from './pages/LoginPage'\nimport NotFoundPage from './pages/NotFoundPage'\nimport './App.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { checkAuth } from './redux/auth'\nimport { authService } from './lib/firebase'\n\nexport default function App() {\n  const dispatch = useDispatch()\n\n  useLayoutEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        console.log('user: ', user)\n        //localStorage.setItem(\n        //  'FE37F882DCF4A30642E6B59D595F0760B0F1C3FE86F466922270B61E6D09106D',\n        //  true\n        //)\n        dispatch(checkAuth(user))\n      } else {\n        console.log('user: ', user)\n        // localStorage.removeItem(\n        //   'FE37F882DCF4A30642E6B59D595F0760B0F1C3FE86F466922270B61E6D09106D'\n        // )\n      }\n    })\n    console.log('useLayoutEffect:')\n  }, [])\n\n  useEffect(() => {\n    console.log('useEffect:')\n  }, [])\n\n  return (\n    <>\n      {/* head 파일을 여기다 적으면, index.html 의 body 태그 하위로 들어가는듯. 그래서 콘솔이 에러를 낸다. react helmet 같은 라이브러리를 써야할듯 */}\n      <head>\n        <meta name=\"description\" content=\"세상 모든 테크트리, tect.dev\" />\n        <link\n          href=\"https://myCDN.com/prism@v1.x/themes/prism.css\"\n          rel=\"stylesheet\"\n        />\n      </head>\n      {/* 라우트를 Switch 로 감싸면, 매칭되는 첫번째 페이지만 렌더를 해준다. */}\n      <Switch>\n        <Route path=\"/\" exact={true} component={HomePage} />\n        <Route path=\"/about\" component={AboutPage} />\n        <Route path=\"/user/:userID\" component={ProfilePage} />\n\n        <Route path=\"/mypage\" component={ProfilePage} />\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/question\" exact={true} component={QuestionListPage} />\n        <Route\n          path=\"/question/write\"\n          exact={true}\n          component={QuestionWritePage}\n        />\n        <Route path=\"/question/edit/:questionID\" component={QuestionEditPage} />\n        <Route path=\"/question/:questionID\" component={QuestionDetailPage} />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/index.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js",["216","217","218"],"import React, { useEffect, useCallback, useState } from 'react'\nimport MainLayout from '../../components/layout/MainLayout'\nimport QuestionWriteSection from '../../components/question/QuestionWriteSection'\n\nexport default function QuestionWritePage({ history }) {\n  //useEffect(() => {\n  //  return () => {\n  //    history.block('페이지를 떠나시는건가요?');\n  //  };\n  //}, [history]);\n\n  return (\n    <MainLayout>\n      <QuestionWriteSection />\n    </MainLayout>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js",["219","220"],"import { useCallback, useEffect, useLayoutEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport MainLayout from '../../components/layout/MainLayout'\nimport { readQuestionList } from '../../redux/readPost'\nimport { Link } from 'react-router-dom'\nimport QuestionBlock from '../../components/question/QuestionBlock'\nimport { Spinner } from '../../components/Spinner'\n\nimport { Button } from '../../components/Button'\n\nimport '../../styles/page/question/QuestionListPage.scss'\n\nexport default function QuestionListPage() {\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.questionList\n  })\n\n  const dispatch = useDispatch()\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n\n  useEffect(() => {\n    dispatch(readQuestionList())\n  }, [dispatch])\n\n  if (loading)\n    return (\n      <MainLayout>\n        <Spinner />\n      </MainLayout>\n    )\n  if (error)\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    )\n\n  if (!data)\n    return (\n      <MainLayout>\n        <div>no data</div>\n      </MainLayout>\n    )\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"questionList-container\">\n          <section>\n            <div className=\"questionList-left\">\n              <div className=\"questionList-left-top\">\n                <div className=\"questionList-title-container\">\n                  <div className=\"questionList-Latest\">최신</div>\n                  {/*인기순 정렬은 나중에 추가하자*/}\n                  {/*<div className=\"questionList-popular\">인기</div>*/}\n                </div>\n                <Link to={'/question/write'} className=\"ask-btn-container\">\n                  <Button className=\"ask-btn\" buttonStyle=\"btn--outline\">\n                    질문하기\n                  </Button>\n                </Link>\n              </div>\n              <div className=\"questionList\">\n                {data\n                  ? data.map((element, index) => {\n                      return (\n                        <div key={index}>\n                          <QuestionBlock question={element} />\n                        </div>\n                      )\n                    })\n                  : ''}\n              </div>\n            </div>\n          </section>\n          <section>\n            <div className=\"questionList-right\">\n              <div className=\"questionList-right-title\">Trending Tags</div>\n            </div>\n          </section>\n        </div>\n      </MainLayout>\n    </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js",["221","222","223"],"import React, { useCallback, useDebugValue } from 'react'\nimport MainLayout from '../../components/layout/MainLayout'\nimport '../../styles/page/user/ProfilePage.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { logout } from '../../redux/auth'\n\nexport default function ProfilePage({ match }) {\n  const { userID } = match.params\n  const { myID, myNickname } = useSelector((state) => {\n    return { myID: state.auth.userID, myNickname: state.auth.userNickname }\n  })\n  const dispatch = useDispatch()\n\n  const onClickLogout = useCallback(() => {\n    dispatch(logout())\n  }, [dispatch])\n\n  return (\n    <>\n      <MainLayout>\n        <div className=\"profile-container\">\n          <div className=\"profile-upside\">\n            <div className=\"profile-photo\">\n              <img src=\"https://media.vlpt.us/images/ghkdwltjq98/profile/b7b493c6-69ef-4886-aec6-16d03800306e/social.png?w=120\" />\n            </div>\n            <div className=\"intro-container\">\n              <div>{userID} 닉네임</div>\n              <div>이메일</div>\n              <div>연락처</div>\n              <div>가입일시</div>\n              <div>마지막 접속일</div>\n              <div>인증 연동</div>\n              <div>포인트</div>\n              {myID === userID ? (\n                <button onClick={onClickLogout}>Logout</button>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n          <div className=\"profile-downside\">\n            <div className=\"profile-card\">Questions (0)</div>\n            <div className=\"profile-card\">Answers (0)</div>\n            <div className=\"profile-card\">Free Posts (0)</div>\n          </div>\n        </div>\n      </MainLayout>\n    </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js",["224"],"import { useEffect, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { readQuestionByUID } from '../../redux/readPost'\nimport HalfWidthContainer from '../../components/layout/HalfWidthContainer'\nimport MainLayout from '../../components/layout/MainLayout'\nimport QuestionSection from '../../components/question/QuestionSection'\nimport AnswerSection from '../../components/question/AnswerSection'\nimport { Spinner } from '../../components/Spinner'\n\nexport default function QuestionDetailPage({ match }) {\n  const questionID = match.params.questionID\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.question\n  })\n\n  const dispatch = useDispatch()\n\n  const getQuestionAsync = useCallback(() => {\n    dispatch(readQuestionByUID(questionID))\n  }, [dispatch, questionID])\n\n  useEffect(() => {\n    getQuestionAsync()\n  }, [dispatch])\n\n  if (loading)\n    return (\n      <MainLayout>\n        <Spinner />\n      </MainLayout>\n    )\n\n  if (error) {\n    console.log(error)\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    )\n  }\n  if (!data)\n    return (\n      <>\n        <MainLayout>no data</MainLayout>\n      </>\n    )\n  return (\n    <>\n      <MainLayout>\n        <HalfWidthContainer>\n          <QuestionSection data={data} />\n        </HalfWidthContainer>\n        <HalfWidthContainer>\n          <AnswerSection data={data} />\n        </HalfWidthContainer>\n      </MainLayout>\n    </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/auth.js",["225"],"import { authService, firebaseInstance } from '../lib/firebase'\nimport axios from 'axios'\n\n// define ACTION type\nconst LOG_IN_TRY = 'auth/LOG_IN_TRY'\nconst LOG_IN_SUCCESS = 'auth/LOG_IN_SUCCESS'\nconst LOG_IN_FAIL = 'auth/LOG_IN_FAIL'\n\nconst LOG_OUT_TRY = 'auth/LOG_OUT_TRY'\nconst LOG_OUT_SUCCESS = 'auth/LOG_OUT_SUCCESS'\nconst LOG_OUT_FAIL = 'auth/LOG_OUT_FAIL'\n\nconst CREATE_USER_TRY = 'auth/CREATE_USER_TRY'\nconst CREATE_USER_SUCCESS = 'auth/CREATE_USER_SUCCESS'\nconst CREATE_USER_FAIL = 'auth/CREATE_USER_FAIL'\n\nconst CHECK_AUTH = 'auth/CHECK_AUTH'\n\nconst initialState = {\n  loginState: false,\n  userID: '000000000000000000000000',\n  userNickname: '익명',\n  loading: false,\n}\n\nconst session_login = () => {\n  authService.currentUser\n    .getIdToken(/* forceRefresh */ true)\n    .then((idToken) => {\n      axios({\n        url: 'http://localhost:1818/login/sessionLogin',\n        method: 'POST',\n        data: {\n          firebaseToken: idToken,\n          //crsfToken : crsfToekn\n        },\n        withCredentials: true,\n      })\n    })\n    .catch((e) => {\n      console.log('getIdToken 오류', e)\n    })\n}\n\nconst session_signup = (email) => {\n  authService.currentUser\n    .getIdToken(/* forceRefresh */ true)\n    .then((idToken) => {\n      axios({\n        url: 'http://localhost:1818/login/account',\n        method: 'POST',\n        data: {\n          firebaseToken: idToken,\n          authorNickname: 'lee',\n          email: email,\n          point: '10',\n          posts: ['hi', 'hello'],\n          //crsfToken : crsfToekn\n        },\n        withCredentials: true,\n      })\n    })\n    .catch((e) => {\n      console.log('getIdToken 오류', e)\n    })\n}\n\n// 액션타입을 redux 파일 안에 정의하고, 정의한 액션타입을 다른 파일에서 사용하기 위해\n// 액션 생성함수를 정의하고, 생성함수를 export 할 것이다.\n// thunk 사용시에는 액션생성함수 따로 안만듬.\n\nexport const login = () => async (dispatch) => {\n  try {\n    dispatch({ type: LOG_IN_SUCCESS })\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: LOG_IN_FAIL })\n  }\n}\n\nexport const checkAuth = (user) => {\n  console.log('checkAuth:')\n  if (user) {\n    return {\n      type: CHECK_AUTH,\n      loginState: true,\n      userNickname: user.email,\n      userID: user.uid,\n    }\n  } else {\n    return {\n      type: CHECK_AUTH,\n      loginState: false,\n      userID: '000000000000000000000000',\n      userNickname: '익명',\n    }\n  }\n}\n\nexport const emailLogin = (email, password) => async (dispatch) => {\n  dispatch({ type: LOG_IN_TRY })\n  try {\n    await authService\n      .signInWithEmailAndPassword(email, password)\n      .then(() => {\n        session_login()\n      })\n      .then((res) => {\n        console.log('로그인 결과 res: ', res)\n      })\n    dispatch({ type: LOG_IN_SUCCESS })\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: LOG_IN_FAIL })\n  }\n}\n\nexport const emailSignUp = (email, password) => async (dispatch) => {\n  dispatch({ type: CREATE_USER_TRY })\n  try {\n    await authService\n      .createUserWithEmailAndPassword(email, password)\n      .then(() => {\n        session_signup(email)\n      })\n      .then((res) => {\n        console.log('회원가입 결과 res: ', res)\n      })\n    dispatch({ type: CREATE_USER_SUCCESS })\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: CREATE_USER_FAIL })\n  }\n}\n\nexport const logout = () => async (dispatch) => {\n  dispatch({ type: LOG_OUT_TRY })\n\n  try {\n    authService.signOut()\n    localStorage.removeItem(\n      'FE37F882DCF4A30642E6B59D595F0760B0F1C3FE86F466922270B61E6D09106D'\n    )\n    dispatch({ type: LOG_OUT_SUCCESS })\n  } catch (e) {\n    dispatch({ type: LOG_OUT_FAIL })\n    console.log('error: ', e)\n  }\n}\n\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case LOG_IN_TRY:\n      return {\n        ...state,\n        loading: true,\n      }\n    case LOG_IN_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n\n        loginState: true,\n      }\n    case LOG_IN_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loginState: false,\n      }\n    case CREATE_USER_TRY:\n      return {\n        ...state,\n        loading: true,\n      }\n    case CREATE_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loginState: true,\n        userID: 'qwerasdfzxcvnmvclkjh',\n        userNickname: 'testname',\n      }\n    case CREATE_USER_FAIL:\n      return {\n        ...state,\n        loading: false,\n      }\n    case LOG_OUT_TRY:\n      return {\n        ...state,\n        loading: true,\n      }\n    case LOG_OUT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loginState: false,\n        userID: '000000000000000000000000',\n        userNickname: '익명',\n      }\n    case LOG_OUT_FAIL:\n      return {\n        ...state,\n        loading: false,\n      }\n    case CHECK_AUTH:\n      return {\n        ...state,\n        loginState: action.loginState,\n        userNickname: action.userNickname,\n        userID: action.userID,\n      }\n    default:\n      return state\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js",["226","227","228"],"import axios from 'axios'\n\nconst initialState = {\n  loading: false,\n  error: null,\n  isUpdated: false,\n}\n\n// action types\n\nconst UPDATE_QUESTION_TRY = 'question/UPDATE_QUESTION_TRY'\nconst UPDATE_QUESTION_SUCCESS = 'question/UPDATE_QUESTION_SUCCESS'\nconst UPDATE_QUESTION_FAIL = 'question/UPDATE_QUESTION_FAIL'\n\nconst UPDATE_ANSWER_TRY = 'answer/UPDATE_ANSWER_TRY'\nconst UPDATE_ANSWER_SUCCESS = 'answer/UPDATE_ANSWER_SUCCESS'\nconst UPDATE_ANSWER_FAIL = 'answer/UPDATE_ANSWER_FAIL'\n\nconst UPDATE_ARTICLE_TRY = 'article/UPDATE_ARTICLE_TRY'\nconst UPDATE_ARTICLE_SUCCESS = 'article/UPDATE_ARTICLE_SUCCESS'\nconst UPDATE_ARTICLE_FAIL = 'article/UPDATE_ARTICLE_FAIL'\n\nconst UPDATE_COMMENT_TRY = 'comment/UPDATE_COMMENT_TRY'\nconst UPDATE_COMMENT_SUCCESS = 'comment/UPDATE_COMMENT_SUCCESS'\nconst UPDATE_COMMENT_FAIL = 'comment/UPDATE_COMMENT_FAIL'\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\n// 3번째 인자를 이용하면 withExtraArgument 에서 넣어준 값을 사용할 수 있다.\nexport const updateQuestion = (data) => async (\n  dispatch,\n  getState,\n  { history }\n) => {\n  dispatch({ type: UPDATE_QUESTION_TRY })\n  try {\n    const obj = JSON.stringify(data)\n    await axios({\n      method: 'put',\n      url: `/question/${data.postID}`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    await dispatch({ type: UPDATE_QUESTION_SUCCESS })\n\n    history.push(`/question/${data.postID}`)\n    // obj 는 스트링으로 만든거라서, data 를 써야함.\n  } catch (e) {\n    alert('error: ', e)\n    dispatch({ type: UPDATE_QUESTION_FAIL, error: e })\n  }\n}\n\nexport const updateAnswer = (answerID, data) => async (dispatch) => {\n  dispatch({ type: UPDATE_ANSWER_TRY })\n  try {\n    const obj = JSON.stringify(data)\n    await axios({\n      method: 'put',\n      url: `/answer/${answerID}`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    dispatch({ type: UPDATE_ANSWER_SUCCESS })\n    console.log('answer updated')\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: UPDATE_ANSWER_FAIL, error: e })\n  }\n}\n\nexport const updateArticle = (data) => async (dispatch) => {\n  dispatch({ type: UPDATE_ARTICLE_TRY })\n  try {\n    const obj = JSON.stringify(Object.fromEntries(data))\n    await axios({\n      method: 'put',\n      url: `/article`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    setTimeout(() => {\n      dispatch({ type: UPDATE_ARTICLE_SUCCESS })\n    }, 500)\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: UPDATE_ARTICLE_FAIL, error: e })\n  }\n}\n\nexport default function updatePost(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_QUESTION_TRY:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case UPDATE_QUESTION_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        isUpdated: true,\n      }\n    case UPDATE_QUESTION_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    case UPDATE_ANSWER_TRY:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case UPDATE_ANSWER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        isUpdated: true,\n      }\n    case UPDATE_ANSWER_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    case UPDATE_ARTICLE_TRY:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case UPDATE_ARTICLE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        isUpdated: true,\n      }\n    case UPDATE_ARTICLE_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n\n    default:\n      return state\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/createPost.js",["229","230","231"],"import axios from 'axios'\n\nconst initialState = {\n  question: {\n    loading: false,\n    error: null,\n    isAdded: false,\n  },\n  answer: {\n    loading: false,\n    error: null,\n    isAdded: false,\n  },\n  article: {\n    loading: false,\n    error: null,\n    isAdded: false,\n  },\n}\n\n// action types\n\nconst CREATE_QUESTION_TRY = 'question/CREATE_QUESTION_TRY'\nconst CREATE_QUESTION_SUCCESS = 'question/CREATE_QUESTION_SUCCESS'\nconst CREATE_QUESTION_FAIL = 'question/CREATE_QUESTION_FAIL'\n\nconst CREATE_ANSWER_TRY = 'answer/CREATE_ANSWER_TRY'\nconst CREATE_ANSWER_SUCCESS = 'answer/CREATE_ANSWER_SUCCESS'\nconst CREATE_ANSWER_FAIL = 'answer/CREATE_ANSWER_FAIL'\n\nconst CREATE_ARTICLE_TRY = 'article/CREATE_ARTICLE_TRY'\nconst CREATE_ARTICLE_SUCCESS = 'article/CREATE_ARTICLE_SUCCESS'\nconst CREATE_ARTICLE_FAIL = 'article/CREATE_ARTICLE_FAIL'\n\nconst CREATE_COMMENT_TRY = 'comment/CREATE_COMMENT_TRY'\nconst CREATE_COMMENT_SUCCESS = 'comment/CREATE_COMMENT_SUCCESS'\nconst CREATE_COMMENT_FAIL = 'comment/CREATE_COMMENT_FAIL'\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\n// 3번째 인자를 이용하면 withExtraArgument 에서 넣어준 값을 사용할 수 있다.\nexport const createQuestion = (data) => async (\n  dispatch,\n  getState,\n  { history }\n) => {\n  dispatch({ type: CREATE_QUESTION_TRY })\n  try {\n    const obj = JSON.stringify(data)\n    await axios({\n      method: 'post',\n      url: `/question`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    await dispatch({ type: CREATE_QUESTION_SUCCESS })\n\n    history.push(`/question/${data.postID}`)\n    // obj 는 스트링으로 만든거라서, data 를 써야함.\n  } catch (e) {\n    alert('error: ', e)\n    dispatch({ type: CREATE_QUESTION_FAIL, error: e })\n  }\n}\n\nexport const createAnswer = (data) => async (dispatch) => {\n  dispatch({ type: CREATE_ANSWER_TRY })\n  try {\n    const obj = JSON.stringify(data)\n    await axios({\n      method: 'post',\n      url: `/answer`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    dispatch({ type: CREATE_ANSWER_SUCCESS })\n    console.log('answer added')\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: CREATE_ANSWER_FAIL, error: e })\n  }\n}\n\nexport const createArticle = (data) => async (dispatch) => {\n  dispatch({ type: CREATE_ARTICLE_TRY })\n  try {\n    const obj = JSON.stringify(Object.fromEntries(data))\n    await axios({\n      method: 'post',\n      url: `/article`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    })\n    setTimeout(() => {\n      dispatch({ type: CREATE_ARTICLE_SUCCESS })\n    }, 500)\n  } catch (e) {\n    console.log('error: ', e)\n    dispatch({ type: CREATE_ARTICLE_FAIL, error: e })\n  }\n}\n\nexport default function createPost(state = initialState, action) {\n  switch (action.type) {\n    case CREATE_QUESTION_TRY:\n      return {\n        ...state,\n        question: {\n          loading: true,\n          error: null,\n        },\n      }\n    case CREATE_QUESTION_SUCCESS:\n      return {\n        ...state,\n        question: {\n          loading: false,\n          error: null,\n          isAdded: true,\n        },\n      }\n    case CREATE_QUESTION_FAIL:\n      return {\n        ...state,\n        question: {\n          loading: false,\n          error: action.error,\n        },\n      }\n    case CREATE_ANSWER_TRY:\n      return {\n        ...state,\n        answer: {\n          loading: true,\n          error: null,\n        },\n      }\n    case CREATE_ANSWER_SUCCESS:\n      return {\n        ...state,\n        answer: {\n          loading: false,\n          error: null,\n          isAdded: true,\n        },\n      }\n    case CREATE_ANSWER_FAIL:\n      return {\n        ...state,\n        answer: {\n          loading: false,\n          error: action.error,\n        },\n      }\n    case CREATE_ARTICLE_TRY:\n      return {\n        ...state,\n        article: {\n          loading: true,\n          error: null,\n        },\n      }\n    case CREATE_ARTICLE_SUCCESS:\n      return {\n        ...state,\n        article: {\n          loading: false,\n          error: null,\n        },\n        content: '',\n      }\n    case CREATE_ARTICLE_FAIL:\n      return {\n        ...state,\n        article: {\n          loading: false,\n          error: action.error,\n        },\n      }\n\n    default:\n      return state\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js",["232","233","234","235","236","237"],"import React from 'react';\nimport MainLayout from '../components/layout/MainLayout';\nimport '../styles/page/HomePage.scss'\n\nimport ForceGraph from '../components/home/ForceGraph';\nimport SubjectBlock from '../components/home/SubjectBlock';\nimport { dummyTechtree } from '../lib/dummyTechtree';\n\nexport default function HomePage() {\n  return (\n    <>\n      <MainLayout>\n        <div className=\"homepage-container\">\n          <main className=\"techtree-container\">\n            <ForceGraph techtreeData={dummyTechtree.cs} category={'cs'} />\n          </main>\n          <aside className=\"subjects-sidebar\">\n            <div\n              onClick={() => {\n                console.log('physics clicked');\n              }}\n              className=\"block\"\n            >\n              <SubjectBlock\n                iconSize=\"70\"\n                url=\"physics\"\n                displayedName=\"physics\"\n              />\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/math.svg\"\n                alt=\"mathematicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              Mathematics\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img\n                src=\"/icons/economics.svg\"\n                alt=\"economicsIcon\"\n                height=\"70\"\n                width=\"70\"\n              />\n              <br />\n              economics\n            </div>\n\n            <div\n              onClick={() => {\n                console.log('cs clicked');\n              }}\n              className=\"block\"\n            >\n              <img src=\"/icons/computer.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Computer Science\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/chemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Chemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/biochemistry.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Biochemistry\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/russia.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Russia\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/electricity.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Electrical Engineering\n            </div>\n\n            <div onClick={() => {}} className=\"block\">\n              <img src=\"/icons/earth.svg\" height=\"70\" width=\"70\" />\n              <br />\n              Earth System\n            </div>\n          </aside>\n        </div>\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/MainLayout.js",[],"/Users/zowan/Documents/web/tect-react/src/components/Button.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js",["238","239","240","241"],"import React, { useEffect, useCallback } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createAnswer } from '../../redux/createPost';\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock';\n\nexport default function AnswerWriteBlock({ questionUID }) {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  const [content, onChangeContent] = useInput();\n\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n\n      formData.append('contentType', 'answer');\n      formData.append('postID', questionUID);\n      formData.append('answerID', uid24);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createAnswer(formData));\n    },\n    [content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label for=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <MarkdownRenderingBlock content={content} />\n        </div>\n        <div class=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n",["242","243"],"/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js",[],["244","245"],"/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js",["246","247","248","249","250"],"import React from 'react'\nimport * as d3 from 'd3'\nimport styles from '../../styles/Techtree.module.css'\n\nexport default function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null)\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`\n  }\n\n  React.useEffect(() => {\n    let destroyFn\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      )\n      destroyFn = destroy\n    }\n\n    return destroyFn\n  }, [category, techtreeData])\n\n  return <div ref={containerRef} className={styles.container} />\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n  const links = techtreeData.links.map((d) => Object.assign({}, d))\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d))\n\n  const containerRect = container.getBoundingClientRect()\n  const height = 1000 //containerRect.height;\n  const width = 900 //containerRect.width;\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width])\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height])\n\n  //const circleColor = () => { return \"#fff\"; };\n  //const circleFill = \"#fff\"\n  const circleSelctedFill = '#00bebe'\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\n  function getRandom00BEBE() {\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe']\n    const colorSet2 = [\n      '#66b7ce',\n      '#00bebe',\n      'rgb(0, 170, 170)',\n      'rgb(0, 140, 190)',\n      'rgb(0, 190, 170)',\n    ]\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001)\n    return colorSet2[randomFactor]\n    //return linear-gradient(135deg, orange 60%, cyan)\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\n  }\n  const circleStrokeColor1 = getRandom00BEBE() //\"#94D7FF\"\n  const circleStrokeColor2 = getRandom00BEBE() //\"#5DE87C\"\n  const circleStrokeColor3 = getRandom00BEBE() //\"#FFF872\"\n  const circleStrokeColor4 = getRandom00BEBE() //\"#FF669A\"\n\n  const drag = (simulation) => {\n    const dragstarted = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart()\n      d.fx = d.x\n      d.fy = d.y\n    }\n\n    const dragged = (d) => {\n      d.fx = d3.event.x\n      d.fy = d3.event.y\n    }\n\n    const dragended = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0)\n      d.fx = null\n      d.fy = null\n    }\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended)\n  }\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      'link',\n      d3.forceLink(links).id((d) => d.id)\n    )\n    .force('charge', d3.forceManyBody().strength(-1050))\n    .force('link', d3.forceLink(links).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY())\n\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed)\n\n  const svg = d3\n    .select(container)\n    .call(zoom)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75])\n\n  var x2 = xScale.copy() // reference.\n  var y2 = yScale.copy()\n\n  function zoomed() {\n    xScale = d3.event.transform.rescaleX(x2)\n    yScale = d3.event.transform.rescaleY(y2)\n    tick()\n  }\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', '#999')\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis')\n\n  const link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d) => {\n      return `link${d.index}`\n    })\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)')\n\n  const node = svg\n    .append('g')\n    .attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    //.attr('class',(d)=>{return `${d.name}`})\n    .attr('class', (d) => {\n      return `node${d.index}`\n    })\n    .attr('r', 30)\n    .style('fill', function (d) {\n      return getRandom00BEBE()\n    })\n    .style('stroke', '#fff')\n    .call(drag(simulation))\n\n  function matchColorForGroup(d) {\n    switch (d.group) {\n      case 1:\n        return circleStrokeColor1\n      case 2:\n        return circleStrokeColor2\n      case 3:\n        return circleStrokeColor3\n      case 4:\n        return circleStrokeColor4\n      default:\n        return '#00bebe'\n    }\n  }\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.index\n    })\n    //.attr(\"class\", )\n    .text((d) => {\n      return d.label\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(drag(simulation))\n\n  // Add the tooltip element to the graph\n  const tooltip = d3.select(container).append('div')\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    //  tooltip // tooltip is just div. how add transition?\n    //  .transition()\n    //    .duration(200)\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x + 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', 0.99)\n  }\n\n  const removeTooltip = () => {\n    tooltip\n      //  .transition()\n      //  .duration(200)\n      .style('opacity', 0)\n  }\n\n  node\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY)\n      fadeExceptSelected(d)\n      node.style('cursor', 'pointer')\n    })\n    .on('mouseout', (d) => {\n      removeTooltip()\n      node.style('opacity', '1')\n      link.style('opacity', '1')\n      //  container.querySelectorAll('circle').forEach((element)=>{\n      //  element.style.fill=matchColorForGroup(element)\n      //  })\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`\n    })\n\n  label\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY)\n      fadeExceptSelected(d)\n      label.style('cursor', 'pointer')\n    })\n    .on('mouseout', () => {\n      removeTooltip()\n      node.style('opacity', '1')\n      link.style('opacity', '1')\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`\n    })\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2')\n    link.style('opacity', '0.1')\n    //const displayedNodes = []\n    //const displayedLinks = []\n\n    links.map((linkElement) => {\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\n      if (linkElement.source.id === selectedNode.id) {\n        //selectedNode.style(\"opacity\" ,\"0.1\")\n        container.querySelector(\n          `circle.node${linkElement.target.id}`\n        ).style.opacity = '1'\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1'\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1'\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.target.id])\n        //console.log(\"to: \",nodes[linkElement.target.id])\n      } else if (linkElement.target.id === selectedNode.id) {\n        container.querySelector(\n          `circle.node${linkElement.source.id}`\n        ).style.opacity = '1'\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1'\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1'\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.source.id])\n        //console.log(\"from: \",nodes[linkElement.source.id])\n      } else {\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1'\n      }\n      //console.log(displayedNodes)\n      //displayedNodes.map((element)=>{\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\n      //node.select(element).style('opacity',\"1\")\n      //})\n\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\n      // dom 트리상의 문제가 없음.\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\n    })\n  }\n\n  function tick() {\n    //update link positions\n    link\n      .attr('x1', function (d) {\n        return xScale(d.source.x)\n      })\n      .attr('y1', function (d) {\n        return yScale(d.source.y)\n      })\n      .attr('x2', function (d) {\n        return xScale(d.target.x)\n      })\n      .attr('y2', function (d) {\n        return yScale(d.target.y)\n      })\n\n    // update node positions\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y))\n\n    // update label positions\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y))\n  }\n\n  simulation.on('tick', tick)\n\n  return {\n    destroy: () => {\n      simulation.stop()\n    },\n    nodes: () => {\n      return svg.node()\n    },\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/Footer.js",["251"],"import { Link } from 'react-router-dom';\nimport '../../styles/layout/Footer.scss';\n\nexport default function Footer() {\n  return (\n    <>\n      <footer className=\"footer\">\n        <div className=\"footer-container\">\n          {/* <div>기업 푸터</div>\n          <div>일반: 전화번호, 이메일, 계좌정보 </div>\n          <div>고객센터 : 전화, 팩스, 이메일, 카카오톡ID(혹은 링크) 상담가능 일시</div>\n          <div>법인 : 상호, 대표, 주소, 개인정보관리 책임자, 사업자 등록번호, 통신판매업 신고</div>\n          <div> 계좌번호 목록</div>\n          <div>회사소개, 개인정보보호정책/처리방침, 이용약관, 사이트맵</div>\n          <div>SNS 링크</div>\n          <div>별도의 Contact us도 필요한가</div> */}\n          footer\n        </div>\n      </footer>\n      {/* <ul>\n        <li className=\"nav-item\">\n          <Link to=\"/about\" className=\"nav-links\">\n            About Tect.dev\n          </Link>\n        </li>\n      </ul> */}\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/functions.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/LoginModal.js",["252","253","254"],"import React, { useCallback, useState } from 'react'\nimport '../../styles/layout/LoginModal.scss'\nimport { Button } from '../Button'\nimport { emailLogin, emailSignUp } from '../../redux/auth'\nimport { useDispatch } from 'react-redux'\nimport { onClickTag } from '../../lib/functions'\n\nexport const LoginModal = React.memo(({ labelFor }) => {\n  const dispatch = useDispatch()\n  const [email, setEmail] = useState()\n  const [password, setPassword] = useState()\n\n  // 굉장히 fancy한 방법인데 콘솔창이 경고를 띄운다..\n  //const onChange = (e) => {\n  //  const {\n  //    target: { name, value },\n  //  } = e\n  //  if (name === 'email') {\n  //    setEmail(value)\n  //  } else if (name === 'password') {\n  //    setPassword(value)\n  //  }\n  //}\n\n  const onChangeEmail = useCallback(\n    (e) => {\n      setEmail(e.target.value)\n    },\n    [email]\n  )\n\n  const onChangePassword = useCallback(\n    (e) => {\n      setPassword(e.target.value)\n    },\n    [password]\n  )\n\n  const onEmailLogin = useCallback(\n    (e) => {\n      e.preventDefault()\n      dispatch(emailLogin(email, password))\n    },\n    [dispatch, email, password]\n  )\n\n  const onEmailSignUp = useCallback(\n    (e) => {\n      e.preventDefault()\n      dispatch(emailSignUp(email, password))\n    },\n    [dispatch, email, password]\n  )\n\n  return (\n    <>\n      <div className=\"login-modal\">\n        <div className=\"login-modal-display\">\n          <label className=\"login-modal-close-btn\" htmlFor={labelFor} />\n\n          <div className=\"login-modal-display-logo\">Login</div>\n          <div className=\"login-modal-display-body\">\n            <form name=\"devguru-auth\" className=\"login-form\" autoComplete=\"off\">\n              <input\n                id=\"login-id-input\"\n                className=\"login-input\"\n                type=\"email\"\n                placeholder=\"Enter Email\"\n                required\n                name=\"email\"\n                value={email}\n                onChange={onChangeEmail}\n              />\n              <input\n                id=\"login-pw-input\"\n                className=\"login-input\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                required\n                name=\"password\"\n                value={password}\n                onChange={onChangePassword}\n              />\n              <Button className=\"login-submit\" onClick={onEmailLogin}>\n                {' '}\n                Login{' '}\n              </Button>\n              <Button className=\"login-submit\" onClick={onEmailSignUp}>\n                {' '}\n                Sign Up{' '}\n              </Button>\n\n              <div className=\"auth-help\">\n                <div className=\"auth-help-element\">\n                  <input id=\"rememberUser\" type=\"radio\" name=\"Remember Me\" />\n                  <label htmlFor=\"rememberUser\"> Remember Me</label>\n                </div>\n                <div className=\"auth-help-element\">Forgot ID/PW?</div>\n              </div>\n              <div className=\"authProviders\">\n                <div>Google</div>\n                <div>Facebook</div>\n                <div>Github</div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <label className=\"login-modal-close-area\" htmlFor={labelFor} />\n      </div>\n    </>\n  )\n})\n","/Users/zowan/Documents/web/tect-react/src/lib/katexWhiteList.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/prismPlugin.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/prismThemes.js",[],"/Users/zowan/Documents/web/tect-react/src/components/MarkdownRenderingBlock.js",["255"],"import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport remark from 'remark'\nimport remarkParse from 'remark-parse'\nimport breaks from 'remark-breaks'\nimport math from 'remark-math'\nimport remark2rehype from 'remark-rehype'\nimport katex from 'rehype-katex'\nimport stringify from 'rehype-stringify'\nimport raw from 'rehype-raw'\nimport slug from 'remark-slug'\nimport { htmlFilter } from '../lib/functions'\nimport { prismPlugin } from '../lib/prismPlugin'\nimport { prismThemes } from '../lib/prismThemes'\nimport { colorPalette, mediaQuery, mediaSize } from '../lib/constants'\n\nconst MarkdownStyledBlock = styled.div`\n  &.atom-one-dark {\n    ${prismThemes['atom-one-dark']}\n  }\n  &.atom-one-light {\n    ${prismThemes['atom-one-light']}\n  }\n  &.vscDark {\n    ${prismThemes['vscDark']}\n  }\n  &.github {\n    ${prismThemes['github']}\n  }\n  &.monokai {\n    ${prismThemes['monokai']}\n  }\n  &.dracula {\n    ${prismThemes['dracula']}\n  }\n  &.tomorrow-night {\n    ${prismThemes['tomorrow-night']}\n  }\n  pre {\n    font-family: 'Fira Mono', source-code-pro, Menlo, Monaco, Consolas,\n      'Courier New', monospace;\n    font-size: 0.875rem;\n    padding: 1rem;\n    border-radius: 4px;\n    line-height: 1.5;\n    overflow-x: auto;\n    letter-spacing: 0px;\n    ${mediaSize.small} {\n      font-size: 0.75rem;\n      padding: 0.75rem;\n    }\n  }\n  img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n  }\n  iframe {\n    width: 768px;\n    height: 430px;\n    max-width: 100%;\n    background: black;\n    display: block;\n    margin: auto;\n    border: none;\n    border-radius: 4px;\n    overflow: hidden;\n  }\n  .twitter-wrapper {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-left: none;\n    background: none;\n    padding: none;\n  }\n  table {\n    min-width: 40%;\n    max-width: 100%;\n    border: 1px solid ${colorPalette.gray7};\n    border-collapse: collapse;\n    font-size: 0.875rem;\n    thead > tr > th {\n      /* text-align: left; */\n      border-bottom: 4px solid ${colorPalette.gray7};\n    }\n    th,\n    td {\n      word-break: break-word;\n      padding: 0.5rem;\n    }\n    td + td,\n    th + th {\n      border-left: 1px solid ${colorPalette.gray7};\n    }\n    tr:nth-child(even) {\n      background: ${colorPalette.gray1};\n    }\n    tr:nth-child(odd) {\n      background: white;\n    }\n  }\n  .katex-mathml {\n    display: none;\n  }\n`\n\nexport default React.memo(function MarkdownRenderingBlock({ content }) {\n  const [html, setHtml] = useState(content)\n\n  useEffect(() => {\n    setHtml(\n      // html 필터를 쓰면 latex 렌더링이 이상하게 된다!\n      // 그래서 html 필터랑 katex whitelist 를 함께 쓰는듯.\n      htmlFilter(\n        //unified()\n        remark()\n          .use(breaks)\n          .use(remarkParse)\n          .use(slug)\n          .use(prismPlugin)\n          .use(remark2rehype, { allowDangerousHTML: true })\n          .use(raw)\n          .use(math)\n          .use(katex)\n          .use(stringify)\n          .processSync(content)\n          .toString()\n      )\n    )\n  }, [content])\n\n  return (\n    <>\n      <MarkdownStyledBlock\n        className={'dracula'}\n        dangerouslySetInnerHTML={{ __html: html }}\n      ></MarkdownStyledBlock>\n    </>\n  )\n})\n","/Users/zowan/Documents/web/tect-react/src/components/MarkdownEditorBlock.js",["256","257","258"],"import React, { useCallback, useEffect, useState } from 'react'\nimport { Button } from './Button'\nimport styled from 'styled-components'\nimport { FaBold, FaItalic, FaLink, FaCode, FaSuperscript } from 'react-icons/fa'\nimport { mediaQuery, colorPalette, mediaSize } from '../lib/constants'\n\nexport default React.memo(function MarkdownEditorBlock({\n  onChangeContentProps,\n  contentProps,\n  width,\n  height,\n}) {\n  const [localContent, setLocalContent] = useState(contentProps)\n\n  const onChangeContent = useCallback(\n    (e) => {\n      e.preventDefault()\n      setLocalContent(e.target.value)\n      onChangeContentProps(e.target.value)\n    },\n    [onChangeContentProps]\n  )\n\n  const addCodeBlock = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent}\\n\\`\\`\\`c\\nint main () {\\n  printf('hello world!');\\n  return 0;\\n}\\n\\`\\`\\``\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addMathBlock = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent}\\n$-\\\\frac{\\\\hbar^{2}}{2m} \\\\nabla^{2} \\\\psi + V \\\\psi = E \\\\psi$`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addBoldText = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent} **Bold Text**`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addItalicText = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent} *Italic Text*`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addLargeTitle = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent}\\n## Large Title`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addSmallTitle = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent}\\n### Small Title`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  const addLink = useCallback(\n    (e) => {\n      e.preventDefault()\n      const addedContent = `${localContent} [오른쪽 괄호안에는 링크 주소를 적습니다](https://tect.dev)`\n      setLocalContent(addedContent)\n      onChangeContentProps(addedContent)\n    },\n    [localContent, onChangeContentProps]\n  )\n\n  return (\n    <>\n      <EditorContainer>\n        <MarkdownToolkit>\n          <Button onClick={addCodeBlock}>\n            <FaCode />\n          </Button>\n          <Button onClick={addMathBlock}>\n            <FaSuperscript />\n          </Button>\n          <Button onClick={addBoldText}>\n            <FaBold />\n          </Button>\n          <Button onClick={addLargeTitle}>L</Button>\n          <Button onClick={addSmallTitle}>S</Button>\n          <Button onClick={addItalicText}>\n            <FaItalic />\n          </Button>\n          <Button onClick={addLink}>\n            <FaLink />\n          </Button>\n        </MarkdownToolkit>\n        <div>\n          <label htmlFor=\"content\"></label>\n          <StyledTextarea\n            id=\"content\"\n            value={contentProps}\n            onChange={onChangeContent}\n            style={{ width: width, height: height }}\n          ></StyledTextarea>\n        </div>\n      </EditorContainer>\n    </>\n  )\n})\n\nconst MarkdownToolkit = styled.div`\n  display: inline-flex;\n\n  margin-bottom: 10px;\n  justify-content: space-around;\n`\nconst EditorContainer = styled.div`\n  ${mediaSize.small} {\n  }\n`\nconst StyledTextarea = styled.textarea`\n  border: none;\n  background-color: '#999999' !important;\n  &:active {\n    border: none;\n  }\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    border: none;\n  }\n`\n","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionSection.js",["259","260","261","262","263"],"import React, { useState, useCallback, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\nimport CommentListBlock from '../CommentListBlock'\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\nimport { TagBlock } from '../TagBlock'\nimport { Button } from '../Button'\nimport { uid } from 'uid'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { deleteQuestion, deleteComment } from '../../redux/deletePost'\nimport styled from 'styled-components'\n\nexport default React.memo(function QuestionSection({ data }) {\n  const [content, setContent] = useState('')\n  const { userID } = useSelector((state) => {\n    return { userID: state.auth.userID }\n  })\n\n  function onChangeContent(value) {\n    setContent(value)\n  }\n\n  const dispatch = useDispatch()\n\n  const onDeleteQuestion = useCallback(() => {\n    //alert('정말 삭제합니까?');\n    dispatch(deleteQuestion(data.question._id))\n  }, [dispatch])\n\n  function deleteComment() {\n    alert('정말 삭제합니까?')\n  }\n\n  const onSubmitComment = useCallback(\n    async (e) => {\n      e.preventDefault()\n      if (!content) {\n        return\n      }\n      const formData = new FormData()\n      const uid24 = uid(24)\n      formData.append('postID', uid24)\n      formData.append('contentType', 'question')\n      formData.append('content', content)\n      formData.append('authorID', '123456789012345678901234')\n      formData.append('authorNickname', '임시닉네임')\n    },\n    [content]\n  )\n\n  return (\n    <QuestionContainer>\n      <div className=\"title\">Title: {data.question.questionBody.title}</div>\n      <div>작성일: {data.question.questionBody.createdAt}</div>\n      <div>최종 수정일: {data.question.questionBody.lastUpdate}</div>\n      <div className=\"content\">\n        <MarkdownRenderingBlock content={data.question.questionBody.content} />\n      </div>\n      <Link to={`/user/${data.question.questionBody.authorID}`}>\n        글쓴이: {data.question.questionBody.authorNickname}\n      </Link>\n      <div className=\"hashtags\">\n        {data.question.questionBody.hashtags.map((tag, index) => {\n          return (\n            <div key={index}>\n              <TagBlock\n                text={tag}\n                function={() => {\n                  alert('tag clicked!')\n                }}\n              />\n            </div>\n          )\n        })}\n      </div>\n      {data.question.questionBody.authorID === userID &&\n      data.answers.length === 0 &&\n      userID !== '000000000000000000000000' ? (\n        <>\n          <Button>\n            <Link to={`/question/edit/${data.question._id}`}>\n              question 수정하기\n            </Link>\n          </Button>\n          <Button onClick={onDeleteQuestion}>question 삭제하기</Button>\n        </>\n      ) : (\n        ''\n      )}\n\n      {/*<CommentListBlock commentList={question.comments} />*/}\n\n      <MarkdownEditorBlock\n        initialContent={''}\n        onChangeContentProps={onChangeContent}\n      />\n      <Button onClick={onSubmitComment}>question 에 댓글달기</Button>\n    </QuestionContainer>\n  )\n})\n\nconst QuestionContainer = styled.div`\n  width: inherit;\n`\n","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerSection.js",["264","265","266"],"import React, { useEffect, useState, useCallback } from 'react'\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\nimport CommentListBlock from '../CommentListBlock'\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\nimport { createAnswer } from '../../redux/createPost'\nimport { updateAnswer } from '../../redux/updatePost'\nimport { deleteAnswer } from '../../redux/deletePost'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { uid } from 'uid'\nimport { Link } from 'react-router-dom'\nimport { sortISOByTimeStamp } from '../../lib/functions'\nimport { Button } from '../../components/Button'\nimport styled from 'styled-components'\n\nexport default React.memo(function AnswerSection({ data }) {\n  const [answers, setAnswers] = useState(\n    data.answers.sort((a, b) => {\n      sortISOByTimeStamp(a.answerBody.createdAt, b.answerBody.createdAt, -1)\n    })\n  )\n  // 새로운 answer 를 작성할때 사용하는 state: content\n  const [content, setContent] = useState('')\n  const [isEditingAnswer, setEditingAnswer] = useState(false)\n  const [editedAnswerIndex, setEditedAnswerIndex] = useState()\n  // 기존 answer 를 수정할때 사용하는 state: editedAnswerContent\n  const [editedAnswerContent, setEditedAnswerContent] = useState('')\n  const { userID, userNickname } = useSelector((state) => {\n    return {\n      userID: state.auth.userID,\n      userNickname: state.auth.userNickname,\n    }\n  })\n\n  const dispatch = useDispatch()\n\n  function startEditAnswer(answer, index) {\n    setEditingAnswer(true)\n    setEditedAnswerIndex(index)\n    setEditedAnswerContent(answer.answerBody.content)\n  }\n\n  function onChangeAnswerContent(value) {\n    setEditedAnswerContent(value)\n  }\n\n  // 새로운 answer 를 추가할때 사용된다.\n  const onChangeContent = useCallback((value) => {\n    setContent(value)\n  }, [])\n\n  const addAnswer = useCallback(\n    (e) => {\n      e.preventDefault()\n      if (!content) {\n        return alert('게시글을 작성하세요.')\n      }\n\n      const uid24 = uid(24)\n      const formData = {\n        answerID: uid24,\n        postID: data.question._id,\n        contentType: 'answer',\n        content: content,\n        authorID: userID,\n        authorNickname: userNickname,\n      }\n      const tempAnswer = {\n        __v: 0,\n        _id: uid24,\n        answerBody: {\n          answerID: uid24,\n          authorID: userID,\n          authorNickname: userNickname,\n          content: content,\n          createdAt: '지금', // Date.now() 가 알수없는 오류를 낸다. 생각해보니 걍 이런식으로 써도 될듯.\n          lastUpdate: '지금',\n          postID: data.question._id,\n        },\n      }\n      dispatch(createAnswer(formData))\n      setAnswers([...answers, tempAnswer])\n      setContent('')\n    },\n    [content, answers, data.question._id, dispatch, userID, userNickname]\n  )\n\n  const onUpdateAnswer = useCallback(\n    (answerID, index) => {\n      if (!editedAnswerContent) {\n        alert('본문을 입력해 주세요.')\n        return\n      }\n      const data = { content: editedAnswerContent }\n      dispatch(updateAnswer(answerID, data))\n      setEditingAnswer(false)\n      // immer 를 쓰는것보단 이게 나을지도.\n      const tempAnswer = {\n        ...answers[index],\n        answerBody: {\n          ...answers[index].answerBody,\n          content: editedAnswerContent,\n          lastUpdate: '지금',\n        },\n      }\n\n      setAnswers(\n        answers.map((answer, answerIndex) => {\n          if (answerIndex === index) {\n            return tempAnswer\n          } else {\n            return answer\n          }\n        })\n      )\n    },\n    [editedAnswerContent, answers, dispatch]\n  )\n\n  const onDeleteAnswer = useCallback(\n    (answerID, index) => {\n      dispatch(deleteAnswer(answerID))\n      answers.splice(index, 1)\n      setAnswers([...answers])\n    },\n    [answers, dispatch]\n  )\n\n  return (\n    <AnswerContainer>\n      {answers.map((element, index) => {\n        return (\n          <AnswerBlock key={index}>\n            {isEditingAnswer && editedAnswerIndex === index ? (\n              // answer 가 수정중일때\n              <div key={index}>\n                <MarkdownEditorBlock\n                  contentProps={editedAnswerContent}\n                  onChangeContentProps={onChangeAnswerContent}\n                  height=\"350px\"\n                />\n                <MarkdownRenderingBlock content={editedAnswerContent} />\n                <Button\n                  onClick={() => {\n                    onUpdateAnswer(element._id, index)\n                  }}\n                >\n                  수정완료\n                </Button>\n              </div>\n            ) : (\n              // answer 가 수정중이 아닐때\n              <div key={index}>\n                <div className=\"content\">\n                  answer{index}\n                  {element.answerBody ? (\n                    <MarkdownRenderingBlock\n                      content={element.answerBody.content}\n                    />\n                  ) : (\n                    ''\n                  )}\n                </div>\n                <div>\n                  <Link to={`/user/${element.answerBody.authorID}`}>\n                    답변 작성자 닉네임: {element.answerBody.authorNickname}\n                  </Link>\n                </div>\n                <div>마지막 업데이트 날짜: {element.answerBody.lastUpdate}</div>\n\n                {userID !== '000000000000000000000000' &&\n                userID === element.answerBody.authorID ? (\n                  <>\n                    <Button\n                      onClick={() => {\n                        startEditAnswer(element, index)\n                      }}\n                    >\n                      answer 수정\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        onDeleteAnswer(element._id, index)\n                      }}\n                    >\n                      answer 삭제\n                    </Button>\n                  </>\n                ) : (\n                  ''\n                )}\n\n                {/* <CommentListBlock commentList={element.answerBody.comments} /> */}\n                <MarkdownEditorBlock />\n\n                <Button>answer에 댓글달기</Button>\n              </div>\n            )}\n          </AnswerBlock>\n        )\n      })}\n\n      <MarkdownEditorBlock\n        className=\"answerWrite\"\n        onChangeContentProps={onChangeContent}\n        contentProps={content}\n        height=\"350px\"\n      />\n      <MarkdownRenderingBlock content={content} />\n      <Button onClick={addAnswer}>answer 추가하기</Button>\n    </AnswerContainer>\n  )\n})\n\nconst AnswerContainer = styled.div`\n  width: inherit;\n`\n\nconst AnswerBlock = styled.div`\n  margin-top: 20px;\n  margin-bottom: 40px;\n`\n","/Users/zowan/Documents/web/tect-react/src/components/CommentListBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteSection.js",["267","268","269","270","271"],"import React, { useCallback, useEffect, useState } from 'react'\nimport { uid } from 'uid'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { createQuestion } from '../../redux/createPost'\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\nimport { TagBlock } from '../TagBlock'\nimport { Button } from '../Button'\nimport styled from 'styled-components'\nimport { textTooLongAlert } from '../../lib/functions'\nimport HalfWidthContainer from '../../components/layout/HalfWidthContainer'\n\nexport default React.memo(function QuestionWriteSection() {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [hashtagText, setHashtagText] = useState('')\n  const [hashtagList, setHashtagList] = useState([])\n\n  const splitPoint = /\\,/g\n\n  const { userID, userNickname } = useSelector((state) => {\n    return {\n      userID: state.auth.userID,\n      userNickname: state.auth.userNickname,\n    }\n  })\n\n  const dispatch = useDispatch()\n\n  const onChangeTitle = useCallback(\n    (e) => {\n      setTitle(textTooLongAlert(e.target.value, 100))\n    },\n    [title]\n  )\n\n  function onChangeContent(value) {\n    textTooLongAlert(value, 50000)\n    setContent(value)\n  }\n\n  useEffect(() => {\n    if (hashtagList.length > 10) {\n      setHashtagText(hashtagText.substr(0, hashtagText.length - 1))\n      hashtagList.pop()\n      alert('태그의 갯수가 너무 많아요!')\n    }\n  }, [hashtagList])\n\n  const onChangeHashtagText = useCallback(\n    (e) => {\n      setHashtagText(textTooLongAlert(e.target.value, 100))\n      let splitedArray = e.target.value.split(splitPoint)\n      const editedArray = splitedArray\n        .map((element) => {\n          return element.replace(/[^가-힣|a-z|A-Z|0-9]/g, '')\n        })\n        .filter((string) => string.length > 0)\n\n      setHashtagList(editedArray)\n    },\n    [hashtagText]\n  )\n\n  const onSubmitForm = useCallback(\n    async (e) => {\n      e.preventDefault()\n      if (!title || !content) {\n        return alert('제목과 본문을 작성해 주세요.')\n      }\n\n      const uid24 = uid(24)\n      const formData = {\n        postID: uid24,\n        title: title,\n        contentType: 'question',\n        content: content,\n        authorID: userID,\n        authorNickname: userNickname,\n        hashtags: hashtagList,\n      }\n\n      dispatch(createQuestion(formData))\n    },\n    [title, content, hashtagList]\n  )\n\n  return (\n    <div>\n      <HalfWidthContainer>\n        <EditorContainer>\n          <form onSubmit={onSubmitForm}>\n            <div>\n              <label htmlFor=\"title\">\n                <h3>제목</h3>\n              </label>\n\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={title}\n                maxLength=\"300\"\n                onChange={onChangeTitle}\n              />\n            </div>\n            <h3>본문</h3>\n\n            <MarkdownEditorBlock\n              contentProps={content}\n              onChangeContentProps={onChangeContent}\n              height=\"400px\"\n            />\n            <div>\n              <label htmlFor=\"hashtag\">\n                <h3>Tags</h3>\n                태그는 쉼표로 구분되며, 10개까지 입력 가능합니다{' '}\n              </label>\n              <div>\n                <input\n                  type=\"text\"\n                  id=\"hashtag\"\n                  value={hashtagText}\n                  onChange={onChangeHashtagText}\n                />\n              </div>\n            </div>\n            <div>\n              {hashtagList.map((element, index) => {\n                return (\n                  <TagBlock\n                    key={index}\n                    text={element}\n                    function={(e) => {\n                      e.preventDefault()\n                    }}\n                  />\n                )\n              })}\n            </div>\n            <div className=\"button\">\n              <Button\n                className=\"ask-btn\"\n                type=\"submit\"\n                buttonStyle=\"btn--outline\"\n              >\n                작성 완료\n              </Button>\n            </div>\n          </form>\n        </EditorContainer>\n      </HalfWidthContainer>\n      <HalfWidthContainer>\n        <PreviewContainer>\n          <div>\n            <h2>Preview</h2>\n          </div>\n          <MarkdownRenderingBlock content={content} />\n        </PreviewContainer>\n      </HalfWidthContainer>\n    </div>\n  )\n})\n\nconst EditorContainer = styled.div`\n  display: block;\n`\n\nconst PreviewContainer = styled.div`\n  display: block;\n`\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionEditPage.js",["272","273","274","275","276"],"import React, { useEffect, useCallback, useState } from 'react'\nimport { useInput } from '../../hooks/hooks'\nimport MainLayout from '../../components/layout/MainLayout'\nimport { useSelector, useDispatch } from 'react-redux'\nimport MarkdownRenderingBlock from '../../components/MarkdownRenderingBlock'\nimport QuestionEditSection from '../../components/question/QuestionEditSection'\nimport { useHistory } from 'react-router-dom'\n\nexport default function QuestionEditPage() {\n  const { data, userID } = useSelector((state) => {\n    return {\n      data: state.readPost.question.data,\n      userID: state.auth.userID,\n    }\n  }) || {\n    data: { question: { questionBody: '' } },\n    userID: null,\n  }\n\n  const history = useHistory()\n\n  useEffect(() => {\n    if (data.question.questionBody.authorID !== userID) {\n      alert('잘못된 접근입니다.')\n      history.push('/question')\n    }\n  }, [history])\n\n  return (\n    <MainLayout>\n      <section>\n        <QuestionEditSection initialData={data} />\n      </section>\n      <section>\n        <div id=\"preview\">\n          <div>Preview</div>\n          <MarkdownRenderingBlock\n            content={data.question.questionBody.content}\n          />\n        </div>\n      </section>\n    </MainLayout>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/components/layout/Navbar.js",["277","278","279","280","281","282"],"import React, { useState, useCallback, useLayoutEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport '../../styles/layout/Header.scss'\nimport { FaTimes, FaBars } from 'react-icons/fa'\nimport { LoginModal } from './LoginModal'\n\nexport default function Navbar() {\n  // useSelector: 리덕스 스토어의 상태를 조회하는 hooks.\n  // state 의 값은 리덕스 스토에다가 getState() 를 호출했을때 나오는 값과 같음.\n  const { userID, userNickname, loginState } = useSelector((state) => {\n    console.log('useSelector:')\n    return {\n      loginState: state.auth.loginState,\n      userID: state.auth.userID,\n      userNickname: state.auth.userNickname,\n    }\n  })\n\n  //const loginState = JSON.parse(\n  //  localStorage.getItem(\n  //    'FE37F882DCF4A30642E6B59D595F0760B0F1C3FE86F466922270B61E6D09106D'\n  //  )\n  //)\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n\n  const [menuClick, setMenuClick] = useState(false)\n\n  const handleMenuClick = () => setMenuClick(!menuClick)\n  const closeMobileMenu = () => setMenuClick(false)\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <div className=\"logo-container\">\n          <NavLink to=\"/\" className=\"logo\">\n            Tect.dev\n          </NavLink>\n        </div>\n        <div className=\"menu-icon\" onClick={handleMenuClick}>\n          {menuClick ? <FaTimes /> : <FaBars />}\n        </div>\n        <nav className=\"navbar\">\n          <ul\n            className={\n              menuClick ? 'navbar-container clicked' : 'navbar-container'\n            }\n          >\n            <li className=\"navbar-item\">\n              <NavLink to=\"/question\" className=\"navbar-item-link\">\n                Q {`\\&`} A\n              </NavLink>\n            </li>\n            <li className=\"navbar-item\">\n              <NavLink to=\"/article\" className=\"navbar-item-link\">\n                Article\n              </NavLink>\n            </li>\n            <li className=\"navbar-item\">\n              <NavLink to=\"/freeboard\" className=\"navbar-item-link\">\n                Freeboard\n              </NavLink>\n            </li>\n            <div className=\"header-search\">\n              <input className=\"header-search-input\" placeholder=\"Search...\" />\n            </div>\n            <div className=\"auth-container\">\n              {loginState ? (\n                <div className=\"mypage-container\">\n                  <NavLink to={`/user/${userID}`} className=\"navbar-item-link\">\n                    MyPage\n                  </NavLink>\n                </div>\n              ) : (\n                <div className=\"login-container\">\n                  <input\n                    className=\"login-modal-input\"\n                    type=\"checkbox\"\n                    id=\"login-popup\"\n                  />\n                  <label htmlFor=\"login-popup\" className=\"login-modal-btn\">\n                    Login\n                  </label>\n                  <LoginModal labelFor=\"login-popup\" />\n                </div>\n              )}\n            </div>\n          </ul>\n        </nav>\n      </div>\n    </header>\n    // <>\n    //   <nav className=\"navbar\">\n    //     <div className=\"nav-container\">\n    //       <Link to=\"/\" className=\"navbar-logo\">\n    //         Tect.dev\n    //       </Link>\n    //       <div className=\"menu-icon\" onClick={handleMenuClick}>\n    //         {menuClick ? <FaTimes /> : <FaBars />}\n    //       </div>\n    //       <ul className={menuClick ? 'nav-menu active' : 'nav-menu'}>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/question\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             QnA\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/article\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             Article\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <Link\n    //             to=\"/freeboard\"\n    //             className=\"nav-links\"\n    //             onClick={closeMobileMenu}\n    //           >\n    //             Freeboard\n    //           </Link>\n    //         </li>\n    //         <li className=\"nav-item\" id=\"input-container\">\n    //           <div className=\"input-container\">\n    //             <input />\n    //           </div>\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           {loginState ? (\n    //             <Link\n    //               to=\"/user/userID\"\n    //               className=\"nav-links\"\n    //               onClick={closeMobileMenu}\n    //             >\n    //               MyPage\n    //             </Link>\n    //           ) : (\n    //             <div className=\"nav-btns\">\n    //               <Button buttonStyle=\"btn--outline\">Login</Button>\n    //             </div>\n    //           )}\n    //         </li>\n    //         <li className=\"nav-item\">\n    //           <button onClick={onLogin}>임시 로그인 테스트용 버튼</button>\n    //         </li>\n    //       </ul>\n    //     </div>\n    //   </nav>\n    // </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionEditSection.js",["283","284","285","286"],"import React, { useCallback, useEffect, useState } from 'react'\nimport { uid } from 'uid'\nimport { useInput } from '../../hooks/hooks'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateQuestion } from '../../redux/updatePost'\nimport MarkdownEditorBlock from '../MarkdownEditorBlock'\nimport MarkdownRenderingBlock from '../MarkdownRenderingBlock'\n\nexport default React.memo(function QuestionEditSection({ initialData }) {\n  const [title, onChangeTitle] = useInput(\n    initialData.question.questionBody.title\n  )\n  const [content, setContent] = useState(\n    initialData.question.questionBody.content\n  )\n  const [hashtagText, setHashtagText] = useState(\n    mergeArray(initialData.question.questionBody.hashtags, `\\,`)\n  )\n  const [hashtagList, setHashtagList] = useState(\n    initialData.question.questionBody.hashtags\n  )\n  const questionID = initialData.question._id || 'error'\n  const splitPoint = /\\,/g\n\n  function mergeArray(array, splitter) {\n    let mergedOne = ''\n    for (const element of array) {\n      mergedOne = mergedOne + element + splitter\n    }\n    return mergedOne\n  }\n\n  const { userID, userNickname } = useSelector((state) => {\n    return {\n      userID: state.auth.userID,\n      userNickname: state.auth.userNickname,\n    }\n  }) || {\n    userID: '123456789012345678901234',\n    userNickname: '익명',\n  }\n\n  const dispatch = useDispatch()\n\n  function onChangeContent(value) {\n    setContent(value)\n  }\n\n  useEffect(() => {\n    if (hashtagList.length > 10) {\n      setHashtagText(hashtagText.substr(0, hashtagText.length - 1))\n      hashtagList.pop()\n      alert('태그의 갯수가 너무 많아요!')\n    }\n  }, [hashtagList, hashtagText])\n\n  const onChangeHashtagText = useCallback(\n    (e) => {\n      setHashtagText(e.target.value)\n      let splitedArray = e.target.value.split(splitPoint)\n      const editedArray = splitedArray\n        .map((element) => {\n          return element.replace(/[^가-힣|a-z|A-Z|0-9]/g, '')\n        })\n        .filter((string) => string.length > 0)\n\n      setHashtagList(editedArray)\n    },\n    [hashtagText, splitPoint]\n  )\n\n  const onSubmitForm = useCallback(\n    async (e) => {\n      e.preventDefault()\n      if (!title || !content) {\n        return alert('제목과 본문을 작성해 주세요.')\n      }\n\n      const formData = {\n        postID: questionID,\n        title: title,\n        contentType: 'question',\n        content: content,\n        authorID: userID,\n        authorNickname: userNickname,\n        hashtags: hashtagList,\n      }\n\n      dispatch(updateQuestion(formData))\n    },\n    [title, content, hashtagList, dispatch, questionID, userID, userNickname]\n  )\n\n  return (\n    <>\n      <section>\n        <form onSubmit={onSubmitForm}>\n          <div>\n            <label htmlFor=\"title\">title: </label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={title}\n              onChange={onChangeTitle}\n            />\n          </div>\n          본문\n          <MarkdownEditorBlock\n            contentProps={content}\n            onChangeContentProps={onChangeContent}\n            height=\"400px\"\n          />\n          <div>\n            <label htmlFor=\"hashtag\">hashtag: </label>\n            <input\n              type=\"text\"\n              id=\"hashtag\"\n              value={hashtagText}\n              onChange={onChangeHashtagText}\n            />\n          </div>\n          <div>\n            hashtag가 제대로 체크 되나:{' '}\n            {hashtagList.map((element, index) => {\n              return (\n                <div key={index}>\n                  <a href=\"/\" style={{ color: 'blue' }}>\n                    {element}\n                  </a>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"button\">\n            <button type=\"submit\">Send your message</button>\n          </div>\n        </form>\n      </section>\n      <section>\n        <MarkdownRenderingBlock content={content} />\n      </section>\n    </>\n  )\n})\n","/Users/zowan/Documents/web/tect-react/src/components/Spinner.js",[],"/Users/zowan/Documents/web/tect-react/src/components/TagBlock.js",["287"],"import React, { useCallback } from 'react'\nimport styled from 'styled-components'\n\nconst StyledTagBlock = styled.div`\n  display: inline-flex;\n  border-radius: 5px;\n  background: #00bebe;\n  color: #ffffff;\n  padding: 2px 2px;\n  margin: 2px 2px 0 2px;\n  width: inherit;\n  opacity: 0.8;\n  &:hover {\n    background: #00bebe;\n    color: #ffffff;\n    transition: all ease-in 0.2s;\n    opacity: 1;\n    cursor: pointer;\n  }\n`\n\nexport const TagBlock = React.memo(({ text, functionProps }) => {\n  const onClickTag = useCallback((e) => {\n    alert('tag is clicked!')\n  })\n  return <StyledTagBlock onClick={onClickTag}>{text}</StyledTagBlock>\n})\n","/Users/zowan/Documents/web/tect-react/src/lib/constants.js",[],"/Users/zowan/Documents/web/tect-react/src/components/layout/HalfWidthContainer.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/firebase.js",[],{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":36},{"ruleId":"292","severity":1,"message":"296","line":13,"column":10,"nodeType":"294","messageId":"295","endLine":13,"endColumn":21},{"ruleId":"297","severity":1,"message":"298","line":37,"column":6,"nodeType":"299","endLine":37,"endColumn":8,"suggestions":"300"},{"ruleId":"292","severity":1,"message":"301","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"302","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":39},{"ruleId":"292","severity":1,"message":"293","line":1,"column":41,"nodeType":"294","messageId":"295","endLine":1,"endColumn":49},{"ruleId":"292","severity":1,"message":"302","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":21},{"ruleId":"292","severity":1,"message":"303","line":1,"column":34,"nodeType":"294","messageId":"295","endLine":1,"endColumn":49},{"ruleId":"292","severity":1,"message":"304","line":1,"column":30,"nodeType":"294","messageId":"295","endLine":1,"endColumn":43},{"ruleId":"292","severity":1,"message":"305","line":9,"column":17,"nodeType":"294","messageId":"295","endLine":9,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":24,"column":15,"nodeType":"308","endLine":24,"endColumn":131},{"ruleId":"297","severity":1,"message":"309","line":24,"column":6,"nodeType":"299","endLine":24,"endColumn":16,"suggestions":"310"},{"ruleId":"292","severity":1,"message":"311","line":1,"column":23,"nodeType":"294","messageId":"295","endLine":1,"endColumn":39},{"ruleId":"292","severity":1,"message":"312","line":23,"column":7,"nodeType":"294","messageId":"295","endLine":23,"endColumn":25},{"ruleId":"292","severity":1,"message":"313","line":24,"column":7,"nodeType":"294","messageId":"295","endLine":24,"endColumn":29},{"ruleId":"292","severity":1,"message":"314","line":25,"column":7,"nodeType":"294","messageId":"295","endLine":25,"endColumn":26},{"ruleId":"292","severity":1,"message":"315","line":35,"column":7,"nodeType":"294","messageId":"295","endLine":35,"endColumn":25},{"ruleId":"292","severity":1,"message":"316","line":36,"column":7,"nodeType":"294","messageId":"295","endLine":36,"endColumn":29},{"ruleId":"292","severity":1,"message":"317","line":37,"column":7,"nodeType":"294","messageId":"295","endLine":37,"endColumn":26},{"ruleId":"306","severity":1,"message":"307","line":59,"column":15,"nodeType":"308","endLine":59,"endColumn":71},{"ruleId":"306","severity":1,"message":"307","line":65,"column":15,"nodeType":"308","endLine":65,"endColumn":72},{"ruleId":"306","severity":1,"message":"307","line":71,"column":15,"nodeType":"308","endLine":71,"endColumn":75},{"ruleId":"306","severity":1,"message":"307","line":77,"column":15,"nodeType":"308","endLine":77,"endColumn":69},{"ruleId":"306","severity":1,"message":"307","line":83,"column":15,"nodeType":"308","endLine":83,"endColumn":74},{"ruleId":"306","severity":1,"message":"307","line":89,"column":15,"nodeType":"308","endLine":89,"endColumn":68},{"ruleId":"292","severity":1,"message":"301","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"318","line":10,"column":11,"nodeType":"294","messageId":"295","endLine":10,"endColumn":21},{"ruleId":"292","severity":1,"message":"319","line":10,"column":23,"nodeType":"294","messageId":"295","endLine":10,"endColumn":31},{"ruleId":"297","severity":1,"message":"320","line":43,"column":5,"nodeType":"299","endLine":43,"endColumn":14,"suggestions":"321"},{"ruleId":"288","replacedBy":"322"},{"ruleId":"290","replacedBy":"323"},{"ruleId":"288","replacedBy":"324"},{"ruleId":"290","replacedBy":"325"},{"ruleId":"292","severity":1,"message":"326","line":39,"column":9,"nodeType":"294","messageId":"295","endLine":39,"endColumn":22},{"ruleId":"292","severity":1,"message":"327","line":48,"column":9,"nodeType":"294","messageId":"295","endLine":48,"endColumn":26},{"ruleId":"292","severity":1,"message":"328","line":52,"column":11,"nodeType":"294","messageId":"295","endLine":52,"endColumn":20},{"ruleId":"292","severity":1,"message":"329","line":171,"column":12,"nodeType":"294","messageId":"295","endLine":171,"endColumn":30},{"ruleId":"330","severity":1,"message":"331","line":267,"column":29,"nodeType":"332","messageId":"333","endLine":267,"endColumn":31},{"ruleId":"292","severity":1,"message":"334","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":14},{"ruleId":"292","severity":1,"message":"335","line":6,"column":10,"nodeType":"294","messageId":"295","endLine":6,"endColumn":20},{"ruleId":"297","severity":1,"message":"336","line":29,"column":5,"nodeType":"299","endLine":29,"endColumn":12,"suggestions":"337"},{"ruleId":"297","severity":1,"message":"338","line":36,"column":5,"nodeType":"299","endLine":36,"endColumn":15,"suggestions":"339"},{"ruleId":"292","severity":1,"message":"340","line":15,"column":24,"nodeType":"294","messageId":"295","endLine":15,"endColumn":34},{"ruleId":"292","severity":1,"message":"301","line":1,"column":30,"nodeType":"294","messageId":"295","endLine":1,"endColumn":39},{"ruleId":"292","severity":1,"message":"340","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":20},{"ruleId":"292","severity":1,"message":"341","line":5,"column":22,"nodeType":"294","messageId":"295","endLine":5,"endColumn":34},{"ruleId":"292","severity":1,"message":"301","line":1,"column":40,"nodeType":"294","messageId":"295","endLine":1,"endColumn":49},{"ruleId":"292","severity":1,"message":"342","line":4,"column":8,"nodeType":"294","messageId":"295","endLine":4,"endColumn":24},{"ruleId":"292","severity":1,"message":"343","line":10,"column":26,"nodeType":"294","messageId":"295","endLine":10,"endColumn":39},{"ruleId":"297","severity":1,"message":"344","line":28,"column":6,"nodeType":"299","endLine":28,"endColumn":16,"suggestions":"345"},{"ruleId":"292","severity":1,"message":"343","line":30,"column":12,"nodeType":"294","messageId":"295","endLine":30,"endColumn":25},{"ruleId":"292","severity":1,"message":"301","line":1,"column":17,"nodeType":"294","messageId":"295","endLine":1,"endColumn":26},{"ruleId":"292","severity":1,"message":"342","line":3,"column":8,"nodeType":"294","messageId":"295","endLine":3,"endColumn":24},{"ruleId":"330","severity":1,"message":"346","line":17,"column":30,"nodeType":"332","messageId":"333","endLine":17,"endColumn":32},{"ruleId":"347","severity":1,"message":"348","line":19,"column":23,"nodeType":"349","messageId":"350","endLine":19,"endColumn":24,"suggestions":"351"},{"ruleId":"297","severity":1,"message":"352","line":34,"column":5,"nodeType":"299","endLine":34,"endColumn":12,"suggestions":"353"},{"ruleId":"297","severity":1,"message":"354","line":48,"column":6,"nodeType":"299","endLine":48,"endColumn":19,"suggestions":"355"},{"ruleId":"297","severity":1,"message":"356","line":62,"column":5,"nodeType":"299","endLine":62,"endColumn":18,"suggestions":"357"},{"ruleId":"297","severity":1,"message":"358","line":85,"column":5,"nodeType":"299","endLine":85,"endColumn":34,"suggestions":"359"},{"ruleId":"292","severity":1,"message":"302","line":1,"column":28,"nodeType":"294","messageId":"295","endLine":1,"endColumn":39},{"ruleId":"292","severity":1,"message":"293","line":1,"column":41,"nodeType":"294","messageId":"295","endLine":1,"endColumn":49},{"ruleId":"292","severity":1,"message":"360","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":18},{"ruleId":"292","severity":1,"message":"361","line":4,"column":23,"nodeType":"294","messageId":"295","endLine":4,"endColumn":34},{"ruleId":"297","severity":1,"message":"362","line":27,"column":6,"nodeType":"299","endLine":27,"endColumn":15,"suggestions":"363"},{"ruleId":"292","severity":1,"message":"302","line":1,"column":27,"nodeType":"294","messageId":"295","endLine":1,"endColumn":38},{"ruleId":"292","severity":1,"message":"303","line":1,"column":40,"nodeType":"294","messageId":"295","endLine":1,"endColumn":55},{"ruleId":"292","severity":1,"message":"361","line":3,"column":23,"nodeType":"294","messageId":"295","endLine":3,"endColumn":34},{"ruleId":"292","severity":1,"message":"364","line":11,"column":19,"nodeType":"294","messageId":"295","endLine":11,"endColumn":31},{"ruleId":"292","severity":1,"message":"365","line":32,"column":9,"nodeType":"294","messageId":"295","endLine":32,"endColumn":24},{"ruleId":"347","severity":1,"message":"366","line":53,"column":21,"nodeType":"367","messageId":"350","endLine":53,"endColumn":22,"suggestions":"368"},{"ruleId":"292","severity":1,"message":"369","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":13},{"ruleId":"347","severity":1,"message":"348","line":17,"column":61,"nodeType":"367","messageId":"350","endLine":17,"endColumn":62,"suggestions":"370"},{"ruleId":"347","severity":1,"message":"348","line":23,"column":23,"nodeType":"349","messageId":"350","endLine":23,"endColumn":24,"suggestions":"371"},{"ruleId":"297","severity":1,"message":"372","line":69,"column":5,"nodeType":"299","endLine":69,"endColumn":30,"suggestions":"373"},{"ruleId":"297","severity":1,"message":"374","line":23,"column":22,"nodeType":"294","endLine":23,"endColumn":33},"no-native-reassign",["375"],"no-negated-in-lhs",["376"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["377"],"'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useLayoutEffect' is defined but never used.","'useDebugValue' is defined but never used.","'myNickname' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getQuestionAsync'. Either include it or remove the dependency array.",["378"],"'firebaseInstance' is defined but never used.","'UPDATE_COMMENT_TRY' is assigned a value but never used.","'UPDATE_COMMENT_SUCCESS' is assigned a value but never used.","'UPDATE_COMMENT_FAIL' is assigned a value but never used.","'CREATE_COMMENT_TRY' is assigned a value but never used.","'CREATE_COMMENT_SUCCESS' is assigned a value but never used.","'CREATE_COMMENT_FAIL' is assigned a value but never used.","'loginState' is assigned a value but never used.","'userInfo' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'questionUID'. Either include them or remove the dependency array.",["379"],["375"],["376"],["375"],["376"],"'containerRect' is assigned a value but never used.","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'onClickTag' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'email'. Either exclude it or remove the dependency array.",["380"],"React Hook useCallback has an unnecessary dependency: 'password'. Either exclude it or remove the dependency array.",["381"],"'mediaQuery' is defined but never used.","'colorPalette' is defined but never used.","'CommentListBlock' is defined but never used.","'deleteComment' is defined but never used.","React Hook useCallback has a missing dependency: 'data.question._id'. Either include it or remove the dependency array.",["382"],"Array.prototype.sort() expects a return value from arrow function.","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["383","384"],"React Hook useCallback has an unnecessary dependency: 'title'. Either exclude it or remove the dependency array.",["385"],"React Hook useEffect has a missing dependency: 'hashtagText'. Either include it or remove the dependency array. You can also do a functional update 'setHashtagText(h => ...)' if you only need 'hashtagText' in the 'setHashtagText' call.",["386"],"React Hook useCallback has a missing dependency: 'splitPoint'. Either include it or remove the dependency array.",["387"],"React Hook useCallback has missing dependencies: 'dispatch', 'userID', and 'userNickname'. Either include them or remove the dependency array.",["388"],"'useInput' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'data.question.questionBody.authorID' and 'userID'. Either include them or remove the dependency array.",["389"],"'userNickname' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","Unnecessary escape character: \\&.","TemplateElement",["390","391"],"'uid' is defined but never used.",["392","393"],["394","395"],"React Hook useCallback has an unnecessary dependency: 'hashtagText'. Either exclude it or remove the dependency array.",["396"],"React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation",{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"403","fix":"405"},{"desc":"406","fix":"407"},{"messageId":"408","fix":"409","desc":"410"},{"messageId":"411","fix":"412","desc":"413"},{"desc":"403","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"messageId":"408","fix":"423","desc":"410"},{"messageId":"411","fix":"424","desc":"413"},{"messageId":"408","fix":"425","desc":"410"},{"messageId":"411","fix":"426","desc":"413"},{"messageId":"408","fix":"427","desc":"410"},{"messageId":"411","fix":"428","desc":"413"},{"desc":"417","fix":"429"},"Update the dependencies array to be: [dispatch]",{"range":"430","text":"431"},"Update the dependencies array to be: [dispatch, getQuestionAsync]",{"range":"432","text":"433"},"Update the dependencies array to be: [content, dispatch, questionUID]",{"range":"434","text":"435"},"Update the dependencies array to be: []",{"range":"436","text":"437"},{"range":"438","text":"437"},"Update the dependencies array to be: [data.question._id, dispatch]",{"range":"439","text":"440"},"removeEscape",{"range":"441","text":"442"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"443","text":"444"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"445","text":"437"},"Update the dependencies array to be: [hashtagList, hashtagText]",{"range":"446","text":"447"},"Update the dependencies array to be: [splitPoint]",{"range":"448","text":"449"},"Update the dependencies array to be: [title, content, userID, userNickname, hashtagList, dispatch]",{"range":"450","text":"451"},"Update the dependencies array to be: [data.question.questionBody.authorID, history, userID]",{"range":"452","text":"453"},{"range":"454","text":"442"},{"range":"455","text":"444"},{"range":"456","text":"442"},{"range":"457","text":"444"},{"range":"458","text":"442"},{"range":"459","text":"444"},{"range":"460","text":"449"},[1371,1373],"[dispatch]",[892,902],"[dispatch, getQuestionAsync]",[1436,1445],"[content, dispatch, questionUID]",[812,819],"[]",[923,933],[965,975],"[data.question._id, dispatch]",[841,842],"",[841,841],"\\",[1159,1166],[1459,1472],"[hashtagList, hashtagText]",[1880,1893],"[splitPoint]",[2374,2403],"[title, content, userID, userNickname, hashtagList, dispatch]",[877,886],"[data.question.questionBody.authorID, history, userID]",[1774,1775],[1774,1774],[734,735],[734,734],[923,924],[923,923],[2042,2067]]