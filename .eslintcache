[{"/Users/zowan/Documents/web/tect-react/src/index.js":"1","/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js":"2","/Users/zowan/Documents/web/tect-react/src/App.js":"3","/Users/zowan/Documents/web/tect-react/src/redux/index.js":"4","/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js":"5","/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js":"6","/Users/zowan/Documents/web/tect-react/src/redux/auth.js":"7","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js":"8","/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js":"9","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js":"10","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js":"11","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js":"12","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js":"13","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js":"14","/Users/zowan/Documents/web/tect-react/src/components/MainLayout.js":"15","/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js":"16","/Users/zowan/Documents/web/tect-react/src/components/Navbar.js":"17","/Users/zowan/Documents/web/tect-react/src/components/Button.js":"18","/Users/zowan/Documents/web/tect-react/src/redux/post.js":"19","/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js":"20","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js":"21","/Users/zowan/Documents/web/tect-react/src/components/Footer.js":"22","/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js":"23","/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js":"24","/Users/zowan/Documents/web/tect-react/src/redux/readPost.js":"25","/Users/zowan/Documents/web/tect-react/src/redux/createPost.js":"26","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js":"27","/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js":"28","/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js":"29","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteBlock.js":"30","/Users/zowan/Documents/web/tect-react/src/lib/functions.js":"31","/Users/zowan/Documents/web/tect-react/src/components/question/MarkdownPreviewBlock.js":"32","/Users/zowan/Documents/web/tect-react/src/components/home/OrbitGraph.js":"33","/Users/zowan/Documents/web/tect-react/src/components/home/ClusteredForceGraph.js":"34","/Users/zowan/Documents/web/tect-react/src/components/home/TreeGraph.js":"35"},{"size":1003,"mtime":1609738809560,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1609067299109,"results":"38","hashOfConfig":"37"},{"size":1394,"mtime":1609738809557,"results":"39","hashOfConfig":"37"},{"size":510,"mtime":1609738809563,"results":"40","hashOfConfig":"37"},{"size":4357,"mtime":1609954528446,"results":"41","hashOfConfig":"37"},{"size":187,"mtime":1609128830553,"results":"42","hashOfConfig":"37"},{"size":1192,"mtime":1609738809562,"results":"43","hashOfConfig":"37"},{"size":192,"mtime":1609129954217,"results":"44","hashOfConfig":"37"},{"size":275,"mtime":1609249874878,"results":"45","hashOfConfig":"37"},{"size":1718,"mtime":1609738809562,"results":"46","hashOfConfig":"37"},{"size":1490,"mtime":1609815053458,"results":"47","hashOfConfig":"37"},{"size":192,"mtime":1609248456580,"results":"48","hashOfConfig":"37"},{"size":660,"mtime":1609738809562,"results":"49","hashOfConfig":"37"},{"size":10023,"mtime":1609822607217,"results":"50","hashOfConfig":"37"},{"size":304,"mtime":1609738809557,"results":"51","hashOfConfig":"37"},{"size":20050,"mtime":1609954737143,"results":"52","hashOfConfig":"37"},{"size":2878,"mtime":1609923248682,"results":"53","hashOfConfig":"37"},{"size":606,"mtime":1609249884112,"results":"54","hashOfConfig":"37"},{"size":2829,"mtime":1609738809564,"results":"55","hashOfConfig":"37"},{"size":1180,"mtime":1609738809560,"results":"56","hashOfConfig":"37"},{"size":204,"mtime":1609738809559,"results":"57","hashOfConfig":"37"},{"size":308,"mtime":1609738809557,"results":"58","hashOfConfig":"37"},{"size":308,"mtime":1609738809558,"results":"59","hashOfConfig":"37"},{"size":250,"mtime":1609249874876,"results":"60","hashOfConfig":"37"},{"size":5370,"mtime":1609738809564,"results":"61","hashOfConfig":"37"},{"size":4229,"mtime":1609822607219,"results":"62","hashOfConfig":"37"},{"size":157,"mtime":1609738809564,"results":"63","hashOfConfig":"37"},{"size":157,"mtime":1609738809563,"results":"64","hashOfConfig":"37"},{"size":2033,"mtime":1609815053458,"results":"65","hashOfConfig":"37"},{"size":2751,"mtime":1609738809559,"results":"66","hashOfConfig":"37"},{"size":1349,"mtime":1609738809561,"results":"67","hashOfConfig":"37"},{"size":1312,"mtime":1609738809559,"results":"68","hashOfConfig":"37"},{"size":8828,"mtime":1609948788865,"results":"69","hashOfConfig":"37"},{"size":5063,"mtime":1609923006449,"results":"70","hashOfConfig":"37"},{"size":6891,"mtime":1609954650440,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"xgtey9",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zowan/Documents/web/tect-react/src/index.js",[],["157","158"],"/Users/zowan/Documents/web/tect-react/src/reportWebVitals.js",[],"/Users/zowan/Documents/web/tect-react/src/App.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/index.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/HomePage.js",["159","160","161","162","163","164","165","166"],"/Users/zowan/Documents/web/tect-react/src/pages/AboutPage.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/auth.js",["167","168"],"// define ACTION type\n\nconst LOG_IN_TRY = 'auth/LOG_IN_TRY';\nconst LOG_IN_SUCCESS = 'auth/LOG_IN_SUCCESS';\nconst LOG_IN_FAIL = 'auth/LOG_IN_FAIL';\nconst CREATE_USER_SUCCESS = 'auth/CREATE_USER_SUCCESS';\n\nconst initialState = { loginState: false, userInfo: {} };\n\n// 액션타입을 redux 파일 안에 정의하고, 정의한 액션타입을 다른 파일에서 사용하기 위해\n// 액션 생성함수를 정의하고, 생성함수를 export 할 것이다.\nexport const loginSuccess = () => {\n  return { type: LOG_IN_SUCCESS };\n};\n\n// 1초 뒤에 loginSuccess() 를 디스패치 한다. 딜레이된 로그인석세스를 디스패치->다시한번 로그인석세스를 1초뒤 디스패치.\nexport const loginSuccessDelayed = () => (dispatch) => {\n  setTimeout(() => {\n    dispatch(loginSuccess());\n  }, 1000);\n};\n\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case LOG_IN_SUCCESS:\n      return {\n        userInfo: { userNickname: 'testname', userUID: 'qwerasdfzxcvnmvclkjh' },\n        loginState: true,\n      };\n    case LOG_IN_FAIL:\n      return {\n        ...state,\n        loginState: false,\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/LoginPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/user/ProfilePage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionListPage.js",["169","170"],"import { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MainLayout from '../../components/MainLayout';\nimport { readQuestionList } from '../../redux/readPost';\nimport { Link } from 'react-router-dom';\nimport QuestionBlock from '../../components/question/QuestionBlock';\n\nexport default function QuestionListPage() {\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.questionList;\n  });\n\n  const dispatch = useDispatch();\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n  const getQuestionListAsync = useCallback(() => {\n    dispatch(readQuestionList());\n  }, [dispatch]);\n\n  useEffect(async () => {\n    getQuestionListAsync();\n  }, [dispatch]);\n\n  if (loading)\n    return (\n      <MainLayout>\n        <div>로딩중...</div>\n      </MainLayout>\n    );\n  if (error)\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    );\n\n  if (!data)\n    return (\n      <MainLayout>\n        <div>no data</div>\n      </MainLayout>\n    );\n  return (\n    <>\n      <MainLayout>\n        <h2>question List</h2>\n        <Link to={'/question/write'}>글쓰기</Link>\n        {data\n          ? data.map((element) => {\n              return (\n                <>\n                  <QuestionBlock\n                    questionUID={element._id}\n                    title={element.questionBody.title}\n                  />\n                </>\n              );\n            })\n          : ''}\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionDetailPage.js",["171","172"],"import { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { readQuestionByUID } from '../../redux/readPost';\nimport MainLayout from '../../components/MainLayout';\nimport AnswerWriteBlock from '../../components/question/AnswerWriteBlock';\n\nexport default function QuestionDetailPage({ match }) {\n  const questionID = match.params.questionID;\n  const { loading, data, error } = useSelector((state) => {\n    return state.readPost.question;\n  });\n\n  const dispatch = useDispatch();\n\n  //const getPostAsync = useCallback(() => {\n  //  dispatch(readQuestionByUID(questionID));\n  //}, [dispatch]);\n  const getQuestionAsync = useCallback(() => {\n    dispatch(readQuestionByUID(questionID));\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log('match.params: ', match.params);\n    console.log('questionID: ', questionID);\n    getQuestionAsync();\n  }, [dispatch]);\n\n  if (loading)\n    return (\n      <MainLayout>\n        <div>로딩중...</div>\n      </MainLayout>\n    );\n\n  if (error) {\n    return (\n      <MainLayout>\n        <div>error...</div>\n      </MainLayout>\n    );\n  }\n  if (!data)\n    return (\n      <>\n        <MainLayout>no data</MainLayout>\n      </>\n    );\n  return (\n    <>\n      <MainLayout>\n        <div>params: {questionID}</div>\n        <h2>title: {data.questionBody.title}</h2>\n        <div>본문: {data.questionBody.content}</div>\n\n        <AnswerWriteBlock questionUID={questionID} />\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/pages/NotFoundPage.js",[],"/Users/zowan/Documents/web/tect-react/src/pages/question/QuestionWritePage.js",["173","174","175"],"import React, { useEffect } from 'react';\nimport MainLayout from '../../components/MainLayout';\nimport { useSelector } from 'react-redux';\nimport QuestionWriteBlock from '../../components/question/QuestionWriteBlock';\n\nexport default function QuestionWritePage({ history }) {\n  //useEffect(() => {\n  //  return () => {\n  //    history.block('페이지를 떠나시는건가요?');\n  //  };\n  //}, [history]);\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  return (\n    <>\n      <MainLayout>\n        <QuestionWriteBlock />\n      </MainLayout>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/home/ForceGraph.js",["176","177","178","179","180","181"],"import React from 'react';\nimport * as d3 from 'd3';\nimport styles from '../../styles/Techtree.module.css';\n\nexport default function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null);\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`;\n  };\n\n  React.useEffect(() => {\n    let destroyFn;\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      );\n      destroyFn = destroy;\n    }\n\n    return destroyFn;\n  }, []);\n\n  return <div ref={containerRef} className={styles.container} />;\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n  const links = techtreeData.links.map((d) => Object.assign({}, d));\n  const nodes = techtreeData.nodes.map((d) => Object.assign({}, d));\n\n  const containerRect = container.getBoundingClientRect();\n  const height = 1000; //containerRect.height;\n  const width = 900; //containerRect.width;\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width]);\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height]);\n\n  //const circleColor = () => { return \"#fff\"; };\n  //const circleFill = \"#fff\"\n  const circleSelctedFill = '#00bebe';\n  // 학년별로 색깔을 달리하면, 애초에 테크트리를 제시하는 의미가 없잖아.\n  // 내가 3학년인데 고체물리 들어도 되나? 이런걸 보고싶은건데.\n  function getRandom00BEBE() {\n    const colorSet1 = ['#66b7ce', '#6771dc', '#a367db', '#db67ce', '#00bebe'];\n    const colorSet2 = [\n      '#66b7ce',\n      '#00bebe',\n      'rgb(0, 170, 170)',\n      'rgb(0, 140, 190)',\n      'rgb(0, 190, 170)',\n    ];\n    const randomFactor = Math.floor(Math.random() * 5 - 0.001);\n    return colorSet2[randomFactor];\n    //return linear-gradient(135deg, orange 60%, cyan)\n    //return rgb(randomFactor, 165+randomFactor, 165+randomFactor)\n  }\n  const circleStrokeColor1 = getRandom00BEBE(); //\"#94D7FF\"\n  const circleStrokeColor2 = getRandom00BEBE(); //\"#5DE87C\"\n  const circleStrokeColor3 = getRandom00BEBE(); //\"#FFF872\"\n  const circleStrokeColor4 = getRandom00BEBE(); //\"#FF669A\"\n\n  const drag = (simulation) => {\n    const dragstarted = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (d) => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    };\n\n    const dragended = (d) => {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  const simulation = d3\n    .forceSimulation(nodes)\n    .force(\n      'link',\n      d3.forceLink(links).id((d) => d.id)\n    )\n    .force('charge', d3.forceManyBody().strength(-1050))\n    .force('link', d3.forceLink(links).distance(200))\n    .force('x', d3.forceX())\n    .force('y', d3.forceY());\n\n  var zoom = d3.zoom().scaleExtent([0.3, 8]).on('zoom', zoomed);\n\n  const svg = d3\n    .select(container)\n    .call(zoom)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75]);\n\n  var x2 = xScale.copy(); // reference.\n  var y2 = yScale.copy();\n\n  function zoomed() {\n    xScale = d3.event.transform.rescaleX(x2);\n    yScale = d3.event.transform.rescaleY(y2);\n    tick();\n  }\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', '#999')\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis');\n\n  const link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d) => {\n      return `link${d.index}`;\n    })\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)');\n\n  const node = svg\n    .append('g')\n    .attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    //.attr('class',(d)=>{return `${d.name}`})\n    .attr('class', (d) => {\n      return `node${d.index}`;\n    })\n    .attr('r', 30)\n    .style('fill', function (d) {\n      return getRandom00BEBE();\n    })\n    .style('stroke', '#fff')\n    .call(drag(simulation));\n\n  function matchColorForGroup(d) {\n    switch (d.group) {\n      case 1:\n        return circleStrokeColor1;\n      case 2:\n        return circleStrokeColor2;\n      case 3:\n        return circleStrokeColor3;\n      case 4:\n        return circleStrokeColor4;\n      default:\n        return '#00bebe';\n    }\n  }\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.index;\n    })\n    //.attr(\"class\", )\n    .text((d) => {\n      return d.label;\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(drag(simulation));\n\n  // Add the tooltip element to the graph\n  const tooltip = d3.select(container).append('div');\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    //  tooltip // tooltip is just div. how add transition?\n    //  .transition()\n    //    .duration(200)\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x + 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', 0.99);\n  };\n\n  const removeTooltip = () => {\n    tooltip\n      //  .transition()\n      //  .duration(200)\n      .style('opacity', 0);\n  };\n\n  node\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      node.style('cursor', 'pointer');\n    })\n    .on('mouseout', (d) => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n      //  container.querySelectorAll('circle').forEach((element)=>{\n      //  element.style.fill=matchColorForGroup(element)\n      //  })\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  label\n    .on('mouseover', (d) => {\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\n      fadeExceptSelected(d);\n      label.style('cursor', 'pointer');\n    })\n    .on('mouseout', () => {\n      removeTooltip();\n      node.style('opacity', '1');\n      link.style('opacity', '1');\n    })\n    .on('click', () => {\n      window.location.href = `/subjects/${category}`;\n    });\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2');\n    link.style('opacity', '0.1');\n    //const displayedNodes = []\n    //const displayedLinks = []\n\n    links.map((linkElement) => {\n      // linkElement 에 source, target은 node 객체 값이 들어가있음.\n      if (linkElement.source.id === selectedNode.id) {\n        //selectedNode.style(\"opacity\" ,\"0.1\")\n        container.querySelector(\n          `circle.node${linkElement.target.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.target.id])\n        //console.log(\"to: \",nodes[linkElement.target.id])\n      } else if (linkElement.target.id === selectedNode.id) {\n        container.querySelector(\n          `circle.node${linkElement.source.id}`\n        ).style.opacity = '1';\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n        container.querySelector(`line.link${linkElement.index}`).style.opacity =\n          '1';\n        //displayedLinks.push(linkElement)\n        //displayedNodes.push(nodes[linkElement.source.id])\n        //console.log(\"from: \",nodes[linkElement.source.id])\n      } else {\n        container.querySelector(`circle.node${selectedNode.id}`).style.opacity =\n          '1';\n      }\n      //console.log(displayedNodes)\n      //displayedNodes.map((element)=>{\n      //container.querySelector(`circle.${node.name}`).style.opacity=\"0.1\"\n      //node.select(element).style('opacity',\"1\")\n      //})\n\n      // 전부다 투명하게 만들고 나머지 투명도를 복귀하는건 안됨.\n      // 자신이 보여줄것 제외하고 그외 나머지를 투명하게 하는식으로 해야지\n      // dom 트리상의 문제가 없음.\n      //node.select(`circle.${selectedNode.name}`).style('opacity',1)\n    });\n  }\n\n  function tick() {\n    //update link positions\n    link\n      .attr('x1', function (d) {\n        return xScale(d.source.x);\n      })\n      .attr('y1', function (d) {\n        return yScale(d.source.y);\n      })\n      .attr('x2', function (d) {\n        return xScale(d.target.x);\n      })\n      .attr('y2', function (d) {\n        return yScale(d.target.y);\n      });\n\n    // update node positions\n    node.attr('cx', (d) => xScale(d.x)).attr('cy', (d) => yScale(d.y));\n\n    // update label positions\n    label.attr('x', (d) => xScale(d.x)).attr('y', (d) => yScale(d.y));\n  }\n\n  simulation.on('tick', tick);\n\n  return {\n    destroy: () => {\n      simulation.stop();\n    },\n    nodes: () => {\n      return svg.node();\n    },\n  };\n}\n","/Users/zowan/Documents/web/tect-react/src/components/MainLayout.js",[],"/Users/zowan/Documents/web/tect-react/src/lib/dummyTechtree.js",[],"/Users/zowan/Documents/web/tect-react/src/components/Navbar.js",["182","183","184"],"import React, { useState, useCallback } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loginSuccess, loginSuccessDelayed } from '../redux/auth'\nimport '../styles/Navbar.css'\nimport { FaTimes, FaBars } from 'react-icons/fa'\nimport { Button } from './Button'\n\nexport default function Navbar() {\n  // useSelector: 리덕스 스토어의 상태를 조회하는 hooks.\n  // state 의 값은 리덕스 스토에다가 getState() 를 호출했을때 나오는 값과 같음.\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.user }\n  })\n\n  // useDispatch : 리덕스 스토어의 dispatch 를 함수에서 쓸 수 있게 해주는 hooks.\n  const dispatch = useDispatch()\n\n  // useCallback : 함수의 불필요한 리렌더링을 막기 위한 hooks.\n  // react 는 컴포넌트가 리렌더링되면 함수도 새로 생기는데, 반복적으로 사용하는 함수를 리렌더링 하지 않고 재사용하기 위함.\n  const onLogin = useCallback(() => {\n    dispatch(loginSuccessDelayed())\n  }, [dispatch])\n\n  const [menuClick, setMenuClick] = useState(false)\n\n  const handleMenuClick = () => setMenuClick(!menuClick)\n  const closeMobileMenu = () => setMenuClick(false)\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"nav-container\">\n          <Link to=\"/\" className=\"navbar-logo\">\n            Tect.dev\n          </Link>\n          <div className=\"menu-icon\" onClick={handleMenuClick}>\n            {menuClick ? <FaTimes /> : <FaBars />}\n          </div>\n          <ul className={menuClick ? 'nav-menu active' : 'nav-menu'}>\n            <li className=\"nav-item\">\n              <Link to=\"/question\" className=\"nav-links\" onClick={closeMobileMenu}>\n                QnA\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/article\" className=\"nav-links\" onClick={closeMobileMenu}>\n                Article\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/freeboard\" className=\"nav-links\" onClick={closeMobileMenu}>\n                Freeboard\n              </Link>\n            </li>\n            <li className=\"nav-item\" id=\"input-container\">\n              <div className=\"input-container\">\n                <input />\n              </div>\n            </li>\n            <li className=\"nav-item\">\n              {loginState ? (\n                <Link to=\"/user/userID\" className=\"nav-links\" onClick={closeMobileMenu}>\n                  MyPage\n                </Link>\n              ) : (\n                <div className=\"nav-btns\">\n                  <Button buttonStyle=\"btn--outline\">Login</Button>\n                </div>\n              )}\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </>\n  )\n}\n","/Users/zowan/Documents/web/tect-react/src/components/Button.js",["185"],"import React from 'react'\nimport '../styles/Button.css'\nimport { Link } from 'react-router-dom'\n\nconst STYLES = ['btn--primary', 'btn--outline']\n\nconst SIZES = ['btn--medium', 'btn--large']\n\nexport const Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonStyle : STYLES[0]\n\n  return(\n    <button\n    className={`btn ${checkButtonStyle} ${checkButtonSize}`}\n    onClick={onClick}\n    type={type}\n    >\n    {children}\n    </button>\n  )\n}","/Users/zowan/Documents/web/tect-react/src/redux/post.js",["186"],"// postingAPI.함수이름 으로 사용하게 모든 함수를 임포트(import * as postingAPI)\nimport * as dummyAPI from '../lib/dummyAPI';\nimport axios from 'axios';\n\nconst initialState = {\n  posts: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n  post: {\n    loading: false,\n    data: null,\n    error: null,\n  },\n};\n\n// action types\nconst GET_POSTS_TRY = 'post/GET_POSTS_TRY';\nconst GET_POSTS_SUCCESS = 'post/GET_POSTS_SUCCESS';\nconst GET_POSTS_FAIL = 'post/GET_POSTS_FAIL';\n\nconst GET_POST_TRY = 'post/GET_POST_TRY';\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\nconst GET_POST_FAIL = 'post/GET_POST_FAIL';\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\nexport const getPosts = () => async (dispatch) => {\n  dispatch({ type: GET_POSTS_TRY }); // 요청이 시작됨\n  try {\n    const res = await axios.get('/posts'); //api 요청을 보내고, 성공하면 성공에 대한 타입을 dispatch. 에러가 발생하면 에러에 대한 dispatch\n    // 디버깅을 위해 setTimeout 을 설정해뒀다.\n    setTimeout(() => {\n      dispatch({ type: GET_POSTS_SUCCESS, posts: res.data });\n    }, 500);\n  } catch (e) {\n    dispatch({ type: GET_POSTS_FAIL, error: e });\n  }\n};\n\nexport const getPostById = (id) => async (dispatch) => {\n  dispatch({ type: GET_POST_TRY });\n  try {\n    const res = await axios.get(`/posts/${id}`);\n    console.log('res.data: ', res.data);\n    setTimeout(() => {\n      dispatch({ type: GET_POST_SUCCESS, post: res.data });\n    }, 500);\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: GET_POST_FAIL, error: e });\n  }\n};\n\nexport default function post(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS_TRY:\n      return {\n        ...state,\n        posts: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: action.posts,\n          error: null,\n        },\n      };\n    case GET_POSTS_FAIL:\n      return {\n        ...state,\n        posts: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n\n    case GET_POST_TRY:\n      return {\n        ...state,\n        post: {\n          loading: true,\n          data: null,\n          error: null,\n        },\n      };\n    case GET_POST_SUCCESS:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: action.post,\n          error: null,\n        },\n      };\n    case GET_POST_FAIL:\n      return {\n        ...state,\n        post: {\n          loading: false,\n          data: null,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/lib/dummyAPI.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/QuestionBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/components/Footer.js",[],"/Users/zowan/Documents/web/tect-react/src/components/home/SubjectBlock.js",[],"/Users/zowan/Documents/web/tect-react/src/hooks/hooks.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/readPost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/createPost.js",["187","188","189"],"import axios from 'axios';\n\nconst initialState = {\n  question: {\n    loading: false,\n    error: null,\n  },\n  answer: {\n    loading: false,\n    error: null,\n  },\n  article: {\n    loading: false,\n    error: null,\n  },\n};\n\n// action types\n\nconst CREATE_QUESTION_TRY = 'question/CREATE_QUESTION_TRY';\nconst CREATE_QUESTION_SUCCESS = 'question/CREATE_QUESTION_SUCCESS';\nconst CREATE_QUESTION_FAIL = 'question/CREATE_QUESTION_FAIL';\n\nconst CREATE_ANSWER_TRY = 'answer/CREATE_ANSWER_TRY';\nconst CREATE_ANSWER_SUCCESS = 'answer/CREATE_ANSWER_SUCCESS';\nconst CREATE_ANSWER_FAIL = 'answer/CREATE_ANSWER_FAIL';\n\nconst CREATE_ARTICLE_TRY = 'article/CREATE_ARTICLE_TRY';\nconst CREATE_ARTICLE_SUCCESS = 'article/CREATE_ARTICLE_SUCCESS';\nconst CREATE_ARTICLE_FAIL = 'article/CREATE_ARTICLE_FAIL';\n\nconst CREATE_COMMENT_TRY = 'comment/CREATE_COMMENT_TRY';\nconst CREATE_COMMENT_SUCCESS = 'comment/CREATE_COMMENT_SUCCESS';\nconst CREATE_COMMENT_FAIL = 'comment/CREATE_COMMENT_FAIL';\n\n// thunk를 사용할때는 thunk 함수를 dispatch 하므로, 굳이 액션생성함수를 만들어서 export 해줄 필요가 없다.\n\nexport const createQuestion = (data) => async (dispatch) => {\n  dispatch({ type: CREATE_QUESTION_TRY });\n  try {\n    const obj = JSON.stringify(Object.fromEntries(data));\n    //console.log(obj);\n    await axios({\n      method: 'post',\n      url: `/question`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    });\n    await dispatch({ type: CREATE_QUESTION_SUCCESS });\n    // 왜 리다이렉션이 안되지??\n    window.location.href = `/question/${obj.postID}`;\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: CREATE_QUESTION_FAIL, error: e });\n  }\n};\n\nexport const createAnswer = (data) => async (dispatch) => {\n  dispatch({ type: CREATE_ANSWER_TRY });\n  try {\n    const obj = JSON.stringify(Object.fromEntries(data));\n    await axios({\n      method: 'post',\n      url: `/answer`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    });\n    dispatch({ type: CREATE_ANSWER_SUCCESS });\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: CREATE_ANSWER_FAIL, error: e });\n  }\n};\n\nexport const createArticle = (data) => async (dispatch) => {\n  dispatch({ type: CREATE_ARTICLE_TRY });\n  try {\n    const obj = JSON.stringify(Object.fromEntries(data));\n    await axios({\n      method: 'post',\n      url: `/article`,\n      headers: { 'Content-Type': 'application/json' },\n      data: obj,\n    });\n    setTimeout(() => {\n      dispatch({ type: CREATE_ARTICLE_SUCCESS });\n    }, 500);\n  } catch (e) {\n    console.log('error: ', e);\n    dispatch({ type: CREATE_ARTICLE_FAIL, error: e });\n  }\n};\n\n// comment 작성 관련 작성.\n\nexport default function createPost(state = initialState, action) {\n  switch (action.type) {\n    case CREATE_QUESTION_TRY:\n      return {\n        ...state,\n        question: {\n          loading: true,\n          error: null,\n        },\n      };\n    case CREATE_QUESTION_SUCCESS:\n      return {\n        ...state,\n        question: {\n          loading: false,\n          error: null,\n        },\n      };\n    case CREATE_QUESTION_FAIL:\n      return {\n        ...state,\n        question: {\n          loading: false,\n          error: action.error,\n        },\n      };\n    case CREATE_ANSWER_TRY:\n      return {\n        ...state,\n        answer: {\n          loading: true,\n          error: null,\n        },\n      };\n    case CREATE_ANSWER_SUCCESS:\n      return {\n        ...state,\n        answer: {\n          loading: false,\n          error: null,\n        },\n      };\n    case CREATE_ANSWER_FAIL:\n      return {\n        ...state,\n        answer: {\n          loading: false,\n          error: action.error,\n        },\n      };\n    case CREATE_ARTICLE_TRY:\n      return {\n        ...state,\n        article: {\n          loading: true,\n          error: null,\n        },\n      };\n    case CREATE_ARTICLE_SUCCESS:\n      return {\n        ...state,\n        article: {\n          loading: false,\n          error: null,\n        },\n      };\n    case CREATE_ARTICLE_FAIL:\n      return {\n        ...state,\n        article: {\n          loading: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/redux/updatePost.js",[],"/Users/zowan/Documents/web/tect-react/src/redux/deletePost.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/AnswerWriteBlock.js",["190","191","192","193"],"import React, { useEffect, useCallback } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createAnswer } from '../../redux/createPost';\nimport MarkdownPreviewBlock from './MarkdownPreviewBlock';\n\nexport default function AnswerWriteBlock({ questionUID }) {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n\n  const [content, onChangeContent] = useInput();\n\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'answer');\n      formData.append('itIsAnswerOf', questionUID);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      formData.append('hashtags', []);\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createAnswer(formData));\n    },\n    [content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label for=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <MarkdownPreviewBlock content={content} />\n        </div>\n        <div class=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/question/QuestionWriteBlock.js",["194","195","196"],"import React, { useCallback, useState } from 'react';\nimport { uid } from 'uid';\n\nimport { useInput } from '../../hooks/hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createQuestion } from '../../redux/createPost';\nimport MarkdownPreviewBlock from './MarkdownPreviewBlock';\n\nexport default function QuestionWriteBlock() {\n  const { loginState, userInfo } = useSelector((state) => {\n    return { loginState: state.auth.loginState, userInfo: state.auth.userInfo };\n  });\n  const [title, onChangeTitle] = useInput();\n  //const [content, onChangeContent] = useInput('$\\\\frac{v^{2}}{2}$');\n  const [content, setContent] = useState();\n\n  const dispatch = useDispatch();\n\n  const onChangeContent = useCallback((e) => {\n    setContent(e.target.value);\n  }, []);\n\n  const onSubmitForm = useCallback(\n    async (e) => {\n      e.preventDefault();\n      if (!title || !content) {\n        return alert('게시글을 작성하세요.');\n      }\n      const formData = new FormData();\n      const uid24 = uid(24);\n      formData.append('postID', uid24);\n      formData.append('contentType', 'question');\n      formData.append('title', title);\n      formData.append('content', content);\n      formData.append('authorID', '123456789012345678901234');\n      formData.append('authorNickname', '임시닉네임');\n      formData.append('hashtags', []);\n\n      //if (userInfo.userUID) {\n      //  formData.append('authorID', userInfo.userUID);\n      //  formData.append('authorNickname', userInfo.userUID);\n      //} else {\n      //  formData.append('authorID', '비회원 글쓰기');\n      //  formData.append('authorNickname', '임시닉네임');\n      //}\n      dispatch(createQuestion(formData));\n    },\n    [title, content]\n  );\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm}>\n        <div>\n          <label for=\"title\">title:</label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={title}\n            onChange={onChangeTitle}\n          />\n        </div>\n        <div>\n          <label for=\"content\">content:</label>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={onChangeContent}\n          ></textarea>\n        </div>\n        <div id=\"preview\">\n          <div>{content} : content in write block</div>\n          <MarkdownPreviewBlock content={content} />\n          {\n            //unified()\n            //  .use(parse)\n            //  .use(math)\n            //  .use(remark2rehype)\n            //  .use(katex)\n            //  .use(remark2react)\n            //  .processSync(content).result\n          }\n        </div>\n        <div class=\"button\">\n          <button type=\"submit\">Send your message</button>\n        </div>\n      </form>\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/lib/functions.js",[],"/Users/zowan/Documents/web/tect-react/src/components/question/MarkdownPreviewBlock.js",["197"],"import { useState, useEffect } from 'react';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport breaks from 'remark-breaks';\nimport math from 'remark-math';\nimport remark2rehype from 'remark-rehype';\nimport katex from 'rehype-katex';\nimport stringify from 'rehype-stringify';\nimport raw from 'rehype-raw';\nimport slug from 'remark-slug';\nimport { htmlFilter } from '../../lib/functions';\n\nexport default function MarkdownPreviewBlock({ content }) {\n  const [html, setHtml] = useState(content);\n\n  useEffect(() => {\n    setHtml(\n      // html 필터를 쓰면 latex 렌더링이 이상하게 된다!\n      // 근데 html 필터를 안써도 * 이나 블록인용문 같은건 제대로 렌더링 안됨.\n      //htmlFilter(\n      unified()\n        .use(breaks)\n        .use(parse)\n        .use(slug)\n        .use(remark2rehype)\n        .use(raw)\n        .use(math)\n        .use(katex)\n        .use(stringify)\n        .processSync(content)\n        .toString()\n      //)\n    );\n  }, [content]);\n\n  //unified()\n  //  .use(parse)\n  //  .use(math)\n  //  .use(remark2rehype)\n  //  .use(katex)\n  //  .use(remark2react)\n  //  .processSync(content).result\n\n  return (\n    <>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n      {/*<div>{content} : content in Preview</div>*/}\n    </>\n  );\n}\n","/Users/zowan/Documents/web/tect-react/src/components/home/OrbitGraph.js",["198","199","200","201","202","203","204"],"import React from 'react'\nimport * as d3 from 'd3'\nimport styles from '../../styles/Techtree.module.css'\nimport { line } from 'd3'\n\nexport default function ForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null)\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`\n  }\n\n  React.useEffect(() => {\n    let destroyFn\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      )\n      destroyFn = destroy\n    }\n\n    return destroyFn\n  }, [])\n\n  return (\n    <>\n      <div ref={containerRef} className={styles.container}></div>\n    </>\n  )\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  // linksData 대신, 객체 전체를 받아야지 이게 어느 과목인지도 확인할 수 있음.\n\n  const nodeRadius = 20\n  const orbitRadius1 = 0\n  const orbitRadius2 = 120\n  const orbitRadius3 = 200\n  const orbitRadius4 = 280\n  const links = techtreeData.links.map((d) => Object.assign({}, d))\n  const nodes = techtreeData.nodes.map((d) => {\n    switch (d.group) {\n      case 1:\n        return {\n          ...d,\n          r: 30,\n          R: 0,\n          phi0: Math.ceil(Math.random() * 360),\n          speed: Math.random() * 1 * 0.0001,\n        }\n      case 2:\n        return {\n          ...d,\n          r: nodeRadius,\n          R: orbitRadius2,\n          phi0: Math.ceil(Math.random() * 360),\n          speed: Math.random() * 1 * 0.0001,\n        }\n      case 3:\n        return {\n          ...d,\n          r: nodeRadius,\n          R: orbitRadius3,\n          phi0: Math.ceil(Math.random() * 360),\n          speed: Math.random() * 1 * 0.0001,\n        }\n      case 4:\n        return {\n          ...d,\n          r: nodeRadius,\n          R: orbitRadius4,\n          phi0: Math.ceil(Math.random() * 360),\n          speed: Math.random() * 1 * 0.0001,\n        }\n      default:\n        return {\n          ...d,\n          r: 10,\n          R: 300,\n          phi0: 0, //Math.ceil(Math.random() * 360),\n          speed: Math.random() * 5 * 0.0001,\n        }\n    }\n  })\n\n  //const containerRect = container.getBoundingClientRect();\n  const height = 1000 //containerRect.height;\n  const width = 900 //containerRect.width;\n  let globalTimer = 0\n\n  let xScale = d3.scaleLinear().domain([0, width]).range([0, width])\n  let yScale = d3.scaleLinear().domain([0, height]).range([0, height])\n\n  const svg = d3\n    .select(container)\n    .append('svg')\n    .attr('viewBox', [-width / 2, -height / 3, width, height * 0.75])\n\n  svg.style('background', `url(\"${process.env.PUBLIC_URL}/images/space.png\") no-repeat`)\n\n  const orbit = svg.append('g').attr('class', 'orbit') //.style('opacity', '0')\n\n  const orbitColor = '#FFFF56' // \"#FFCC01\"\n\n  const planetColorSet = ['#D4CDC5', '#99CC31', '#027FFF', '#FF7701']\n\n  orbit.append('circle').attr('r', orbitRadius2).attr('fill', 'none').attr('stroke', orbitColor)\n  orbit.append('circle').attr('r', orbitRadius3).attr('fill', 'none').attr('stroke', orbitColor)\n  orbit.append('circle').attr('r', orbitRadius4).attr('fill', 'none').attr('stroke', orbitColor)\n\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\n    .attr('refX', 23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\n    .attr('refY', 0)\n    .attr('orient', 'auto')\n    .attr('markerWidth', 10)\n    .attr('markerHeight', 10)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n    .attr('fill', orbitColor)\n    .style('stroke', 'none')\n    .attr('stroke-width', 1)\n    .attr('id', 'vis')\n\n  const link = svg\n    .append('g')\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('class', (d, index) => {\n      return `link${index}`\n    })\n    .attr('stroke', orbitColor)\n    .attr('stroke-opacity', 0.6)\n    .attr('stroke-width', 2)\n    .attr('marker-end', 'url(#arrowhead)')\n    .style('opacity', '0')\n\n  const node = svg\n    .append('g')\n    //.attr('stroke-width', 2)\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n\n  node\n    .attr('r', (d) => {\n      return d.r\n    })\n    .attr('cx', (d) => {\n      return d.R\n    })\n    .attr('cy', (d) => {\n      return 0\n    })\n    .attr('class', (d) => {\n      return `node${d.id}`\n    })\n    .attr('fill', (d) => {\n      switch (d.group) {\n        case 1:\n          return orbitColor\n        case 2:\n          return planetColorSet[2]\n        case 3:\n          return planetColorSet[3]\n        case 4:\n          return planetColorSet[1]\n        default:\n          return '#356EC3'\n      }\n    })\n  //.attr('stroke', '#fff')\n\n  node\n    .on('mouseover', (d) => {\n      clearInterval(timeFlies)\n      addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY)\n      fadeExceptSelected(d)\n      node.style('cursor', 'pointer')\n    })\n    .on('mouseout', (d) => {\n      timeFlies = setInterval(() => {\n        objectPositionUpdate()\n        globalTimer = globalTimer + 40\n      }, 40)\n      tooltip.style('opacity', 0)\n      node.style('opacity', '1')\n      orbit.style('opacity', '1')\n      link.style('opacity', '0')\n    })\n\n  const tooltip = d3.select(container).append('div')\n\n  const addTooltip = (hoverTooltip, node, x, y) => {\n    tooltip\n      .html(hoverTooltip(node))\n      .attr('class', 'tooltip')\n      .style('left', `${x - 40}px`)\n      .style('top', `${y - 120}px`)\n      .style('opacity', '0.85')\n  }\n\n  function fadeExceptSelected(selectedNode) {\n    node.style('opacity', '0.2')\n    orbit.style('opacity', '0.2')\n\n    links.map((linkElement, index) => {\n      if (linkElement.source === selectedNode.id) {\n        svg.select(`circle.node${selectedNode.id}`).style('opacity', '1')\n        svg.select(`circle.node${linkElement.target}`).style('opacity', '1')\n\n        svg.select(`line.link${index}`).style('opacity', '1')\n      } else if (linkElement.target === selectedNode.id) {\n        svg.select(`circle.node${selectedNode.id}`).style('opacity', '1')\n        svg.select(`circle.node${linkElement.source}`).style('opacity', '1')\n\n        svg.select(`line.link${index}`).style('opacity', '1')\n      } else {\n        svg.select(`circle.node${selectedNode.id}`).style('opacity', '1')\n      }\n    })\n  }\n\n  //const trail = svg\n  //  .append('g')\n  //  .attr('class', 'trail')\n  //  .selectAll('path')\n  //  .data(nodes)\n  //  .join('path')\n  //  .attr('class', (d) => {\n  //    return `trail${d.id}`\n  //  })\n\n  function calculateTrailEnd(trailStartX, trailStartY) {\n    const radius = Math.sqrt(trailStartX * trailStartX + trailStartY * trailStartY)\n    const rootAngle = Math.acos(trailStartX / radius)\n    const finalAngle = rootAngle + 0.5\n    const trailEndX = radius * Math.cos(finalAngle)\n    const trailEndY = radius * Math.sin(finalAngle)\n\n    return [trailEndX, trailEndY]\n  }\n\n  function objectPositionUpdate() {\n    node\n      .attr('cx', (d) => d.R * Math.cos(d.phi0 + globalTimer * d.speed))\n      .attr('cy', (d) => d.R * Math.sin(d.phi0 + globalTimer * d.speed))\n\n    // trail\n    //   .attr('d', (d) => {\n    //     const trailStartX = container.querySelector(`circle.node${d.id}`).getAttribute('cx')\n    //     const trailStartY = container.querySelector(`circle.node${d.id}`).getAttribute('cy')\n    //     const trailEndPosition = calculateTrailEnd(trailStartX, trailStartY)\n    //     return `M ${trailStartX} ${trailStartY} ${trailEndPosition[0]} ${trailEndPosition[1]}`\n    //   })\n    //   .style('fill', (d) => {\n    //     return 'none'\n    //   })\n    //   .style('stroke', (d) => {\n    //     return orbitColor\n    //   })\n    //   .style('stroke-width', (d) => {\n    //     return '8'\n    //   })\n\n    link\n      .attr('x1', (d) => {\n        return container.querySelector(`circle.node${d.source}`).getAttribute('cx')\n      })\n      .attr('y1', (d) => {\n        return container.querySelector(`circle.node${d.source}`).getAttribute('cy')\n      })\n      .attr('x2', (d) => {\n        return container.querySelector(`circle.node${d.target}`).getAttribute('cx')\n      })\n      .attr('y2', (d) => {\n        return container.querySelector(`circle.node${d.target}`).getAttribute('cy')\n      })\n  }\n\n  let timeFlies = setInterval(() => {\n    //node.attr('transform', (d) => {\n    //  return `rotate(${d.phi0 + globalTimer * d.speed})`\n    //})\n\n    objectPositionUpdate()\n    globalTimer = globalTimer + 40\n  }, 40)\n\n  return {\n    destroy: () => {\n      //simulation.stop();\n    },\n    nodes: () => {\n      return svg.node()\n    },\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/components/home/ClusteredForceGraph.js",["205","206","207"],"import React from 'react'\nimport * as d3 from 'd3'\nimport { forceAttract } from 'd3-force-attract'\nimport { forceCluster } from 'd3-force-cluster'\nimport styles from '../../styles/Techtree.module.css'\n\nexport default function ClusteredForceGraph({ techtreeData, category }) {\n  const containerRef = React.useRef(null)\n\n  const nodeHoverTooltip = (node) => {\n    return `<div>     \n      <p><b>${node.name}</b></p>\n      <p>최근 5년<br />마일리지 커트라인<br />${node.recentMileage}</p>\n    </div>`\n  }\n\n  React.useEffect(() => {\n    let destroyFn\n\n    if (containerRef.current) {\n      const { destroy } = runForceGraph(\n        containerRef.current,\n        techtreeData,\n        category,\n        nodeHoverTooltip\n      )\n      destroyFn = destroy\n    }\n\n    return destroyFn\n  }, [])\n\n  return <div ref={containerRef} className={styles.container} />\n}\n\nfunction runForceGraph(container, techtreeData, category, nodeHoverTooltip) {\n  //const links = techtreeData.links.map((d) => Object.assign({}, d));\n  const m = 4 // number of distinct clusters\n  const maxRadius = 36\n  const minimumRadius = 12\n  let clusters = new Array(m)\n  const nodes = techtreeData.nodes.map((d) => {\n    const i = Math.floor(Math.random() * m) // = 0~3\n    const r = Math.sqrt(((i + 1) / m) * -Math.log(Math.random())) * maxRadius + minimumRadius\n\n    const newD = {\n      ...d,\n      cluster: d.group,\n      radius: r,\n      x: Math.cos((i / m) * 2 * Math.PI) * 200 + width / 2 + Math.random(),\n      y: Math.sin((i / m) * 2 * Math.PI) * 200 + width / 2 + Math.random(),\n    }\n    if (!clusters[i] || r > clusters[i].radius) clusters[i] = newD\n    return newD\n  })\n\n  var width = 960,\n    height = 500,\n    padding = 1.5, // separation between same-color nodes\n    clusterPadding = 6 // separation between different-color nodes\n\n  var n = 200 // total number of nodes\n\n  var color = d3.scaleSequential(d3.interpolateRainbow).domain(d3.range(m))\n\n  // The largest node for each cluster.\n\n  //var nodes = d3.range(n).map(function () {\n  //  var i = Math.floor(Math.random() * m), // = 0~3\n  //    r = Math.sqrt(((i + 1) / m) * -Math.log(Math.random())) * maxRadius,\n  //    d = {\n  //      cluster: i,\n  //      radius: r,\n  //      x: Math.cos((i / m) * 2 * Math.PI) * 200 + width / 2 + Math.random(),\n  //      y: Math.sin((i / m) * 2 * Math.PI) * 200 + height / 2 + Math.random(),\n  //    }\n  //  if (!clusters[i] || r > clusters[i].radius) clusters[i] = d\n  //  return d\n  //})\n\n  var simulation = d3\n    .forceSimulation()\n    // keep entire simulation balanced around screen center\n    .force('center', d3.forceCenter(width / 2, height / 2))\n\n    // pull toward center\n    .force(\n      'attract',\n\n      forceAttract()\n        .target([width / 2, height / 2])\n        .strength(0.01)\n    )\n\n    // cluster by section\n    .force(\n      'cluster',\n      forceCluster()\n        .centers(function (d) {\n          return clusters[d.cluster]\n        })\n        .strength(0.5)\n        .centerInertia(0.1)\n    )\n\n    // apply collision with padding\n    .force(\n      'collide',\n      d3\n        .forceCollide(function (d) {\n          return d.radius + padding\n        })\n        .strength(0)\n    )\n\n    .on('tick', layoutTick)\n    .nodes(nodes)\n\n  var svg = d3.select(container).append('svg').attr('width', width).attr('height', height)\n\n  var node = svg\n    .selectAll('circle')\n    .data(nodes)\n    .enter()\n    .append('circle')\n    .style('fill', function (d) {\n      return color(d.cluster / 10)\n    })\n    .call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended))\n\n  const label = svg\n    .append('g')\n    .attr('class', 'labels')\n    .selectAll('text')\n    .data(nodes)\n    .enter()\n    .append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dominant-baseline', 'central')\n    .attr('class', (d) => {\n      return d.id\n    })\n    .text((d) => {\n      return d.name\n    })\n    .style('font-weight', 'bold')\n    .style('fill', '#fff')\n    .call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended))\n\n  function dragstarted(d) {\n    if (!d3.event.active) simulation.alphaTarget(0.3).restart()\n    d.fx = d.x\n    d.fy = d.y\n  }\n\n  function dragged(d) {\n    d.fx = d3.event.x\n    d.fy = d3.event.y\n  }\n\n  function dragended(d) {\n    if (!d3.event.active) simulation.alphaTarget(0)\n    d.fx = null\n    d.fy = null\n  }\n\n  // ramp up collision strength to provide smooth transition\n  var transitionTime = 3000\n  var t = d3.timer(function (elapsed) {\n    var dt = elapsed / transitionTime\n    simulation.force('collide').strength(Math.pow(dt, 2) * 0.7)\n    if (dt >= 1.0) t.stop()\n  })\n\n  function layoutTick(e) {\n    node\n      .attr('cx', function (d) {\n        return d.x\n      })\n      .attr('cy', function (d) {\n        return d.y\n      })\n      .attr('r', function (d) {\n        return d.radius\n      })\n\n    // update label positions\n    label.attr('x', (d) => d.x).attr('y', (d) => d.y)\n  }\n  return {\n    destroy: () => {\n      //  simulation.stop();\n    },\n    nodes: () => {\n      return svg.node()\n    },\n  }\n}\n","/Users/zowan/Documents/web/tect-react/src/components/home/TreeGraph.js",["208","209","210","211","212"],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":12,"column":10,"nodeType":"219","messageId":"220","endLine":12,"endColumn":19},{"ruleId":"217","severity":1,"message":"221","line":12,"column":21,"nodeType":"219","messageId":"220","endLine":12,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":16,"column":5,"nodeType":"224","messageId":"225","endLine":27,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":98,"column":15,"nodeType":"228","endLine":98,"endColumn":72},{"ruleId":"226","severity":1,"message":"227","line":104,"column":15,"nodeType":"228","endLine":104,"endColumn":75},{"ruleId":"226","severity":1,"message":"227","line":110,"column":15,"nodeType":"228","endLine":110,"endColumn":69},{"ruleId":"226","severity":1,"message":"227","line":116,"column":15,"nodeType":"228","endLine":116,"endColumn":74},{"ruleId":"226","severity":1,"message":"227","line":122,"column":15,"nodeType":"228","endLine":122,"endColumn":68},{"ruleId":"217","severity":1,"message":"229","line":3,"column":7,"nodeType":"219","messageId":"220","endLine":3,"endColumn":17},{"ruleId":"217","severity":1,"message":"230","line":6,"column":7,"nodeType":"219","messageId":"220","endLine":6,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":21,"column":13,"nodeType":"233","endLine":23,"endColumn":4},{"ruleId":"231","severity":1,"message":"234","line":23,"column":6,"nodeType":"235","endLine":23,"endColumn":16,"suggestions":"236"},{"ruleId":"231","severity":1,"message":"237","line":20,"column":6,"nodeType":"235","endLine":20,"endColumn":16,"suggestions":"238"},{"ruleId":"231","severity":1,"message":"239","line":26,"column":6,"nodeType":"235","endLine":26,"endColumn":16,"suggestions":"240"},{"ruleId":"217","severity":1,"message":"241","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":26},{"ruleId":"217","severity":1,"message":"242","line":12,"column":11,"nodeType":"219","messageId":"220","endLine":12,"endColumn":21},{"ruleId":"217","severity":1,"message":"243","line":12,"column":23,"nodeType":"219","messageId":"220","endLine":12,"endColumn":31},{"ruleId":"231","severity":1,"message":"244","line":29,"column":6,"nodeType":"235","endLine":29,"endColumn":8,"suggestions":"245"},{"ruleId":"217","severity":1,"message":"246","line":39,"column":9,"nodeType":"219","messageId":"220","endLine":39,"endColumn":22},{"ruleId":"217","severity":1,"message":"247","line":48,"column":9,"nodeType":"219","messageId":"220","endLine":48,"endColumn":26},{"ruleId":"217","severity":1,"message":"248","line":52,"column":11,"nodeType":"219","messageId":"220","endLine":52,"endColumn":20},{"ruleId":"217","severity":1,"message":"249","line":171,"column":12,"nodeType":"219","messageId":"220","endLine":171,"endColumn":30},{"ruleId":"250","severity":1,"message":"251","line":267,"column":29,"nodeType":"233","messageId":"252","endLine":267,"endColumn":31},{"ruleId":"217","severity":1,"message":"253","line":4,"column":10,"nodeType":"219","messageId":"220","endLine":4,"endColumn":22},{"ruleId":"217","severity":1,"message":"243","line":12,"column":23,"nodeType":"219","messageId":"220","endLine":12,"endColumn":31},{"ruleId":"217","severity":1,"message":"254","line":21,"column":9,"nodeType":"219","messageId":"220","endLine":21,"endColumn":16},{"ruleId":"217","severity":1,"message":"255","line":3,"column":10,"nodeType":"219","messageId":"220","endLine":3,"endColumn":14},{"ruleId":"217","severity":1,"message":"256","line":2,"column":13,"nodeType":"219","messageId":"220","endLine":2,"endColumn":21},{"ruleId":"217","severity":1,"message":"257","line":32,"column":7,"nodeType":"219","messageId":"220","endLine":32,"endColumn":25},{"ruleId":"217","severity":1,"message":"258","line":33,"column":7,"nodeType":"219","messageId":"220","endLine":33,"endColumn":29},{"ruleId":"217","severity":1,"message":"259","line":34,"column":7,"nodeType":"219","messageId":"220","endLine":34,"endColumn":26},{"ruleId":"217","severity":1,"message":"241","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":26},{"ruleId":"217","severity":1,"message":"242","line":10,"column":11,"nodeType":"219","messageId":"220","endLine":10,"endColumn":21},{"ruleId":"217","severity":1,"message":"243","line":10,"column":23,"nodeType":"219","messageId":"220","endLine":10,"endColumn":31},{"ruleId":"231","severity":1,"message":"260","line":43,"column":5,"nodeType":"235","endLine":43,"endColumn":14,"suggestions":"261"},{"ruleId":"217","severity":1,"message":"242","line":10,"column":11,"nodeType":"219","messageId":"220","endLine":10,"endColumn":21},{"ruleId":"217","severity":1,"message":"243","line":10,"column":23,"nodeType":"219","messageId":"220","endLine":10,"endColumn":31},{"ruleId":"231","severity":1,"message":"262","line":48,"column":5,"nodeType":"235","endLine":48,"endColumn":21,"suggestions":"263"},{"ruleId":"217","severity":1,"message":"264","line":11,"column":10,"nodeType":"219","messageId":"220","endLine":11,"endColumn":20},{"ruleId":"217","severity":1,"message":"265","line":4,"column":10,"nodeType":"219","messageId":"220","endLine":4,"endColumn":14},{"ruleId":"231","severity":1,"message":"244","line":30,"column":6,"nodeType":"235","endLine":30,"endColumn":8,"suggestions":"266"},{"ruleId":"217","severity":1,"message":"267","line":43,"column":9,"nodeType":"219","messageId":"220","endLine":43,"endColumn":21},{"ruleId":"217","severity":1,"message":"268","line":98,"column":7,"nodeType":"219","messageId":"220","endLine":98,"endColumn":13},{"ruleId":"217","severity":1,"message":"269","line":99,"column":7,"nodeType":"219","messageId":"220","endLine":99,"endColumn":13},{"ruleId":"250","severity":1,"message":"251","line":219,"column":36,"nodeType":"233","messageId":"252","endLine":219,"endColumn":38},{"ruleId":"217","severity":1,"message":"270","line":246,"column":12,"nodeType":"219","messageId":"220","endLine":246,"endColumn":29},{"ruleId":"231","severity":1,"message":"244","line":31,"column":6,"nodeType":"235","endLine":31,"endColumn":8,"suggestions":"271"},{"ruleId":"217","severity":1,"message":"272","line":60,"column":5,"nodeType":"219","messageId":"220","endLine":60,"endColumn":19},{"ruleId":"217","severity":1,"message":"273","line":62,"column":7,"nodeType":"219","messageId":"220","endLine":62,"endColumn":8},{"ruleId":"231","severity":1,"message":"244","line":29,"column":6,"nodeType":"235","endLine":29,"endColumn":8,"suggestions":"274"},{"ruleId":"217","severity":1,"message":"268","line":45,"column":7,"nodeType":"219","messageId":"220","endLine":45,"endColumn":13},{"ruleId":"217","severity":1,"message":"269","line":46,"column":7,"nodeType":"219","messageId":"220","endLine":46,"endColumn":13},{"ruleId":"250","severity":1,"message":"251","line":54,"column":32,"nodeType":"233","messageId":"252","endLine":54,"endColumn":34},{"ruleId":"250","severity":1,"message":"251","line":203,"column":36,"nodeType":"233","messageId":"252","endLine":203,"endColumn":38},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'onPhysics' is assigned a value but never used.","Identifier","unusedVar","'setOnPhysics' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'LOG_IN_TRY' is assigned a value but never used.","'CREATE_USER_SUCCESS' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'getQuestionListAsync'. Either include it or remove the dependency array.","ArrayExpression",["277"],"React Hook useCallback has a missing dependency: 'questionID'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has missing dependencies: 'getQuestionAsync', 'match.params', and 'questionID'. Either include them or remove the dependency array.",["279"],"'useEffect' is defined but never used.","'loginState' is assigned a value but never used.","'userInfo' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'category' and 'techtreeData'. Either include them or remove the dependency array.",["280"],"'containerRect' is assigned a value but never used.","'circleSelctedFill' is assigned a value but never used.","'colorSet1' is assigned a value but never used.","'matchColorForGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'loginSuccess' is defined but never used.","'onLogin' is assigned a value but never used.","'Link' is defined but never used.","'dummyAPI' is defined but never used.","'CREATE_COMMENT_TRY' is assigned a value but never used.","'CREATE_COMMENT_SUCCESS' is assigned a value but never used.","'CREATE_COMMENT_FAIL' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'questionUID'. Either include them or remove the dependency array.",["281"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["282"],"'htmlFilter' is defined but never used.","'line' is defined but never used.",["283"],"'orbitRadius1' is assigned a value but never used.","'xScale' is assigned a value but never used.","'yScale' is assigned a value but never used.","'calculateTrailEnd' is defined but never used.",["284"],"'clusterPadding' is assigned a value but never used.","'n' is assigned a value but never used.",["285"],"no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"292","fix":"298"},{"desc":"292","fix":"299"},{"desc":"292","fix":"300"},"Update the dependencies array to be: [dispatch, getQuestionListAsync]",{"range":"301","text":"302"},"Update the dependencies array to be: [dispatch, questionID]",{"range":"303","text":"304"},"Update the dependencies array to be: [dispatch, getQuestionAsync, match.params, questionID]",{"range":"305","text":"306"},"Update the dependencies array to be: [category, techtreeData]",{"range":"307","text":"308"},"Update the dependencies array to be: [content, dispatch, questionUID]",{"range":"309","text":"310"},"Update the dependencies array to be: [title, content, dispatch]",{"range":"311","text":"312"},{"range":"313","text":"308"},{"range":"314","text":"308"},{"range":"315","text":"308"},[798,808],"[dispatch, getQuestionListAsync]",[741,751],"[dispatch, questionID]",[898,908],"[dispatch, getQuestionAsync, match.params, questionID]",[677,679],"[category, techtreeData]",[1473,1482],"[content, dispatch, questionUID]",[1668,1684],"[title, content, dispatch]",[693,695],[772,774],[667,669]]